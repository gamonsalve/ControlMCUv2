
ControlMCUv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  08010450  08010450  00020450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c40  08010c40  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  08010c40  08010c40  00020c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c48  08010c48  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c48  08010c48  00020c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c4c  08010c4c  00020c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  08010c50  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047f0  200002c0  08010f10  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004ab0  08010f10  00034ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016155  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002905  00000000  00000000  00046445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00048d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0004a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224d9  00000000  00000000  0004b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016bb2  00000000  00000000  0006d7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceaf9  00000000  00000000  00084383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152e7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ebc  00000000  00000000  00152ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010434 	.word	0x08010434

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	08010434 	.word	0x08010434

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f002 fb04 	bl	800360a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 fea3 	bl	8001d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f001 f8df 	bl	80021c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800100a:	f000 ff31 	bl	8001e70 <MX_TIM1_Init>
  MX_TIM16_Init();
 800100e:	f001 f803 	bl	8002018 <MX_TIM16_Init>
  MX_I2C1_Init();
 8001012:	f000 feed 	bl	8001df0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001016:	f001 f8a7 	bl	8002168 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800101a:	f001 f875 	bl	8002108 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800101e:	f000 ffc3 	bl	8001fa8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(5000);
 8001022:	f241 3088 	movw	r0, #5000	; 0x1388
 8001026:	f002 fb65 	bl	80036f4 <HAL_Delay>
  TIM1->CCR1 = 4800; // Left PWM neutral value
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <main+0x78>)
 800102c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR4 = 4800; // Right PWM neutral value
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <main+0x78>)
 8001034:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001038:	641a      	str	r2, [r3, #64]	; 0x40
  TIM16->CCR1 = 4800; // Linear actuators PWM neutral value
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <main+0x7c>)
 800103c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Base_Start(&htim6); // Start TIM6 related timers
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <main+0x80>)
 8001044:	f005 fcc4 	bl	80069d0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Start TIM16 CH1 (Linear actuators))
 8001048:	2100      	movs	r1, #0
 800104a:	480c      	ldr	r0, [pc, #48]	; (800107c <main+0x84>)
 800104c:	f005 fd64 	bl	8006b18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Start TIM1 CH4 (Right PWM)
 8001050:	210c      	movs	r1, #12
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <main+0x88>)
 8001054:	f005 fd60 	bl	8006b18 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // Start TIM1 CH1N (Left PWM)
 8001058:	2100      	movs	r1, #0
 800105a:	4809      	ldr	r0, [pc, #36]	; (8001080 <main+0x88>)
 800105c:	f006 fba8 	bl	80077b0 <HAL_TIMEx_PWMN_Start>
  PIController_Init(&LeftController); // Left PI init
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <main+0x8c>)
 8001062:	f001 fed5 	bl	8002e10 <PIController_Init>
  PIController_Init(&RightController); // Right PI init
 8001066:	4808      	ldr	r0, [pc, #32]	; (8001088 <main+0x90>)
 8001068:	f001 fed2 	bl	8002e10 <PIController_Init>
  while (raspberry_flag == 0){
 800106c:	e021      	b.n	80010b2 <main+0xba>
 800106e:	bf00      	nop
 8001070:	40012c00 	.word	0x40012c00
 8001074:	40014400 	.word	0x40014400
 8001078:	2000037c 	.word	0x2000037c
 800107c:	200003c8 	.word	0x200003c8
 8001080:	20000330 	.word	0x20000330
 8001084:	20000070 	.word	0x20000070
 8001088:	200000a8 	.word	0x200000a8
	  HAL_UART_Receive(&huart2, uart2_Rx, 1, 10000);
 800108c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001090:	2201      	movs	r2, #1
 8001092:	49a1      	ldr	r1, [pc, #644]	; (8001318 <main+0x320>)
 8001094:	48a1      	ldr	r0, [pc, #644]	; (800131c <main+0x324>)
 8001096:	f006 fd98 	bl	8007bca <HAL_UART_Receive>
	  if (uart2_Rx[0] == 'R'){
 800109a:	4b9f      	ldr	r3, [pc, #636]	; (8001318 <main+0x320>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b52      	cmp	r3, #82	; 0x52
 80010a0:	d107      	bne.n	80010b2 <main+0xba>
		  raspberry_flag = 1;
 80010a2:	4b9f      	ldr	r3, [pc, #636]	; (8001320 <main+0x328>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, uart2_Tx, 50);
 80010a8:	2232      	movs	r2, #50	; 0x32
 80010aa:	499e      	ldr	r1, [pc, #632]	; (8001324 <main+0x32c>)
 80010ac:	489b      	ldr	r0, [pc, #620]	; (800131c <main+0x324>)
 80010ae:	f006 fe5d 	bl	8007d6c <HAL_UART_Transmit_IT>
  while (raspberry_flag == 0){
 80010b2:	4b9b      	ldr	r3, [pc, #620]	; (8001320 <main+0x328>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0e8      	beq.n	800108c <main+0x94>
	  }
  } // Raspberry Pi is ready -> Starting defined trajectory reception
  while (trajectory_flag == 0){
 80010ba:	bf00      	nop
 80010bc:	4b9a      	ldr	r3, [pc, #616]	; (8001328 <main+0x330>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0fb      	beq.n	80010bc <main+0xc4>
  } // Defined trajectory received -> Starting while loop
  timer1 = __HAL_TIM_GET_COUNTER(&htim6);
 80010c4:	4b99      	ldr	r3, [pc, #612]	; (800132c <main+0x334>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b98      	ldr	r3, [pc, #608]	; (8001330 <main+0x338>)
 80010ce:	801a      	strh	r2, [r3, #0]
  Btimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 80010d0:	4b96      	ldr	r3, [pc, #600]	; (800132c <main+0x334>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b96      	ldr	r3, [pc, #600]	; (8001334 <main+0x33c>)
 80010da:	801a      	strh	r2, [r3, #0]
  Mtimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 80010dc:	4b93      	ldr	r3, [pc, #588]	; (800132c <main+0x334>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b94      	ldr	r3, [pc, #592]	; (8001338 <main+0x340>)
 80010e6:	801a      	strh	r2, [r3, #0]
  Dtimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 80010e8:	4b90      	ldr	r3, [pc, #576]	; (800132c <main+0x334>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b92      	ldr	r3, [pc, #584]	; (800133c <main+0x344>)
 80010f2:	801a      	strh	r2, [r3, #0]
  Ctimer = __HAL_TIM_GET_COUNTER(&htim6);// Start timers
 80010f4:	4b8d      	ldr	r3, [pc, #564]	; (800132c <main+0x334>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b90      	ldr	r3, [pc, #576]	; (8001340 <main+0x348>)
 80010fe:	801a      	strh	r2, [r3, #0]
  HAL_Delay(1000); // Waiting for init before starting while loop
 8001100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001104:	f002 faf6 	bl	80036f4 <HAL_Delay>
  Acttimer = HAL_GetTick();
 8001108:	f002 fae8 	bl	80036dc <HAL_GetTick>
 800110c:	4603      	mov	r3, r0
 800110e:	4a8d      	ldr	r2, [pc, #564]	; (8001344 <main+0x34c>)
 8001110:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Heartbeat();
 8001112:	f001 fda3 	bl	8002c5c <Heartbeat>

	  LinAct();
 8001116:	f001 fdbb 	bl	8002c90 <LinAct>

	  Mtimer2 = __HAL_TIM_GET_COUNTER(&htim6); // Updating Wz timer
 800111a:	4b84      	ldr	r3, [pc, #528]	; (800132c <main+0x334>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	b29a      	uxth	r2, r3
 8001122:	4b89      	ldr	r3, [pc, #548]	; (8001348 <main+0x350>)
 8001124:	801a      	strh	r2, [r3, #0]
	  if (Mtimer2<Mtimer1){
 8001126:	4b88      	ldr	r3, [pc, #544]	; (8001348 <main+0x350>)
 8001128:	881a      	ldrh	r2, [r3, #0]
 800112a:	4b83      	ldr	r3, [pc, #524]	; (8001338 <main+0x340>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d20b      	bcs.n	800114a <main+0x152>
		  Mtimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 8001132:	4b7e      	ldr	r3, [pc, #504]	; (800132c <main+0x334>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <main+0x340>)
 800113c:	801a      	strh	r2, [r3, #0]
		  Mtimer2 = __HAL_TIM_GET_COUNTER(&htim6);
 800113e:	4b7b      	ldr	r3, [pc, #492]	; (800132c <main+0x334>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b80      	ldr	r3, [pc, #512]	; (8001348 <main+0x350>)
 8001148:	801a      	strh	r2, [r3, #0]
	  } // Overflow -> Resetting Wz timer
	  if ((Mtimer2 - Mtimer1 > TIM6_TO_MILLIS*FREQ_MEASURE || Mmode == 'F') && (Bmode == 'F')){
 800114a:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <main+0x350>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4b79      	ldr	r3, [pc, #484]	; (8001338 <main+0x340>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800115a:	dc03      	bgt.n	8001164 <main+0x16c>
 800115c:	4b7b      	ldr	r3, [pc, #492]	; (800134c <main+0x354>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b46      	cmp	r3, #70	; 0x46
 8001162:	d105      	bne.n	8001170 <main+0x178>
 8001164:	4b7a      	ldr	r3, [pc, #488]	; (8001350 <main+0x358>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b46      	cmp	r3, #70	; 0x46
 800116a:	d101      	bne.n	8001170 <main+0x178>
		  GetMeasureInfos();
 800116c:	f001 fcb0 	bl	8002ad0 <GetMeasureInfos>
	  } // Getting Z axis angular speed from IMU via Measure MCU each 50 ms*/

	  Btimer2 = __HAL_TIM_GET_COUNTER(&htim6); // Updating BMS timer
 8001170:	4b6e      	ldr	r3, [pc, #440]	; (800132c <main+0x334>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b76      	ldr	r3, [pc, #472]	; (8001354 <main+0x35c>)
 800117a:	801a      	strh	r2, [r3, #0]
	  if (Btimer2<Btimer1){
 800117c:	4b75      	ldr	r3, [pc, #468]	; (8001354 <main+0x35c>)
 800117e:	881a      	ldrh	r2, [r3, #0]
 8001180:	4b6c      	ldr	r3, [pc, #432]	; (8001334 <main+0x33c>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d20b      	bcs.n	80011a0 <main+0x1a8>
		  Btimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 8001188:	4b68      	ldr	r3, [pc, #416]	; (800132c <main+0x334>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b68      	ldr	r3, [pc, #416]	; (8001334 <main+0x33c>)
 8001192:	801a      	strh	r2, [r3, #0]
		  Btimer2 = __HAL_TIM_GET_COUNTER(&htim6);
 8001194:	4b65      	ldr	r3, [pc, #404]	; (800132c <main+0x334>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b6d      	ldr	r3, [pc, #436]	; (8001354 <main+0x35c>)
 800119e:	801a      	strh	r2, [r3, #0]
	  } // Overflow -> Resetting BMS timer
	  if ((Btimer2 - Btimer1 > TIM6_TO_MILLIS*FREQ_BMS && Bmode == 'F') && (Mmode == 'F')){
 80011a0:	4b6c      	ldr	r3, [pc, #432]	; (8001354 <main+0x35c>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b63      	ldr	r3, [pc, #396]	; (8001334 <main+0x33c>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b0:	dd09      	ble.n	80011c6 <main+0x1ce>
 80011b2:	4b67      	ldr	r3, [pc, #412]	; (8001350 <main+0x358>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b46      	cmp	r3, #70	; 0x46
 80011b8:	d105      	bne.n	80011c6 <main+0x1ce>
 80011ba:	4b64      	ldr	r3, [pc, #400]	; (800134c <main+0x354>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b46      	cmp	r3, #70	; 0x46
 80011c0:	d101      	bne.n	80011c6 <main+0x1ce>
		  GetBMS();
 80011c2:	f001 fcd5 	bl	8002b70 <GetBMS>
	  } // Getting BMS MCU info each 100 ms

	  if (speed_flag == 1){
 80011c6:	4b64      	ldr	r3, [pc, #400]	; (8001358 <main+0x360>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <main+0x1da>
		  GetSpeed();
 80011ce:	f001 fd03 	bl	8002bd8 <GetSpeed>
	  } // Receiving speed is done -> Get speed again

	  if ((uint16_t)(__HAL_TIM_GET_COUNTER(&htim6) - Ctimer) > TIM6_TO_MILLIS*FREQ_CTRL){
 80011d2:	4b56      	ldr	r3, [pc, #344]	; (800132c <main+0x334>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b59      	ldr	r3, [pc, #356]	; (8001340 <main+0x348>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	f240 842b 	bls.w	8001a3e <main+0xa46>
		  ControlTime = (uint16_t)(__HAL_TIM_GET_COUNTER(&htim6) - Ctimer)/10000.0; // Control time (s)
 80011e8:	4b50      	ldr	r3, [pc, #320]	; (800132c <main+0x334>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <main+0x348>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f993 	bl	8000524 <__aeabi_i2d>
 80011fe:	a33e      	add	r3, pc, #248	; (adr r3, 80012f8 <main+0x300>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fb22 	bl	800084c <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4953      	ldr	r1, [pc, #332]	; (800135c <main+0x364>)
 800120e:	e9c1 2300 	strd	r2, r3, [r1]
		  Theta += Wcc_z*ControlTime*M_PI/180; // Z axis angle (rad)
 8001212:	4b53      	ldr	r3, [pc, #332]	; (8001360 <main+0x368>)
 8001214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <main+0x364>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff f9eb 	bl	80005f8 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	a335      	add	r3, pc, #212	; (adr r3, 8001300 <main+0x308>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f7ff f9e2 	bl	80005f8 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b48      	ldr	r3, [pc, #288]	; (8001364 <main+0x36c>)
 8001242:	f7ff fb03 	bl	800084c <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	4b46      	ldr	r3, [pc, #280]	; (8001368 <main+0x370>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f81a 	bl	800028c <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4942      	ldr	r1, [pc, #264]	; (8001368 <main+0x370>)
 800125e:	e9c1 2300 	strd	r2, r3, [r1]
		  X_dot = (speedR+speedL)*(WHEEL_RADIUS/(2*GEAR_RATIO))*cos(Theta)*((2*M_PI)/60); // X axis speed (m/s)
 8001262:	4b42      	ldr	r3, [pc, #264]	; (800136c <main+0x374>)
 8001264:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001268:	4b41      	ldr	r3, [pc, #260]	; (8001370 <main+0x378>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f80d 	bl	800028c <__adddf3>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	a323      	add	r3, pc, #140	; (adr r3, 8001308 <main+0x310>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f9ba 	bl	80005f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	461d      	mov	r5, r3
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <main+0x370>)
 800128e:	ed93 7b00 	vldr	d7, [r3]
 8001292:	eeb0 0a47 	vmov.f32	s0, s14
 8001296:	eef0 0a67 	vmov.f32	s1, s15
 800129a:	f00c fdc5 	bl	800de28 <cos>
 800129e:	ec53 2b10 	vmov	r2, r3, d0
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7ff f9a7 	bl	80005f8 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	a317      	add	r3, pc, #92	; (adr r3, 8001310 <main+0x318>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff f99e 	bl	80005f8 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	492c      	ldr	r1, [pc, #176]	; (8001374 <main+0x37c>)
 80012c2:	e9c1 2300 	strd	r2, r3, [r1]
		  Y_dot = (speedR+speedL)*(WHEEL_RADIUS/(2*GEAR_RATIO))*sin(Theta)*((2*M_PI)/60); // Y axis speed (m/s)
 80012c6:	4b29      	ldr	r3, [pc, #164]	; (800136c <main+0x374>)
 80012c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <main+0x378>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7fe ffdb 	bl	800028c <__adddf3>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	a30a      	add	r3, pc, #40	; (adr r3, 8001308 <main+0x310>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f988 	bl	80005f8 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4614      	mov	r4, r2
 80012ee:	461d      	mov	r5, r3
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <main+0x370>)
 80012f2:	ed93 7b00 	vldr	d7, [r3]
 80012f6:	e03f      	b.n	8001378 <main+0x380>
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40c38800 	.word	0x40c38800
 8001300:	54442d18 	.word	0x54442d18
 8001304:	400921fb 	.word	0x400921fb
 8001308:	0a3d70a4 	.word	0x0a3d70a4
 800130c:	3f70a3d7 	.word	0x3f70a3d7
 8001310:	f37bebd5 	.word	0xf37bebd5
 8001314:	3fbacee9 	.word	0x3fbacee9
 8001318:	20004768 	.word	0x20004768
 800131c:	20000498 	.word	0x20000498
 8001320:	200046e8 	.word	0x200046e8
 8001324:	2000000c 	.word	0x2000000c
 8001328:	200046ec 	.word	0x200046ec
 800132c:	2000037c 	.word	0x2000037c
 8001330:	2000497c 	.word	0x2000497c
 8001334:	20004984 	.word	0x20004984
 8001338:	20004978 	.word	0x20004978
 800133c:	20004980 	.word	0x20004980
 8001340:	20004988 	.word	0x20004988
 8001344:	20004990 	.word	0x20004990
 8001348:	2000497a 	.word	0x2000497a
 800134c:	20000008 	.word	0x20000008
 8001350:	20000007 	.word	0x20000007
 8001354:	20004986 	.word	0x20004986
 8001358:	20000000 	.word	0x20000000
 800135c:	200049a8 	.word	0x200049a8
 8001360:	200049d0 	.word	0x200049d0
 8001364:	40668000 	.word	0x40668000
 8001368:	200049e8 	.word	0x200049e8
 800136c:	200049e0 	.word	0x200049e0
 8001370:	200049d8 	.word	0x200049d8
 8001374:	200049f0 	.word	0x200049f0
 8001378:	eeb0 0a47 	vmov.f32	s0, s14
 800137c:	eef0 0a67 	vmov.f32	s1, s15
 8001380:	f00c fda6 	bl	800ded0 <sin>
 8001384:	ec53 2b10 	vmov	r2, r3, d0
 8001388:	4620      	mov	r0, r4
 800138a:	4629      	mov	r1, r5
 800138c:	f7ff f934 	bl	80005f8 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	a3b4      	add	r3, pc, #720	; (adr r3, 800166c <main+0x674>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff f92b 	bl	80005f8 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	499e      	ldr	r1, [pc, #632]	; (8001620 <main+0x628>)
 80013a8:	e9c1 2300 	strd	r2, r3, [r1]
		  X += X_dot*ControlTime; // X axis position (m)
 80013ac:	4b9d      	ldr	r3, [pc, #628]	; (8001624 <main+0x62c>)
 80013ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b2:	4b9d      	ldr	r3, [pc, #628]	; (8001628 <main+0x630>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f91e 	bl	80005f8 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	4b99      	ldr	r3, [pc, #612]	; (800162c <main+0x634>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7fe ff5f 	bl	800028c <__adddf3>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4996      	ldr	r1, [pc, #600]	; (800162c <main+0x634>)
 80013d4:	e9c1 2300 	strd	r2, r3, [r1]
		  Y += Y_dot*ControlTime; // Y axis position (m)
 80013d8:	4b91      	ldr	r3, [pc, #580]	; (8001620 <main+0x628>)
 80013da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013de:	4b92      	ldr	r3, [pc, #584]	; (8001628 <main+0x630>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f908 	bl	80005f8 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	4b8f      	ldr	r3, [pc, #572]	; (8001630 <main+0x638>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7fe ff49 	bl	800028c <__adddf3>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	498c      	ldr	r1, [pc, #560]	; (8001630 <main+0x638>)
 8001400:	e9c1 2300 	strd	r2, r3, [r1]
		  if (LidarControl == 'T'){
 8001404:	4b8b      	ldr	r3, [pc, #556]	; (8001634 <main+0x63c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b54      	cmp	r3, #84	; 0x54
 800140a:	d122      	bne.n	8001452 <main+0x45a>
			  dx = Xref[k] - Xlidar; // X axis position error using Lidar (m)
 800140c:	4b8a      	ldr	r3, [pc, #552]	; (8001638 <main+0x640>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a8a      	ldr	r2, [pc, #552]	; (800163c <main+0x644>)
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141a:	4b89      	ldr	r3, [pc, #548]	; (8001640 <main+0x648>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7fe ff32 	bl	8000288 <__aeabi_dsub>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4986      	ldr	r1, [pc, #536]	; (8001644 <main+0x64c>)
 800142a:	e9c1 2300 	strd	r2, r3, [r1]
			  dy = Yref[k] - Ylidar; // Y axis position error using Lidar (m)
 800142e:	4b82      	ldr	r3, [pc, #520]	; (8001638 <main+0x640>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a85      	ldr	r2, [pc, #532]	; (8001648 <main+0x650>)
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143c:	4b83      	ldr	r3, [pc, #524]	; (800164c <main+0x654>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7fe ff21 	bl	8000288 <__aeabi_dsub>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4981      	ldr	r1, [pc, #516]	; (8001650 <main+0x658>)
 800144c:	e9c1 2300 	strd	r2, r3, [r1]
 8001450:	e021      	b.n	8001496 <main+0x49e>
		  }
		  else{
			  dx = Xref[k] - X; // X axis position error (m)
 8001452:	4b79      	ldr	r3, [pc, #484]	; (8001638 <main+0x640>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a79      	ldr	r2, [pc, #484]	; (800163c <main+0x644>)
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001460:	4b72      	ldr	r3, [pc, #456]	; (800162c <main+0x634>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7fe ff0f 	bl	8000288 <__aeabi_dsub>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4975      	ldr	r1, [pc, #468]	; (8001644 <main+0x64c>)
 8001470:	e9c1 2300 	strd	r2, r3, [r1]
			  dy = Yref[k] - Y; // Y axis position error (m)
 8001474:	4b70      	ldr	r3, [pc, #448]	; (8001638 <main+0x640>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a73      	ldr	r2, [pc, #460]	; (8001648 <main+0x650>)
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001482:	4b6b      	ldr	r3, [pc, #428]	; (8001630 <main+0x638>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7fe fefe 	bl	8000288 <__aeabi_dsub>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	496f      	ldr	r1, [pc, #444]	; (8001650 <main+0x658>)
 8001492:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  distance = sqrt(pow(dx,2)+pow(dy,2)); // Global position error (m)
 8001496:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <main+0x64c>)
 8001498:	ed93 7b00 	vldr	d7, [r3]
 800149c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8001600 <main+0x608>
 80014a0:	eeb0 0a47 	vmov.f32	s0, s14
 80014a4:	eef0 0a67 	vmov.f32	s1, s15
 80014a8:	f00c fd9a 	bl	800dfe0 <pow>
 80014ac:	ec55 4b10 	vmov	r4, r5, d0
 80014b0:	4b67      	ldr	r3, [pc, #412]	; (8001650 <main+0x658>)
 80014b2:	ed93 7b00 	vldr	d7, [r3]
 80014b6:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001600 <main+0x608>
 80014ba:	eeb0 0a47 	vmov.f32	s0, s14
 80014be:	eef0 0a67 	vmov.f32	s1, s15
 80014c2:	f00c fd8d 	bl	800dfe0 <pow>
 80014c6:	ec53 2b10 	vmov	r2, r3, d0
 80014ca:	4620      	mov	r0, r4
 80014cc:	4629      	mov	r1, r5
 80014ce:	f7fe fedd 	bl	800028c <__adddf3>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	ec43 2b17 	vmov	d7, r2, r3
 80014da:	eeb0 0a47 	vmov.f32	s0, s14
 80014de:	eef0 0a67 	vmov.f32	s1, s15
 80014e2:	f00c fded 	bl	800e0c0 <sqrt>
 80014e6:	eeb0 7a40 	vmov.f32	s14, s0
 80014ea:	eef0 7a60 	vmov.f32	s15, s1
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <main+0x65c>)
 80014f0:	ed83 7b00 	vstr	d7, [r3]
		  ThetaDes = atan2(dy,dx); // Z axis desired angle (rad)
 80014f4:	4b56      	ldr	r3, [pc, #344]	; (8001650 <main+0x658>)
 80014f6:	ed93 7b00 	vldr	d7, [r3]
 80014fa:	4b52      	ldr	r3, [pc, #328]	; (8001644 <main+0x64c>)
 80014fc:	ed93 6b00 	vldr	d6, [r3]
 8001500:	eeb0 1a46 	vmov.f32	s2, s12
 8001504:	eef0 1a66 	vmov.f32	s3, s13
 8001508:	eeb0 0a47 	vmov.f32	s0, s14
 800150c:	eef0 0a67 	vmov.f32	s1, s15
 8001510:	f00c fd36 	bl	800df80 <atan2>
 8001514:	eeb0 7a40 	vmov.f32	s14, s0
 8001518:	eef0 7a60 	vmov.f32	s15, s1
 800151c:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <main+0x660>)
 800151e:	ed83 7b00 	vstr	d7, [r3]
		  ThetaDes_N = fmod((ThetaDes + 2*M_PI), (2*M_PI)); // Z axis desired angle normalization between 0 and 2 Pi (rad)
 8001522:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <main+0x660>)
 8001524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001528:	a337      	add	r3, pc, #220	; (adr r3, 8001608 <main+0x610>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7fe fead 	bl	800028c <__adddf3>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	ec43 2b17 	vmov	d7, r2, r3
 800153a:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001608 <main+0x610>
 800153e:	eeb0 0a47 	vmov.f32	s0, s14
 8001542:	eef0 0a67 	vmov.f32	s1, s15
 8001546:	f00c fd1d 	bl	800df84 <fmod>
 800154a:	eeb0 7a40 	vmov.f32	s14, s0
 800154e:	eef0 7a60 	vmov.f32	s15, s1
 8001552:	4b42      	ldr	r3, [pc, #264]	; (800165c <main+0x664>)
 8001554:	ed83 7b00 	vstr	d7, [r3]
		  Theta_N = fmod((Theta + 2*M_PI), (2*M_PI)); // Z axis angle normalization between 0 and 2 Pi (rad)
 8001558:	4b41      	ldr	r3, [pc, #260]	; (8001660 <main+0x668>)
 800155a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155e:	a32a      	add	r3, pc, #168	; (adr r3, 8001608 <main+0x610>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7fe fe92 	bl	800028c <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	ec43 2b17 	vmov	d7, r2, r3
 8001570:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8001608 <main+0x610>
 8001574:	eeb0 0a47 	vmov.f32	s0, s14
 8001578:	eef0 0a67 	vmov.f32	s1, s15
 800157c:	f00c fd02 	bl	800df84 <fmod>
 8001580:	eeb0 7a40 	vmov.f32	s14, s0
 8001584:	eef0 7a60 	vmov.f32	s15, s1
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <main+0x66c>)
 800158a:	ed83 7b00 	vstr	d7, [r3]
		  if (((ThetaDes_N-Theta_N) < -M_PI ) && (ThetaDes_N < (M_PI/3))){
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <main+0x664>)
 8001590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001594:	4b33      	ldr	r3, [pc, #204]	; (8001664 <main+0x66c>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7fe fe75 	bl	8000288 <__aeabi_dsub>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	a31a      	add	r3, pc, #104	; (adr r3, 8001610 <main+0x618>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff fa96 	bl	8000adc <__aeabi_dcmplt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d05e      	beq.n	8001674 <main+0x67c>
 80015b6:	4b29      	ldr	r3, [pc, #164]	; (800165c <main+0x664>)
 80015b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015bc:	a316      	add	r3, pc, #88	; (adr r3, 8001618 <main+0x620>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff fa8b 	bl	8000adc <__aeabi_dcmplt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d053      	beq.n	8001674 <main+0x67c>
			  Theta_Err = ThetaDes_N - Theta_N + (2*M_PI);
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <main+0x664>)
 80015ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <main+0x66c>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7fe fe56 	bl	8000288 <__aeabi_dsub>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	a308      	add	r3, pc, #32	; (adr r3, 8001608 <main+0x610>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7fe fe4f 	bl	800028c <__adddf3>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	491d      	ldr	r1, [pc, #116]	; (8001668 <main+0x670>)
 80015f4:	e9c1 2300 	strd	r2, r3, [r1]
 80015f8:	e0a1      	b.n	800173e <main+0x746>
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w
 8001600:	00000000 	.word	0x00000000
 8001604:	40000000 	.word	0x40000000
 8001608:	54442d18 	.word	0x54442d18
 800160c:	401921fb 	.word	0x401921fb
 8001610:	54442d18 	.word	0x54442d18
 8001614:	c00921fb 	.word	0xc00921fb
 8001618:	382d7365 	.word	0x382d7365
 800161c:	3ff0c152 	.word	0x3ff0c152
 8001620:	200049f8 	.word	0x200049f8
 8001624:	200049f0 	.word	0x200049f0
 8001628:	200049a8 	.word	0x200049a8
 800162c:	20004a00 	.word	0x20004a00
 8001630:	20004a08 	.word	0x20004a08
 8001634:	20000004 	.word	0x20000004
 8001638:	200046e4 	.word	0x200046e4
 800163c:	20000530 	.word	0x20000530
 8001640:	20004a10 	.word	0x20004a10
 8001644:	20004a20 	.word	0x20004a20
 8001648:	200025a0 	.word	0x200025a0
 800164c:	20004a18 	.word	0x20004a18
 8001650:	20004a28 	.word	0x20004a28
 8001654:	20004a30 	.word	0x20004a30
 8001658:	20004a38 	.word	0x20004a38
 800165c:	20004a40 	.word	0x20004a40
 8001660:	200049e8 	.word	0x200049e8
 8001664:	20004a48 	.word	0x20004a48
 8001668:	20004a50 	.word	0x20004a50
 800166c:	f37bebd5 	.word	0xf37bebd5
 8001670:	3fbacee9 	.word	0x3fbacee9
		  }
		  else if (((ThetaDes_N-Theta_N) > M_PI ) && (ThetaDes_N > (5*M_PI/3)) && (Theta_N < (M_PI/3))){
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <main+0x720>)
 8001676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <main+0x724>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe fe02 	bl	8000288 <__aeabi_dsub>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	a31a      	add	r3, pc, #104	; (adr r3, 80016f8 <main+0x700>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7ff fa41 	bl	8000b18 <__aeabi_dcmpgt>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d043      	beq.n	8001724 <main+0x72c>
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <main+0x720>)
 800169e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a2:	a317      	add	r3, pc, #92	; (adr r3, 8001700 <main+0x708>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7ff fa36 	bl	8000b18 <__aeabi_dcmpgt>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d038      	beq.n	8001724 <main+0x72c>
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <main+0x724>)
 80016b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b8:	a313      	add	r3, pc, #76	; (adr r3, 8001708 <main+0x710>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7ff fa0d 	bl	8000adc <__aeabi_dcmplt>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d02d      	beq.n	8001724 <main+0x72c>
			  Theta_Err = ThetaDes_N - Theta_N - (2*M_PI);
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <main+0x720>)
 80016ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <main+0x724>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe fdd8 	bl	8000288 <__aeabi_dsub>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	a30b      	add	r3, pc, #44	; (adr r3, 8001710 <main+0x718>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe fdcf 	bl	8000288 <__aeabi_dsub>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	490c      	ldr	r1, [pc, #48]	; (8001720 <main+0x728>)
 80016f0:	e9c1 2300 	strd	r2, r3, [r1]
 80016f4:	e023      	b.n	800173e <main+0x746>
 80016f6:	bf00      	nop
 80016f8:	54442d18 	.word	0x54442d18
 80016fc:	400921fb 	.word	0x400921fb
 8001700:	c638d03f 	.word	0xc638d03f
 8001704:	4014f1a6 	.word	0x4014f1a6
 8001708:	382d7365 	.word	0x382d7365
 800170c:	3ff0c152 	.word	0x3ff0c152
 8001710:	54442d18 	.word	0x54442d18
 8001714:	401921fb 	.word	0x401921fb
 8001718:	20004a40 	.word	0x20004a40
 800171c:	20004a48 	.word	0x20004a48
 8001720:	20004a50 	.word	0x20004a50
		  }
		  else{
			  Theta_Err = ThetaDes_N - Theta_N;
 8001724:	4ba8      	ldr	r3, [pc, #672]	; (80019c8 <main+0x9d0>)
 8001726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172a:	4ba8      	ldr	r3, [pc, #672]	; (80019cc <main+0x9d4>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe fdaa 	bl	8000288 <__aeabi_dsub>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	49a5      	ldr	r1, [pc, #660]	; (80019d0 <main+0x9d8>)
 800173a:	e9c1 2300 	strd	r2, r3, [r1]
		  } // Z axis angle error (rad)
		  W_des = KPw*Theta_Err; // Z axis desired angular speed (rad/s)
 800173e:	4ba4      	ldr	r3, [pc, #656]	; (80019d0 <main+0x9d8>)
 8001740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001744:	a394      	add	r3, pc, #592	; (adr r3, 8001998 <main+0x9a0>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe ff55 	bl	80005f8 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	49a0      	ldr	r1, [pc, #640]	; (80019d4 <main+0x9dc>)
 8001754:	e9c1 2300 	strd	r2, r3, [r1]
		  V_des = KPd*distance*cos(Theta_Err); // Desired linear speed (m/s)
 8001758:	4b9f      	ldr	r3, [pc, #636]	; (80019d8 <main+0x9e0>)
 800175a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b9e      	ldr	r3, [pc, #632]	; (80019dc <main+0x9e4>)
 8001764:	f7fe ff48 	bl	80005f8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4614      	mov	r4, r2
 800176e:	461d      	mov	r5, r3
 8001770:	4b97      	ldr	r3, [pc, #604]	; (80019d0 <main+0x9d8>)
 8001772:	ed93 7b00 	vldr	d7, [r3]
 8001776:	eeb0 0a47 	vmov.f32	s0, s14
 800177a:	eef0 0a67 	vmov.f32	s1, s15
 800177e:	f00c fb53 	bl	800de28 <cos>
 8001782:	ec53 2b10 	vmov	r2, r3, d0
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe ff35 	bl	80005f8 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4993      	ldr	r1, [pc, #588]	; (80019e0 <main+0x9e8>)
 8001794:	e9c1 2300 	strd	r2, r3, [r1]
		  speed_refL = (V_des-W_des*WHEELS_DISTANCE)*(GEAR_RATIO/WHEEL_RADIUS)*(60/(2*M_PI)); // Left wheel desired speed (RPM)
 8001798:	4b91      	ldr	r3, [pc, #580]	; (80019e0 <main+0x9e8>)
 800179a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800179e:	4b8d      	ldr	r3, [pc, #564]	; (80019d4 <main+0x9dc>)
 80017a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a4:	a37e      	add	r3, pc, #504	; (adr r3, 80019a0 <main+0x9a8>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	f7fe ff25 	bl	80005f8 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4620      	mov	r0, r4
 80017b4:	4629      	mov	r1, r5
 80017b6:	f7fe fd67 	bl	8000288 <__aeabi_dsub>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	a379      	add	r3, pc, #484	; (adr r3, 80019a8 <main+0x9b0>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ff16 	bl	80005f8 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	a376      	add	r3, pc, #472	; (adr r3, 80019b0 <main+0x9b8>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff0d 	bl	80005f8 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4980      	ldr	r1, [pc, #512]	; (80019e4 <main+0x9ec>)
 80017e4:	e9c1 2300 	strd	r2, r3, [r1]
		  speed_refR = (V_des+W_des*WHEELS_DISTANCE)*(GEAR_RATIO/WHEEL_RADIUS)*(60/(2*M_PI)); // Right wheel desired speed (RPM)
 80017e8:	4b7a      	ldr	r3, [pc, #488]	; (80019d4 <main+0x9dc>)
 80017ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ee:	a36c      	add	r3, pc, #432	; (adr r3, 80019a0 <main+0x9a8>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe ff00 	bl	80005f8 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	4b77      	ldr	r3, [pc, #476]	; (80019e0 <main+0x9e8>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fd41 	bl	800028c <__adddf3>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	a365      	add	r3, pc, #404	; (adr r3, 80019a8 <main+0x9b0>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe feee 	bl	80005f8 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	a362      	add	r3, pc, #392	; (adr r3, 80019b0 <main+0x9b8>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe fee5 	bl	80005f8 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	496d      	ldr	r1, [pc, #436]	; (80019e8 <main+0x9f0>)
 8001834:	e9c1 2300 	strd	r2, r3, [r1]

		  PIController_Update(&LeftController, speed_refL, speedL); // Updating left PI
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <main+0x9ec>)
 800183a:	ed93 7b00 	vldr	d7, [r3]
 800183e:	4b6b      	ldr	r3, [pc, #428]	; (80019ec <main+0x9f4>)
 8001840:	ed93 6b00 	vldr	d6, [r3]
 8001844:	eeb0 1a46 	vmov.f32	s2, s12
 8001848:	eef0 1a66 	vmov.f32	s3, s13
 800184c:	eeb0 0a47 	vmov.f32	s0, s14
 8001850:	eef0 0a67 	vmov.f32	s1, s15
 8001854:	4866      	ldr	r0, [pc, #408]	; (80019f0 <main+0x9f8>)
 8001856:	f001 fb03 	bl	8002e60 <PIController_Update>
		  PIController_Update(&RightController, speed_refR, speedR); // Updating right PI
 800185a:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <main+0x9f0>)
 800185c:	ed93 7b00 	vldr	d7, [r3]
 8001860:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <main+0x9fc>)
 8001862:	ed93 6b00 	vldr	d6, [r3]
 8001866:	eeb0 1a46 	vmov.f32	s2, s12
 800186a:	eef0 1a66 	vmov.f32	s3, s13
 800186e:	eeb0 0a47 	vmov.f32	s0, s14
 8001872:	eef0 0a67 	vmov.f32	s1, s15
 8001876:	4860      	ldr	r0, [pc, #384]	; (80019f8 <main+0xa00>)
 8001878:	f001 faf2 	bl	8002e60 <PIController_Update>

		  LeftPWM = 1500 + LeftController.out; // Updating left PWM
 800187c:	4b5c      	ldr	r3, [pc, #368]	; (80019f0 <main+0x9f8>)
 800187e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001882:	a34d      	add	r3, pc, #308	; (adr r3, 80019b8 <main+0x9c0>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fd00 	bl	800028c <__adddf3>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	495a      	ldr	r1, [pc, #360]	; (80019fc <main+0xa04>)
 8001892:	e9c1 2300 	strd	r2, r3, [r1]
		  RightPWM = 1500 + RightController.out; // Updating right PWM
 8001896:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <main+0xa00>)
 8001898:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800189c:	a346      	add	r3, pc, #280	; (adr r3, 80019b8 <main+0x9c0>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fcf3 	bl	800028c <__adddf3>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4955      	ldr	r1, [pc, #340]	; (8001a00 <main+0xa08>)
 80018ac:	e9c1 2300 	strd	r2, r3, [r1]

		  TIM1->CCR1 = LeftPWM*FREQ_PSCCLOCK; // Generating Left PWM signal
 80018b0:	4b52      	ldr	r3, [pc, #328]	; (80019fc <main+0xa04>)
 80018b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b6:	a342      	add	r3, pc, #264	; (adr r3, 80019c0 <main+0x9c8>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fe9c 	bl	80005f8 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4c4f      	ldr	r4, [pc, #316]	; (8001a04 <main+0xa0c>)
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f96d 	bl	8000ba8 <__aeabi_d2uiz>
 80018ce:	4603      	mov	r3, r0
 80018d0:	6363      	str	r3, [r4, #52]	; 0x34
		  TIM1->CCR4 = RightPWM*FREQ_PSCCLOCK; // Generating Right PWM signal
 80018d2:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <main+0xa08>)
 80018d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d8:	a339      	add	r3, pc, #228	; (adr r3, 80019c0 <main+0x9c8>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fe8b 	bl	80005f8 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4c47      	ldr	r4, [pc, #284]	; (8001a04 <main+0xa0c>)
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f95c 	bl	8000ba8 <__aeabi_d2uiz>
 80018f0:	4603      	mov	r3, r0
 80018f2:	6423      	str	r3, [r4, #64]	; 0x40

		  error_L = LeftController.proportional + LeftController.integral; // Left wheel speed error (RPM)
 80018f4:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <main+0x9f8>)
 80018f6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <main+0x9f8>)
 80018fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001900:	f7fe fcc4 	bl	800028c <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	493f      	ldr	r1, [pc, #252]	; (8001a08 <main+0xa10>)
 800190a:	e9c1 2300 	strd	r2, r3, [r1]
		  error_R = RightController.proportional + RightController.integral; // Right wheel speed error (RPM)
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <main+0xa00>)
 8001910:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001914:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <main+0xa00>)
 8001916:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800191a:	f7fe fcb7 	bl	800028c <__adddf3>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	493a      	ldr	r1, [pc, #232]	; (8001a0c <main+0xa14>)
 8001924:	e9c1 2300 	strd	r2, r3, [r1]

		  LeftController.T = ControlTime; // Updating left PI sample time
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <main+0xa18>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	4930      	ldr	r1, [pc, #192]	; (80019f0 <main+0x9f8>)
 8001930:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  RightController.T = ControlTime; // Updating right PI sample time
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <main+0xa18>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	492f      	ldr	r1, [pc, #188]	; (80019f8 <main+0xa00>)
 800193c:	e9c1 2304 	strd	r2, r3, [r1, #16]

		  if ((distance < TRAJECTORY_RESOLUTION)){
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <main+0x9e0>)
 8001942:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <main+0x9e4>)
 800194c:	f7ff f8c6 	bl	8000adc <__aeabi_dcmplt>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06d      	beq.n	8001a32 <main+0xa3a>
			  Xrefd = Xref[k]; // Updating X axis trajectory point
 8001956:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <main+0xa1c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a2f      	ldr	r2, [pc, #188]	; (8001a18 <main+0xa20>)
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	492d      	ldr	r1, [pc, #180]	; (8001a1c <main+0xa24>)
 8001966:	e9c1 2300 	strd	r2, r3, [r1]
			  Yrefd = Yref[k]; // Updating Y axis trajectory point
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <main+0xa1c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2c      	ldr	r2, [pc, #176]	; (8001a20 <main+0xa28>)
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	492a      	ldr	r1, [pc, #168]	; (8001a24 <main+0xa2c>)
 800197a:	e9c1 2300 	strd	r2, r3, [r1]
			  if (k >= 1037){
 800197e:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <main+0xa1c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f240 420c 	movw	r2, #1036	; 0x40c
 8001986:	4293      	cmp	r3, r2
 8001988:	dd4e      	ble.n	8001a28 <main+0xa30>
				  k = 0;
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <main+0xa1c>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e04f      	b.n	8001a32 <main+0xa3a>
 8001992:	bf00      	nop
 8001994:	f3af 8000 	nop.w
 8001998:	9999999a 	.word	0x9999999a
 800199c:	3fb99999 	.word	0x3fb99999
 80019a0:	7ae147ae 	.word	0x7ae147ae
 80019a4:	3fe7ae14 	.word	0x3fe7ae14
 80019a8:	4ec4ec4e 	.word	0x4ec4ec4e
 80019ac:	405ec4ec 	.word	0x405ec4ec
 80019b0:	66ed2bfb 	.word	0x66ed2bfb
 80019b4:	4023193d 	.word	0x4023193d
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40977000 	.word	0x40977000
 80019c0:	9999999a 	.word	0x9999999a
 80019c4:	40099999 	.word	0x40099999
 80019c8:	20004a40 	.word	0x20004a40
 80019cc:	20004a48 	.word	0x20004a48
 80019d0:	20004a50 	.word	0x20004a50
 80019d4:	20004a58 	.word	0x20004a58
 80019d8:	20004a30 	.word	0x20004a30
 80019dc:	3fe00000 	.word	0x3fe00000
 80019e0:	20004a60 	.word	0x20004a60
 80019e4:	20004a68 	.word	0x20004a68
 80019e8:	20004a70 	.word	0x20004a70
 80019ec:	200049d8 	.word	0x200049d8
 80019f0:	20000070 	.word	0x20000070
 80019f4:	200049e0 	.word	0x200049e0
 80019f8:	200000a8 	.word	0x200000a8
 80019fc:	20000058 	.word	0x20000058
 8001a00:	20000060 	.word	0x20000060
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	20004a88 	.word	0x20004a88
 8001a0c:	20004a90 	.word	0x20004a90
 8001a10:	200049a8 	.word	0x200049a8
 8001a14:	200046e4 	.word	0x200046e4
 8001a18:	20000530 	.word	0x20000530
 8001a1c:	20004a78 	.word	0x20004a78
 8001a20:	200025a0 	.word	0x200025a0
 8001a24:	20004a80 	.word	0x20004a80
			  } // Defined trajectory ended -> Starting a new one
			  else{
				  k++; // Aiming for the next point
 8001a28:	4b7e      	ldr	r3, [pc, #504]	; (8001c24 <main+0xc2c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	4a7d      	ldr	r2, [pc, #500]	; (8001c24 <main+0xc2c>)
 8001a30:	6013      	str	r3, [r2, #0]
				  }
		  } // Updating trajectory points each
		  Ctimer = __HAL_TIM_GET_COUNTER(&htim6);
 8001a32:	4b7d      	ldr	r3, [pc, #500]	; (8001c28 <main+0xc30>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b7c      	ldr	r3, [pc, #496]	; (8001c2c <main+0xc34>)
 8001a3c:	801a      	strh	r2, [r3, #0]
	  }

	  timer2 = timer1;
 8001a3e:	4b7c      	ldr	r3, [pc, #496]	; (8001c30 <main+0xc38>)
 8001a40:	881a      	ldrh	r2, [r3, #0]
 8001a42:	4b7c      	ldr	r3, [pc, #496]	; (8001c34 <main+0xc3c>)
 8001a44:	801a      	strh	r2, [r3, #0]
	  timer1 = __HAL_TIM_GET_COUNTER(&htim6); // Updating while loop timers
 8001a46:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <main+0xc30>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b78      	ldr	r3, [pc, #480]	; (8001c30 <main+0xc38>)
 8001a50:	801a      	strh	r2, [r3, #0]
	  ExeTime = ((uint16_t)((timer1 - timer2)))*100.0; // Execution time (µs)
 8001a52:	4b77      	ldr	r3, [pc, #476]	; (8001c30 <main+0xc38>)
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	4b77      	ldr	r3, [pc, #476]	; (8001c34 <main+0xc3c>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd60 	bl	8000524 <__aeabi_i2d>
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <main+0xc40>)
 8001a6a:	f7fe fdc5 	bl	80005f8 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4972      	ldr	r1, [pc, #456]	; (8001c3c <main+0xc44>)
 8001a74:	e9c1 2300 	strd	r2, r3, [r1]

	  Dtimer2 = __HAL_TIM_GET_COUNTER(&htim6); // Updating database Tx timer
 8001a78:	4b6b      	ldr	r3, [pc, #428]	; (8001c28 <main+0xc30>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <main+0xc48>)
 8001a82:	801a      	strh	r2, [r3, #0]
	  if (Dtimer2<Dtimer1){
 8001a84:	4b6e      	ldr	r3, [pc, #440]	; (8001c40 <main+0xc48>)
 8001a86:	881a      	ldrh	r2, [r3, #0]
 8001a88:	4b6e      	ldr	r3, [pc, #440]	; (8001c44 <main+0xc4c>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d20b      	bcs.n	8001aa8 <main+0xab0>
		  Dtimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 8001a90:	4b65      	ldr	r3, [pc, #404]	; (8001c28 <main+0xc30>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <main+0xc4c>)
 8001a9a:	801a      	strh	r2, [r3, #0]
		  Dtimer2 = __HAL_TIM_GET_COUNTER(&htim6);
 8001a9c:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <main+0xc30>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <main+0xc48>)
 8001aa6:	801a      	strh	r2, [r3, #0]
	  } // Overflow -> Resetting database Tx timer
	  if (Dtimer2 - Dtimer1 > TIM6_TO_MILLIS*FREQ_DATABASE){
 8001aa8:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <main+0xc48>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <main+0xc4c>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001ab8:	f77f ab2b 	ble.w	8001112 <main+0x11a>
		  database[0] = Wcc_z;
 8001abc:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <main+0xc50>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	4962      	ldr	r1, [pc, #392]	; (8001c4c <main+0xc54>)
 8001ac4:	e9c1 2300 	strd	r2, r3, [r1]
	  	  database[1] = Theta_N;
 8001ac8:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <main+0xc58>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	495f      	ldr	r1, [pc, #380]	; (8001c4c <main+0xc54>)
 8001ad0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  	  database[2] = X;
 8001ad4:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <main+0xc5c>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	495c      	ldr	r1, [pc, #368]	; (8001c4c <main+0xc54>)
 8001adc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  	  database[3] = Y;
 8001ae0:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <main+0xc60>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	4959      	ldr	r1, [pc, #356]	; (8001c4c <main+0xc54>)
 8001ae8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  	  database[4] = Xrefd;
 8001aec:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <main+0xc64>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	4956      	ldr	r1, [pc, #344]	; (8001c4c <main+0xc54>)
 8001af4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 	  database[5] = Yrefd;
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <main+0xc68>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	4953      	ldr	r1, [pc, #332]	; (8001c4c <main+0xc54>)
 8001b00:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 	  database[6] = speedR;
 8001b04:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <main+0xc6c>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	4950      	ldr	r1, [pc, #320]	; (8001c4c <main+0xc54>)
 8001b0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 	  database[7] = speedL;
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <main+0xc70>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	494d      	ldr	r1, [pc, #308]	; (8001c4c <main+0xc54>)
 8001b18:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 	  database[8] = speed_refL;
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <main+0xc74>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	494a      	ldr	r1, [pc, #296]	; (8001c4c <main+0xc54>)
 8001b24:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  	  database[9] = speed_refR;
 8001b28:	4b51      	ldr	r3, [pc, #324]	; (8001c70 <main+0xc78>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	4947      	ldr	r1, [pc, #284]	; (8001c4c <main+0xc54>)
 8001b30:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	  	  database[10] = error_R;
 8001b34:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <main+0xc7c>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	4944      	ldr	r1, [pc, #272]	; (8001c4c <main+0xc54>)
 8001b3c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	  	  database[11] = error_L;
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <main+0xc80>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	4941      	ldr	r1, [pc, #260]	; (8001c4c <main+0xc54>)
 8001b48:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	  	  database[12] = W_des;
 8001b4c:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <main+0xc84>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	493e      	ldr	r1, [pc, #248]	; (8001c4c <main+0xc54>)
 8001b54:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	 	  database[13] = V_des;
 8001b58:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <main+0xc88>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	493b      	ldr	r1, [pc, #236]	; (8001c4c <main+0xc54>)
 8001b60:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	 	  database[14] = k;
 8001b64:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <main+0xc2c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fcdb 	bl	8000524 <__aeabi_i2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4936      	ldr	r1, [pc, #216]	; (8001c4c <main+0xc54>)
 8001b74:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	 	  database[15] = Theta_Err;
 8001b78:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <main+0xc8c>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	4933      	ldr	r1, [pc, #204]	; (8001c4c <main+0xc54>)
 8001b80:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	 	  database[16] = ExeTime;
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <main+0xc44>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	4930      	ldr	r1, [pc, #192]	; (8001c4c <main+0xc54>)
 8001b8c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	  	  database[17] = Voltage;
 8001b90:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <main+0xc90>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	492d      	ldr	r1, [pc, #180]	; (8001c4c <main+0xc54>)
 8001b98:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	  	  database[18] = Current;
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <main+0xc94>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	492a      	ldr	r1, [pc, #168]	; (8001c4c <main+0xc54>)
 8001ba4:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	  	  database[19] = Temperature;
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <main+0xc98>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	4927      	ldr	r1, [pc, #156]	; (8001c4c <main+0xc54>)
 8001bb0:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	  	  database[20] = EstCharge;
 8001bb4:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <main+0xc9c>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	4924      	ldr	r1, [pc, #144]	; (8001c4c <main+0xc54>)
 8001bbc:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	 	  database[21] = RealCharge;
 8001bc0:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <main+0xca0>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	4921      	ldr	r1, [pc, #132]	; (8001c4c <main+0xc54>)
 8001bc8:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	 	  database[22] = BMSTime;
 8001bcc:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <main+0xca4>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc97 	bl	8000504 <__aeabi_ui2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	491c      	ldr	r1, [pc, #112]	; (8001c4c <main+0xc54>)
 8001bdc:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	 	  database[23] = ThetaDes_N;
 8001be0:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <main+0xca8>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	4919      	ldr	r1, [pc, #100]	; (8001c4c <main+0xc54>)
 8001be8:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	 	  database[24] =  Xlidar;
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <main+0xcac>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	4916      	ldr	r1, [pc, #88]	; (8001c4c <main+0xc54>)
 8001bf4:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	 	  database[25] =  Ylidar;
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <main+0xcb0>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	4913      	ldr	r1, [pc, #76]	; (8001c4c <main+0xc54>)
 8001c00:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
		  ClearBuffer(data_buf, 500);
 8001c04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c08:	4828      	ldr	r0, [pc, #160]	; (8001cac <main+0xcb4>)
 8001c0a:	f001 f80b 	bl	8002c24 <ClearBuffer>
		  strcpy((char*)data_buf, "D:");
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <main+0xcb4>)
 8001c10:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <main+0xcb8>)
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	4611      	mov	r1, r2
 8001c16:	8019      	strh	r1, [r3, #0]
 8001c18:	3302      	adds	r3, #2
 8001c1a:	0c12      	lsrs	r2, r2, #16
 8001c1c:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<DATABASE_SIZE; i++){
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	e05c      	b.n	8001cde <main+0xce6>
 8001c24:	200046e4 	.word	0x200046e4
 8001c28:	2000037c 	.word	0x2000037c
 8001c2c:	20004988 	.word	0x20004988
 8001c30:	2000497c 	.word	0x2000497c
 8001c34:	2000497e 	.word	0x2000497e
 8001c38:	40590000 	.word	0x40590000
 8001c3c:	200049c8 	.word	0x200049c8
 8001c40:	20004982 	.word	0x20004982
 8001c44:	20004980 	.word	0x20004980
 8001c48:	200049d0 	.word	0x200049d0
 8001c4c:	20004610 	.word	0x20004610
 8001c50:	20004a48 	.word	0x20004a48
 8001c54:	20004a00 	.word	0x20004a00
 8001c58:	20004a08 	.word	0x20004a08
 8001c5c:	20004a78 	.word	0x20004a78
 8001c60:	20004a80 	.word	0x20004a80
 8001c64:	200049e0 	.word	0x200049e0
 8001c68:	200049d8 	.word	0x200049d8
 8001c6c:	20004a68 	.word	0x20004a68
 8001c70:	20004a70 	.word	0x20004a70
 8001c74:	20004a90 	.word	0x20004a90
 8001c78:	20004a88 	.word	0x20004a88
 8001c7c:	20004a58 	.word	0x20004a58
 8001c80:	20004a60 	.word	0x20004a60
 8001c84:	20004a50 	.word	0x20004a50
 8001c88:	20004998 	.word	0x20004998
 8001c8c:	200049a0 	.word	0x200049a0
 8001c90:	200049b0 	.word	0x200049b0
 8001c94:	200049b8 	.word	0x200049b8
 8001c98:	200049c0 	.word	0x200049c0
 8001c9c:	2000498a 	.word	0x2000498a
 8001ca0:	20004a40 	.word	0x20004a40
 8001ca4:	20004a10 	.word	0x20004a10
 8001ca8:	20004a18 	.word	0x20004a18
 8001cac:	20004784 	.word	0x20004784
 8001cb0:	08010450 	.word	0x08010450
			  sprintf((char*)uart2_Tx, "%f|", database[i]);
 8001cb4:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <main+0xd30>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	491a      	ldr	r1, [pc, #104]	; (8001d2c <main+0xd34>)
 8001cc2:	481b      	ldr	r0, [pc, #108]	; (8001d30 <main+0xd38>)
 8001cc4:	f008 fa30 	bl	800a128 <siprintf>
			  strcat((char*)data_buf, (char*)uart2_Tx);
 8001cc8:	4919      	ldr	r1, [pc, #100]	; (8001d30 <main+0xd38>)
 8001cca:	481a      	ldr	r0, [pc, #104]	; (8001d34 <main+0xd3c>)
 8001ccc:	f008 fa4c 	bl	800a168 <strcat>
			  ClearBuffer(uart2_Tx, 50);
 8001cd0:	2132      	movs	r1, #50	; 0x32
 8001cd2:	4817      	ldr	r0, [pc, #92]	; (8001d30 <main+0xd38>)
 8001cd4:	f000 ffa6 	bl	8002c24 <ClearBuffer>
		  for(int i=0; i<DATABASE_SIZE; i++){
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b19      	cmp	r3, #25
 8001ce2:	dde7      	ble.n	8001cb4 <main+0xcbc>
		  }
		  strcat((char*)data_buf, "\n"); // Building database Tx buffer
 8001ce4:	4813      	ldr	r0, [pc, #76]	; (8001d34 <main+0xd3c>)
 8001ce6:	f7fe fa73 	bl	80001d0 <strlen>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <main+0xd3c>)
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4911      	ldr	r1, [pc, #68]	; (8001d38 <main+0xd40>)
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	8013      	strh	r3, [r2, #0]
		  if (huart2.gState == HAL_UART_STATE_READY){
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <main+0xd44>)
 8001cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	f47f aa06 	bne.w	8001112 <main+0x11a>
			  SendDatabase();
 8001d06:	f000 ff79 	bl	8002bfc <SendDatabase>
			  Dtimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <main+0xd48>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <main+0xd4c>)
 8001d14:	801a      	strh	r2, [r3, #0]
			  Dtimer2 = __HAL_TIM_GET_COUNTER(&htim6);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <main+0xd48>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <main+0xd50>)
 8001d20:	801a      	strh	r2, [r3, #0]
	  Heartbeat();
 8001d22:	f7ff b9f6 	b.w	8001112 <main+0x11a>
 8001d26:	bf00      	nop
 8001d28:	20004610 	.word	0x20004610
 8001d2c:	08010454 	.word	0x08010454
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	20004784 	.word	0x20004784
 8001d38:	08010458 	.word	0x08010458
 8001d3c:	20000498 	.word	0x20000498
 8001d40:	2000037c 	.word	0x2000037c
 8001d44:	20004980 	.word	0x20004980
 8001d48:	20004982 	.word	0x20004982

08001d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b096      	sub	sp, #88	; 0x58
 8001d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2244      	movs	r2, #68	; 0x44
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f007 fb5c 	bl	8009418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d72:	f003 fc5f 	bl	8005634 <HAL_PWREx_ControlVoltageScaling>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d7c:	f001 f900 	bl	8002f80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d80:	2310      	movs	r3, #16
 8001d82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d84:	2301      	movs	r3, #1
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d8c:	2360      	movs	r3, #96	; 0x60
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d90:	2302      	movs	r3, #2
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d94:	2301      	movs	r3, #1
 8001d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d9c:	2328      	movs	r3, #40	; 0x28
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001da0:	2307      	movs	r3, #7
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001da4:	2302      	movs	r3, #2
 8001da6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fc95 	bl	80056e0 <HAL_RCC_OscConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001dbc:	f001 f8e0 	bl	8002f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 f895 	bl	8005f08 <HAL_RCC_ClockConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001de4:	f001 f8cc 	bl	8002f80 <Error_Handler>
  }
}
 8001de8:	bf00      	nop
 8001dea:	3758      	adds	r7, #88	; 0x58
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001df6:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <MX_I2C1_Init+0x78>)
 8001df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <MX_I2C1_Init+0x7c>)
 8001dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e2a:	480e      	ldr	r0, [pc, #56]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001e2c:	f001 ffc0 	bl	8003db0 <HAL_I2C_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e36:	f001 f8a3 	bl	8002f80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4809      	ldr	r0, [pc, #36]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001e3e:	f003 fb54 	bl	80054ea <HAL_I2CEx_ConfigAnalogFilter>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e48:	f001 f89a 	bl	8002f80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <MX_I2C1_Init+0x74>)
 8001e50:	f003 fb96 	bl	8005580 <HAL_I2CEx_ConfigDigitalFilter>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e5a:	f001 f891 	bl	8002f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200002dc 	.word	0x200002dc
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	10909cec 	.word	0x10909cec

08001e70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b096      	sub	sp, #88	; 0x58
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	615a      	str	r2, [r3, #20]
 8001e94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	222c      	movs	r2, #44	; 0x2c
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f007 fabb 	bl	8009418 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ea2:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001ea4:	4a3f      	ldr	r2, [pc, #252]	; (8001fa4 <MX_TIM1_Init+0x134>)
 8001ea6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25 - 1;
 8001ea8:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001eaa:	2218      	movs	r2, #24
 8001eac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eae:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000 - 1;
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001eb6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001eba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ebc:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ec2:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec8:	4b35      	ldr	r3, [pc, #212]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ece:	4834      	ldr	r0, [pc, #208]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001ed0:	f004 fdca 	bl	8006a68 <HAL_TIM_PWM_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001eda:	f001 f851 	bl	8002f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	482b      	ldr	r0, [pc, #172]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001ef2:	f005 fcfb 	bl	80078ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001efc:	f001 f840 	bl	8002f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f00:	2360      	movs	r3, #96	; 0x60
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f20:	2200      	movs	r2, #0
 8001f22:	4619      	mov	r1, r3
 8001f24:	481e      	ldr	r0, [pc, #120]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001f26:	f004 fff5 	bl	8006f14 <HAL_TIM_PWM_ConfigChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f30:	f001 f826 	bl	8002f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f38:	220c      	movs	r2, #12
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4818      	ldr	r0, [pc, #96]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001f3e:	f004 ffe9 	bl	8006f14 <HAL_TIM_PWM_ConfigChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001f48:	f001 f81a 	bl	8002f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001f82:	f005 fd19 	bl	80079b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001f8c:	f000 fff8 	bl	8002f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <MX_TIM1_Init+0x130>)
 8001f92:	f001 f8df 	bl	8003154 <HAL_TIM_MspPostInit>

}
 8001f96:	bf00      	nop
 8001f98:	3758      	adds	r7, #88	; 0x58
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000330 	.word	0x20000330
 8001fa4:	40012c00 	.word	0x40012c00

08001fa8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <MX_TIM6_Init+0x68>)
 8001fba:	4a16      	ldr	r2, [pc, #88]	; (8002014 <MX_TIM6_Init+0x6c>)
 8001fbc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 8001fbe:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_TIM6_Init+0x68>)
 8001fc0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001fc4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <MX_TIM6_Init+0x68>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <MX_TIM6_Init+0x68>)
 8001fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_TIM6_Init+0x68>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fda:	480d      	ldr	r0, [pc, #52]	; (8002010 <MX_TIM6_Init+0x68>)
 8001fdc:	f004 fca0 	bl	8006920 <HAL_TIM_Base_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001fe6:	f000 ffcb 	bl	8002f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <MX_TIM6_Init+0x68>)
 8001ff8:	f005 fc78 	bl	80078ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002002:	f000 ffbd 	bl	8002f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000037c 	.word	0x2000037c
 8002014:	40001000 	.word	0x40001000

08002018 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b092      	sub	sp, #72	; 0x48
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800201e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]
 800202e:	615a      	str	r2, [r3, #20]
 8002030:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002032:	463b      	mov	r3, r7
 8002034:	222c      	movs	r2, #44	; 0x2c
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f007 f9ed 	bl	8009418 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800203e:	4b30      	ldr	r3, [pc, #192]	; (8002100 <MX_TIM16_Init+0xe8>)
 8002040:	4a30      	ldr	r2, [pc, #192]	; (8002104 <MX_TIM16_Init+0xec>)
 8002042:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 25 - 1;
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <MX_TIM16_Init+0xe8>)
 8002046:	2218      	movs	r2, #24
 8002048:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <MX_TIM16_Init+0xe8>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000 - 1;
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <MX_TIM16_Init+0xe8>)
 8002052:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002056:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002058:	4b29      	ldr	r3, [pc, #164]	; (8002100 <MX_TIM16_Init+0xe8>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <MX_TIM16_Init+0xe8>)
 8002060:	2200      	movs	r2, #0
 8002062:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002064:	4b26      	ldr	r3, [pc, #152]	; (8002100 <MX_TIM16_Init+0xe8>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800206a:	4825      	ldr	r0, [pc, #148]	; (8002100 <MX_TIM16_Init+0xe8>)
 800206c:	f004 fc58 	bl	8006920 <HAL_TIM_Base_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002076:	f000 ff83 	bl	8002f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800207a:	4821      	ldr	r0, [pc, #132]	; (8002100 <MX_TIM16_Init+0xe8>)
 800207c:	f004 fcf4 	bl	8006a68 <HAL_TIM_PWM_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002086:	f000 ff7b 	bl	8002f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800208a:	2360      	movs	r3, #96	; 0x60
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002092:	2300      	movs	r3, #0
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002096:	2300      	movs	r3, #0
 8002098:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020aa:	2200      	movs	r2, #0
 80020ac:	4619      	mov	r1, r3
 80020ae:	4814      	ldr	r0, [pc, #80]	; (8002100 <MX_TIM16_Init+0xe8>)
 80020b0:	f004 ff30 	bl	8006f14 <HAL_TIM_PWM_ConfigChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80020ba:	f000 ff61 	bl	8002f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80020dc:	463b      	mov	r3, r7
 80020de:	4619      	mov	r1, r3
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <MX_TIM16_Init+0xe8>)
 80020e2:	f005 fc69 	bl	80079b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80020ec:	f000 ff48 	bl	8002f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <MX_TIM16_Init+0xe8>)
 80020f2:	f001 f82f 	bl	8003154 <HAL_TIM_MspPostInit>

}
 80020f6:	bf00      	nop
 80020f8:	3748      	adds	r7, #72	; 0x48
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200003c8 	.word	0x200003c8
 8002104:	40014400 	.word	0x40014400

08002108 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <MX_USART1_UART_Init+0x58>)
 800210e:	4a15      	ldr	r2, [pc, #84]	; (8002164 <MX_USART1_UART_Init+0x5c>)
 8002110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_USART1_UART_Init+0x58>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <MX_USART1_UART_Init+0x58>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <MX_USART1_UART_Init+0x58>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_USART1_UART_Init+0x58>)
 800214c:	f005 fcef 	bl	8007b2e <HAL_UART_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002156:	f000 ff13 	bl	8002f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000414 	.word	0x20000414
 8002164:	40013800 	.word	0x40013800

08002168 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <MX_USART2_UART_Init+0x5c>)
 8002170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 8002174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 800218e:	220c      	movs	r2, #12
 8002190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_USART2_UART_Init+0x58>)
 80021ac:	f005 fcbf 	bl	8007b2e <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021b6:	f000 fee3 	bl	8002f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000498 	.word	0x20000498
 80021c4:	40004400 	.word	0x40004400

080021c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <MX_GPIO_Init+0x90>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <MX_GPIO_Init+0x90>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <MX_GPIO_Init+0x90>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <MX_GPIO_Init+0x90>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4a17      	ldr	r2, [pc, #92]	; (8002258 <MX_GPIO_Init+0x90>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <MX_GPIO_Init+0x90>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	2108      	movs	r1, #8
 8002212:	4812      	ldr	r0, [pc, #72]	; (800225c <MX_GPIO_Init+0x94>)
 8002214:	f001 fd9a 	bl	8003d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 030c 	add.w	r3, r7, #12
 800222a:	4619      	mov	r1, r3
 800222c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002230:	f001 fc22 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002234:	2308      	movs	r3, #8
 8002236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	4619      	mov	r1, r3
 800224a:	4804      	ldr	r0, [pc, #16]	; (800225c <MX_GPIO_Init+0x94>)
 800224c:	f001 fc14 	bl	8003a78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002250:	bf00      	nop
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	48000400 	.word	0x48000400

08002260 <HAL_I2C_MasterRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c){ // I2C Rx callback
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	double Wcc_z_temp;
	double Xtemp;
	double Ytemp;
	if (Mmode == 'T' && i2c1_Rx[0] == 'W'){
 8002268:	4b86      	ldr	r3, [pc, #536]	; (8002484 <HAL_I2C_MasterRxCpltCallback+0x224>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b54      	cmp	r3, #84	; 0x54
 800226e:	d17c      	bne.n	800236a <HAL_I2C_MasterRxCpltCallback+0x10a>
 8002270:	4b85      	ldr	r3, [pc, #532]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b57      	cmp	r3, #87	; 0x57
 8002276:	d178      	bne.n	800236a <HAL_I2C_MasterRxCpltCallback+0x10a>
		Wcc_z_temp = (double)((i2c1_Rx[1] << 8) | (i2c1_Rx[2] & 0x00FF)); // Z axis angular speed (rad/s)
 8002278:	4b83      	ldr	r3, [pc, #524]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	4a82      	ldr	r2, [pc, #520]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 8002280:	7892      	ldrb	r2, [r2, #2]
 8002282:	4313      	orrs	r3, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f94d 	bl	8000524 <__aeabi_i2d>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		Wcc_z_temp /= 32768.0;
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	4b7d      	ldr	r3, [pc, #500]	; (800248c <HAL_I2C_MasterRxCpltCallback+0x22c>)
 8002298:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800229c:	f7fe fad6 	bl	800084c <__aeabi_ddiv>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		Wcc_z_temp *= 2000.0;
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	4b78      	ldr	r3, [pc, #480]	; (8002490 <HAL_I2C_MasterRxCpltCallback+0x230>)
 80022ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022b2:	f7fe f9a1 	bl	80005f8 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
		if (Wcc_z_temp >= 2000){
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	4b73      	ldr	r3, [pc, #460]	; (8002490 <HAL_I2C_MasterRxCpltCallback+0x230>)
 80022c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022c8:	f7fe fc1c 	bl	8000b04 <__aeabi_dcmpge>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <HAL_I2C_MasterRxCpltCallback+0x8c>
			Wcc_z = (double)(Wcc_z_temp) - 2*2000.0;
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_I2C_MasterRxCpltCallback+0x234>)
 80022d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022dc:	f7fd ffd4 	bl	8000288 <__aeabi_dsub>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	496c      	ldr	r1, [pc, #432]	; (8002498 <HAL_I2C_MasterRxCpltCallback+0x238>)
 80022e6:	e9c1 2300 	strd	r2, r3, [r1]
 80022ea:	e004      	b.n	80022f6 <HAL_I2C_MasterRxCpltCallback+0x96>
		} // -2000 < Wz < 2000
		else{
			Wcc_z = Wcc_z_temp;
 80022ec:	496a      	ldr	r1, [pc, #424]	; (8002498 <HAL_I2C_MasterRxCpltCallback+0x238>)
 80022ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022f2:	e9c1 2300 	strd	r2, r3, [r1]
		}
		Xtemp = (double)((i2c1_Rx[4] << 8) | (i2c1_Rx[5] & 0x00FF));
 80022f6:	4b64      	ldr	r3, [pc, #400]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 80022f8:	791b      	ldrb	r3, [r3, #4]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	4a62      	ldr	r2, [pc, #392]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 80022fe:	7952      	ldrb	r2, [r2, #5]
 8002300:	4313      	orrs	r3, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f90e 	bl	8000524 <__aeabi_i2d>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		Xlidar = Xtemp/1000.0;
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b61      	ldr	r3, [pc, #388]	; (800249c <HAL_I2C_MasterRxCpltCallback+0x23c>)
 8002316:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800231a:	f7fe fa97 	bl	800084c <__aeabi_ddiv>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	495f      	ldr	r1, [pc, #380]	; (80024a0 <HAL_I2C_MasterRxCpltCallback+0x240>)
 8002324:	e9c1 2300 	strd	r2, r3, [r1]
		Ytemp = (double)((i2c1_Rx[6] << 8) | (i2c1_Rx[7] & 0x00FF));
 8002328:	4b57      	ldr	r3, [pc, #348]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 800232a:	799b      	ldrb	r3, [r3, #6]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	4a56      	ldr	r2, [pc, #344]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 8002330:	79d2      	ldrb	r2, [r2, #7]
 8002332:	4313      	orrs	r3, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f8f5 	bl	8000524 <__aeabi_i2d>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		Ylidar = Ytemp/1000.0;
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	4b55      	ldr	r3, [pc, #340]	; (800249c <HAL_I2C_MasterRxCpltCallback+0x23c>)
 8002348:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800234c:	f7fe fa7e 	bl	800084c <__aeabi_ddiv>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4953      	ldr	r1, [pc, #332]	; (80024a4 <HAL_I2C_MasterRxCpltCallback+0x244>)
 8002356:	e9c1 2300 	strd	r2, r3, [r1]
		ClearBuffer(i2c1_Rx, 20);
 800235a:	2114      	movs	r1, #20
 800235c:	484a      	ldr	r0, [pc, #296]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 800235e:	f000 fc61 	bl	8002c24 <ClearBuffer>
		Mmode = 'F'; // Measure mode OFF
 8002362:	4b48      	ldr	r3, [pc, #288]	; (8002484 <HAL_I2C_MasterRxCpltCallback+0x224>)
 8002364:	2246      	movs	r2, #70	; 0x46
 8002366:	701a      	strb	r2, [r3, #0]
		BMSTime = (uint16_t)((i2c1_Rx[10] << 8) | i2c1_Rx[11]);
		Btimer1 = __HAL_TIM_GET_COUNTER(&htim6);
		Btimer2 = __HAL_TIM_GET_COUNTER(&htim6);
		Bmode = 'F'; // BMS mode OFF
	}
}
 8002368:	e088      	b.n	800247c <HAL_I2C_MasterRxCpltCallback+0x21c>
	else if (Bmode == 'T'){
 800236a:	4b4f      	ldr	r3, [pc, #316]	; (80024a8 <HAL_I2C_MasterRxCpltCallback+0x248>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b54      	cmp	r3, #84	; 0x54
 8002370:	f040 8084 	bne.w	800247c <HAL_I2C_MasterRxCpltCallback+0x21c>
		Current = ((int16_t)(i2c1_Rx[0] << 8) | i2c1_Rx[1])/1000.0;
 8002374:	4b44      	ldr	r3, [pc, #272]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	b21b      	sxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	4b42      	ldr	r3, [pc, #264]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 8002380:	785b      	ldrb	r3, [r3, #1]
 8002382:	4313      	orrs	r3, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f8cd 	bl	8000524 <__aeabi_i2d>
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	4b43      	ldr	r3, [pc, #268]	; (800249c <HAL_I2C_MasterRxCpltCallback+0x23c>)
 8002390:	f7fe fa5c 	bl	800084c <__aeabi_ddiv>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4944      	ldr	r1, [pc, #272]	; (80024ac <HAL_I2C_MasterRxCpltCallback+0x24c>)
 800239a:	e9c1 2300 	strd	r2, r3, [r1]
		Voltage = ((int16_t)(i2c1_Rx[2] << 8) | i2c1_Rx[3])/1000.0;
 800239e:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 80023a0:	789b      	ldrb	r3, [r3, #2]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	b21b      	sxth	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 80023aa:	78db      	ldrb	r3, [r3, #3]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f8b8 	bl	8000524 <__aeabi_i2d>
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	4b38      	ldr	r3, [pc, #224]	; (800249c <HAL_I2C_MasterRxCpltCallback+0x23c>)
 80023ba:	f7fe fa47 	bl	800084c <__aeabi_ddiv>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	493b      	ldr	r1, [pc, #236]	; (80024b0 <HAL_I2C_MasterRxCpltCallback+0x250>)
 80023c4:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((int16_t)(i2c1_Rx[4] << 8) | i2c1_Rx[5])/100.0;
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 80023ca:	791b      	ldrb	r3, [r3, #4]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 80023d4:	795b      	ldrb	r3, [r3, #5]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f8a3 	bl	8000524 <__aeabi_i2d>
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_I2C_MasterRxCpltCallback+0x254>)
 80023e4:	f7fe fa32 	bl	800084c <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4932      	ldr	r1, [pc, #200]	; (80024b8 <HAL_I2C_MasterRxCpltCallback+0x258>)
 80023ee:	e9c1 2300 	strd	r2, r3, [r1]
		EstCharge = ((int16_t)(i2c1_Rx[6] << 8) | i2c1_Rx[7])/1000.0;
 80023f2:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 80023f4:	799b      	ldrb	r3, [r3, #6]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 80023fe:	79db      	ldrb	r3, [r3, #7]
 8002400:	4313      	orrs	r3, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f88e 	bl	8000524 <__aeabi_i2d>
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	4b23      	ldr	r3, [pc, #140]	; (800249c <HAL_I2C_MasterRxCpltCallback+0x23c>)
 800240e:	f7fe fa1d 	bl	800084c <__aeabi_ddiv>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4929      	ldr	r1, [pc, #164]	; (80024bc <HAL_I2C_MasterRxCpltCallback+0x25c>)
 8002418:	e9c1 2300 	strd	r2, r3, [r1]
		RealCharge = ((int16_t)(i2c1_Rx[8] << 8) | i2c1_Rx[9])/1000.0;
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 800241e:	7a1b      	ldrb	r3, [r3, #8]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	b21b      	sxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 8002428:	7a5b      	ldrb	r3, [r3, #9]
 800242a:	4313      	orrs	r3, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f879 	bl	8000524 <__aeabi_i2d>
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_I2C_MasterRxCpltCallback+0x23c>)
 8002438:	f7fe fa08 	bl	800084c <__aeabi_ddiv>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	491f      	ldr	r1, [pc, #124]	; (80024c0 <HAL_I2C_MasterRxCpltCallback+0x260>)
 8002442:	e9c1 2300 	strd	r2, r3, [r1]
		BMSTime = (uint16_t)((i2c1_Rx[10] << 8) | i2c1_Rx[11]);
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 8002448:	7a9b      	ldrb	r3, [r3, #10]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	b21a      	sxth	r2, r3
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_I2C_MasterRxCpltCallback+0x228>)
 8002450:	7adb      	ldrb	r3, [r3, #11]
 8002452:	b21b      	sxth	r3, r3
 8002454:	4313      	orrs	r3, r2
 8002456:	b21b      	sxth	r3, r3
 8002458:	b29a      	uxth	r2, r3
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_I2C_MasterRxCpltCallback+0x264>)
 800245c:	801a      	strh	r2, [r3, #0]
		Btimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <HAL_I2C_MasterRxCpltCallback+0x268>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	b29a      	uxth	r2, r3
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_I2C_MasterRxCpltCallback+0x26c>)
 8002468:	801a      	strh	r2, [r3, #0]
		Btimer2 = __HAL_TIM_GET_COUNTER(&htim6);
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <HAL_I2C_MasterRxCpltCallback+0x268>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	b29a      	uxth	r2, r3
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_I2C_MasterRxCpltCallback+0x270>)
 8002474:	801a      	strh	r2, [r3, #0]
		Bmode = 'F'; // BMS mode OFF
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_I2C_MasterRxCpltCallback+0x248>)
 8002478:	2246      	movs	r2, #70	; 0x46
 800247a:	701a      	strb	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000008 	.word	0x20000008
 8002488:	20004770 	.word	0x20004770
 800248c:	40e00000 	.word	0x40e00000
 8002490:	409f4000 	.word	0x409f4000
 8002494:	40af4000 	.word	0x40af4000
 8002498:	200049d0 	.word	0x200049d0
 800249c:	408f4000 	.word	0x408f4000
 80024a0:	20004a10 	.word	0x20004a10
 80024a4:	20004a18 	.word	0x20004a18
 80024a8:	20000007 	.word	0x20000007
 80024ac:	200049a0 	.word	0x200049a0
 80024b0:	20004998 	.word	0x20004998
 80024b4:	40590000 	.word	0x40590000
 80024b8:	200049b0 	.word	0x200049b0
 80024bc:	200049b8 	.word	0x200049b8
 80024c0:	200049c0 	.word	0x200049c0
 80024c4:	2000498a 	.word	0x2000498a
 80024c8:	2000037c 	.word	0x2000037c
 80024cc:	20004984 	.word	0x20004984
 80024d0:	20004986 	.word	0x20004986

080024d4 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef * hi2c){ // I2C Tx Callback
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af02      	add	r7, sp, #8
 80024da:	6078      	str	r0, [r7, #4]
	if (Mmode == 'T'){ // I2C Measure MCU mode
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_I2C_MasterTxCpltCallback+0x78>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b54      	cmp	r3, #84	; 0x54
 80024e2:	d115      	bne.n	8002510 <HAL_I2C_MasterTxCpltCallback+0x3c>
		Mtimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_I2C_MasterTxCpltCallback+0x7c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_I2C_MasterTxCpltCallback+0x80>)
 80024ee:	801a      	strh	r2, [r3, #0]
		Mtimer2 = __HAL_TIM_GET_COUNTER(&htim6);
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_I2C_MasterTxCpltCallback+0x7c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_I2C_MasterTxCpltCallback+0x84>)
 80024fa:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Master_Seq_Receive_IT(&hi2c1, I2C_SLAVE_ADDRESS_Measure, i2c1_Rx, sizeof(i2c1_Rx), I2C_FIRST_FRAME); // Transmission OK -> Lancement reception Wz
 80024fc:	2340      	movs	r3, #64	; 0x40
 80024fe:	b299      	uxth	r1, r3
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2314      	movs	r3, #20
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <HAL_I2C_MasterTxCpltCallback+0x88>)
 8002508:	4815      	ldr	r0, [pc, #84]	; (8002560 <HAL_I2C_MasterTxCpltCallback+0x8c>)
 800250a:	f001 fd65 	bl	8003fd8 <HAL_I2C_Master_Seq_Receive_IT>
	else if (Bmode == 'T'){ // I2C BMS MCU mode
		Btimer1 = __HAL_TIM_GET_COUNTER(&htim6);
		Btimer2 = __HAL_TIM_GET_COUNTER(&htim6);
		HAL_I2C_Master_Seq_Receive_IT(&hi2c1, I2C_SLAVE_ADDRESS_BMS, i2c1_Rx, sizeof(i2c1_Rx), I2C_FIRST_FRAME);
	}
}
 800250e:	e018      	b.n	8002542 <HAL_I2C_MasterTxCpltCallback+0x6e>
	else if (Bmode == 'T'){ // I2C BMS MCU mode
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_I2C_MasterTxCpltCallback+0x90>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b54      	cmp	r3, #84	; 0x54
 8002516:	d114      	bne.n	8002542 <HAL_I2C_MasterTxCpltCallback+0x6e>
		Btimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_I2C_MasterTxCpltCallback+0x7c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	b29a      	uxth	r2, r3
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_I2C_MasterTxCpltCallback+0x94>)
 8002522:	801a      	strh	r2, [r3, #0]
		Btimer2 = __HAL_TIM_GET_COUNTER(&htim6);
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_I2C_MasterTxCpltCallback+0x7c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	b29a      	uxth	r2, r3
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_I2C_MasterTxCpltCallback+0x98>)
 800252e:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Master_Seq_Receive_IT(&hi2c1, I2C_SLAVE_ADDRESS_BMS, i2c1_Rx, sizeof(i2c1_Rx), I2C_FIRST_FRAME);
 8002530:	232e      	movs	r3, #46	; 0x2e
 8002532:	b299      	uxth	r1, r3
 8002534:	2300      	movs	r3, #0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2314      	movs	r3, #20
 800253a:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_I2C_MasterTxCpltCallback+0x88>)
 800253c:	4808      	ldr	r0, [pc, #32]	; (8002560 <HAL_I2C_MasterTxCpltCallback+0x8c>)
 800253e:	f001 fd4b 	bl	8003fd8 <HAL_I2C_Master_Seq_Receive_IT>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000008 	.word	0x20000008
 8002550:	2000037c 	.word	0x2000037c
 8002554:	20004978 	.word	0x20004978
 8002558:	2000497a 	.word	0x2000497a
 800255c:	20004770 	.word	0x20004770
 8002560:	200002dc 	.word	0x200002dc
 8002564:	20000007 	.word	0x20000007
 8002568:	20004984 	.word	0x20004984
 800256c:	20004986 	.word	0x20004986

08002570 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){ // UART Rx Callback
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	b0c3      	sub	sp, #268	; 0x10c
 8002574:	af00      	add	r7, sp, #0
 8002576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800257a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800257e:	6018      	str	r0, [r3, #0]
	uint8_t stringR[50];
	double speedLtemp;
	double speedRtemp;
	char *token;
	double position_number;
	int indexenc = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	if ((huart->Instance == USART2) && (Umode == 'X')){
 8002586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800258a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4aa3      	ldr	r2, [pc, #652]	; (8002820 <HAL_UART_RxCpltCallback+0x2b0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d168      	bne.n	800266a <HAL_UART_RxCpltCallback+0xfa>
 8002598:	4ba2      	ldr	r3, [pc, #648]	; (8002824 <HAL_UART_RxCpltCallback+0x2b4>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b58      	cmp	r3, #88	; 0x58
 800259e:	d164      	bne.n	800266a <HAL_UART_RxCpltCallback+0xfa>
		if (uart2_Rx[0] == 'X' || uart2_Rx[0] == ':' || uart2_Rx[0] == 'R'){
 80025a0:	4ba1      	ldr	r3, [pc, #644]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b58      	cmp	r3, #88	; 0x58
 80025a6:	d007      	beq.n	80025b8 <HAL_UART_RxCpltCallback+0x48>
 80025a8:	4b9f      	ldr	r3, [pc, #636]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b3a      	cmp	r3, #58	; 0x3a
 80025ae:	d003      	beq.n	80025b8 <HAL_UART_RxCpltCallback+0x48>
 80025b0:	4b9d      	ldr	r3, [pc, #628]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b52      	cmp	r3, #82	; 0x52
 80025b6:	d109      	bne.n	80025cc <HAL_UART_RxCpltCallback+0x5c>
			ClearBuffer(uart2_Rx, 1);
 80025b8:	2101      	movs	r1, #1
 80025ba:	489b      	ldr	r0, [pc, #620]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 80025bc:	f000 fb32 	bl	8002c24 <ClearBuffer>
			HAL_UART_Receive_IT(&huart2, uart2_Rx, 1);
 80025c0:	2201      	movs	r2, #1
 80025c2:	4999      	ldr	r1, [pc, #612]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 80025c4:	4899      	ldr	r0, [pc, #612]	; (800282c <HAL_UART_RxCpltCallback+0x2bc>)
 80025c6:	f005 fc3f 	bl	8007e48 <HAL_UART_Receive_IT>
		if (uart2_Rx[0] == 'X' || uart2_Rx[0] == ':' || uart2_Rx[0] == 'R'){
 80025ca:	e1f9      	b.n	80029c0 <HAL_UART_RxCpltCallback+0x450>
		}
		else if (uart2_Rx[0] == 'Y'){
 80025cc:	4b96      	ldr	r3, [pc, #600]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b59      	cmp	r3, #89	; 0x59
 80025d2:	d11e      	bne.n	8002612 <HAL_UART_RxCpltCallback+0xa2>
			position_number = strtod((char*) position_string, NULL);
 80025d4:	2100      	movs	r1, #0
 80025d6:	4896      	ldr	r0, [pc, #600]	; (8002830 <HAL_UART_RxCpltCallback+0x2c0>)
 80025d8:	f008 fc12 	bl	800ae00 <strtod>
 80025dc:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
			ClearBuffer((uint8_t*)position_string, 100);
 80025e0:	2164      	movs	r1, #100	; 0x64
 80025e2:	4893      	ldr	r0, [pc, #588]	; (8002830 <HAL_UART_RxCpltCallback+0x2c0>)
 80025e4:	f000 fb1e 	bl	8002c24 <ClearBuffer>
			Xref[XYindex] = position_number;
 80025e8:	4b92      	ldr	r3, [pc, #584]	; (8002834 <HAL_UART_RxCpltCallback+0x2c4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a92      	ldr	r2, [pc, #584]	; (8002838 <HAL_UART_RxCpltCallback+0x2c8>)
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	18d1      	adds	r1, r2, r3
 80025f2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80025f6:	e9c1 2300 	strd	r2, r3, [r1]
			XYindex = 0;
 80025fa:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <HAL_UART_RxCpltCallback+0x2c4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
			Umode = 'Y';
 8002600:	4b88      	ldr	r3, [pc, #544]	; (8002824 <HAL_UART_RxCpltCallback+0x2b4>)
 8002602:	2259      	movs	r2, #89	; 0x59
 8002604:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, uart2_Rx, 1);
 8002606:	2201      	movs	r2, #1
 8002608:	4987      	ldr	r1, [pc, #540]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 800260a:	4888      	ldr	r0, [pc, #544]	; (800282c <HAL_UART_RxCpltCallback+0x2bc>)
 800260c:	f005 fc1c 	bl	8007e48 <HAL_UART_Receive_IT>
		if (uart2_Rx[0] == 'X' || uart2_Rx[0] == ':' || uart2_Rx[0] == 'R'){
 8002610:	e1d6      	b.n	80029c0 <HAL_UART_RxCpltCallback+0x450>
		}
		else if (uart2_Rx[0] == '|'){
 8002612:	4b85      	ldr	r3, [pc, #532]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b7c      	cmp	r3, #124	; 0x7c
 8002618:	d11d      	bne.n	8002656 <HAL_UART_RxCpltCallback+0xe6>
			position_number = strtod((char*)position_string, NULL);
 800261a:	2100      	movs	r1, #0
 800261c:	4884      	ldr	r0, [pc, #528]	; (8002830 <HAL_UART_RxCpltCallback+0x2c0>)
 800261e:	f008 fbef 	bl	800ae00 <strtod>
 8002622:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
			ClearBuffer((uint8_t*)position_string, 100);
 8002626:	2164      	movs	r1, #100	; 0x64
 8002628:	4881      	ldr	r0, [pc, #516]	; (8002830 <HAL_UART_RxCpltCallback+0x2c0>)
 800262a:	f000 fafb 	bl	8002c24 <ClearBuffer>
			Xref[XYindex] = position_number;
 800262e:	4b81      	ldr	r3, [pc, #516]	; (8002834 <HAL_UART_RxCpltCallback+0x2c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a81      	ldr	r2, [pc, #516]	; (8002838 <HAL_UART_RxCpltCallback+0x2c8>)
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	18d1      	adds	r1, r2, r3
 8002638:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800263c:	e9c1 2300 	strd	r2, r3, [r1]
			XYindex++;
 8002640:	4b7c      	ldr	r3, [pc, #496]	; (8002834 <HAL_UART_RxCpltCallback+0x2c4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	4a7b      	ldr	r2, [pc, #492]	; (8002834 <HAL_UART_RxCpltCallback+0x2c4>)
 8002648:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2, uart2_Rx, 1);
 800264a:	2201      	movs	r2, #1
 800264c:	4976      	ldr	r1, [pc, #472]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 800264e:	4877      	ldr	r0, [pc, #476]	; (800282c <HAL_UART_RxCpltCallback+0x2bc>)
 8002650:	f005 fbfa 	bl	8007e48 <HAL_UART_Receive_IT>
		if (uart2_Rx[0] == 'X' || uart2_Rx[0] == ':' || uart2_Rx[0] == 'R'){
 8002654:	e1b4      	b.n	80029c0 <HAL_UART_RxCpltCallback+0x450>
		}
		else{
			strcat(position_string, (char*)uart2_Rx);
 8002656:	4974      	ldr	r1, [pc, #464]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 8002658:	4875      	ldr	r0, [pc, #468]	; (8002830 <HAL_UART_RxCpltCallback+0x2c0>)
 800265a:	f007 fd85 	bl	800a168 <strcat>
			HAL_UART_Receive_IT(&huart2, uart2_Rx, 1); // Receive until end of line
 800265e:	2201      	movs	r2, #1
 8002660:	4971      	ldr	r1, [pc, #452]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 8002662:	4872      	ldr	r0, [pc, #456]	; (800282c <HAL_UART_RxCpltCallback+0x2bc>)
 8002664:	f005 fbf0 	bl	8007e48 <HAL_UART_Receive_IT>
		if (uart2_Rx[0] == 'X' || uart2_Rx[0] == ':' || uart2_Rx[0] == 'R'){
 8002668:	e1aa      	b.n	80029c0 <HAL_UART_RxCpltCallback+0x450>
		}
	}
	else if ((huart->Instance == USART2) && (Umode == 'Y')){
 800266a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800266e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6a      	ldr	r2, [pc, #424]	; (8002820 <HAL_UART_RxCpltCallback+0x2b0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d167      	bne.n	800274c <HAL_UART_RxCpltCallback+0x1dc>
 800267c:	4b69      	ldr	r3, [pc, #420]	; (8002824 <HAL_UART_RxCpltCallback+0x2b4>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b59      	cmp	r3, #89	; 0x59
 8002682:	d163      	bne.n	800274c <HAL_UART_RxCpltCallback+0x1dc>
		if (uart2_Rx[0] == 'Y' || uart2_Rx[0] == ':'){
 8002684:	4b68      	ldr	r3, [pc, #416]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b59      	cmp	r3, #89	; 0x59
 800268a:	d003      	beq.n	8002694 <HAL_UART_RxCpltCallback+0x124>
 800268c:	4b66      	ldr	r3, [pc, #408]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b3a      	cmp	r3, #58	; 0x3a
 8002692:	d105      	bne.n	80026a0 <HAL_UART_RxCpltCallback+0x130>
			HAL_UART_Receive_IT(&huart2, uart2_Rx, 1);
 8002694:	2201      	movs	r2, #1
 8002696:	4964      	ldr	r1, [pc, #400]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 8002698:	4864      	ldr	r0, [pc, #400]	; (800282c <HAL_UART_RxCpltCallback+0x2bc>)
 800269a:	f005 fbd5 	bl	8007e48 <HAL_UART_Receive_IT>
		if (uart2_Rx[0] == 'Y' || uart2_Rx[0] == ':'){
 800269e:	e18f      	b.n	80029c0 <HAL_UART_RxCpltCallback+0x450>
		}
		else if (uart2_Rx[0] == 'F'){
 80026a0:	4b61      	ldr	r3, [pc, #388]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b46      	cmp	r3, #70	; 0x46
 80026a6:	d125      	bne.n	80026f4 <HAL_UART_RxCpltCallback+0x184>
			position_number = strtod((char*) position_string, NULL);
 80026a8:	2100      	movs	r1, #0
 80026aa:	4861      	ldr	r0, [pc, #388]	; (8002830 <HAL_UART_RxCpltCallback+0x2c0>)
 80026ac:	f008 fba8 	bl	800ae00 <strtod>
 80026b0:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
			ClearBuffer((uint8_t*)position_string, 100);
 80026b4:	2164      	movs	r1, #100	; 0x64
 80026b6:	485e      	ldr	r0, [pc, #376]	; (8002830 <HAL_UART_RxCpltCallback+0x2c0>)
 80026b8:	f000 fab4 	bl	8002c24 <ClearBuffer>
			Yref[XYindex] = position_number;
 80026bc:	4b5d      	ldr	r3, [pc, #372]	; (8002834 <HAL_UART_RxCpltCallback+0x2c4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5e      	ldr	r2, [pc, #376]	; (800283c <HAL_UART_RxCpltCallback+0x2cc>)
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	18d1      	adds	r1, r2, r3
 80026c6:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80026ca:	e9c1 2300 	strd	r2, r3, [r1]
			Xref[1] = 0.6016000000000001;
 80026ce:	495a      	ldr	r1, [pc, #360]	; (8002838 <HAL_UART_RxCpltCallback+0x2c8>)
 80026d0:	a351      	add	r3, pc, #324	; (adr r3, 8002818 <HAL_UART_RxCpltCallback+0x2a8>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			strcpy((char*)uart2_Tx, "BXY\n");
 80026da:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_UART_RxCpltCallback+0x2d0>)
 80026dc:	4a59      	ldr	r2, [pc, #356]	; (8002844 <HAL_UART_RxCpltCallback+0x2d4>)
 80026de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026e2:	6018      	str	r0, [r3, #0]
 80026e4:	3304      	adds	r3, #4
 80026e6:	7019      	strb	r1, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, uart2_Tx, sizeof(uart2_Tx)); // Receiving trajectory is done -> Sending BXY
 80026e8:	2232      	movs	r2, #50	; 0x32
 80026ea:	4955      	ldr	r1, [pc, #340]	; (8002840 <HAL_UART_RxCpltCallback+0x2d0>)
 80026ec:	484f      	ldr	r0, [pc, #316]	; (800282c <HAL_UART_RxCpltCallback+0x2bc>)
 80026ee:	f005 fb3d 	bl	8007d6c <HAL_UART_Transmit_IT>
		if (uart2_Rx[0] == 'Y' || uart2_Rx[0] == ':'){
 80026f2:	e165      	b.n	80029c0 <HAL_UART_RxCpltCallback+0x450>
		}
		else if (uart2_Rx[0] == '|'){
 80026f4:	4b4c      	ldr	r3, [pc, #304]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b7c      	cmp	r3, #124	; 0x7c
 80026fa:	d11d      	bne.n	8002738 <HAL_UART_RxCpltCallback+0x1c8>
			position_number = strtod((char*) position_string, NULL);
 80026fc:	2100      	movs	r1, #0
 80026fe:	484c      	ldr	r0, [pc, #304]	; (8002830 <HAL_UART_RxCpltCallback+0x2c0>)
 8002700:	f008 fb7e 	bl	800ae00 <strtod>
 8002704:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
			ClearBuffer((uint8_t*)position_string, 100);
 8002708:	2164      	movs	r1, #100	; 0x64
 800270a:	4849      	ldr	r0, [pc, #292]	; (8002830 <HAL_UART_RxCpltCallback+0x2c0>)
 800270c:	f000 fa8a 	bl	8002c24 <ClearBuffer>
			Yref[XYindex] = position_number;
 8002710:	4b48      	ldr	r3, [pc, #288]	; (8002834 <HAL_UART_RxCpltCallback+0x2c4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a49      	ldr	r2, [pc, #292]	; (800283c <HAL_UART_RxCpltCallback+0x2cc>)
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	18d1      	adds	r1, r2, r3
 800271a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800271e:	e9c1 2300 	strd	r2, r3, [r1]
			XYindex++;
 8002722:	4b44      	ldr	r3, [pc, #272]	; (8002834 <HAL_UART_RxCpltCallback+0x2c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	4a42      	ldr	r2, [pc, #264]	; (8002834 <HAL_UART_RxCpltCallback+0x2c4>)
 800272a:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2, uart2_Rx, 1); // Receive next number
 800272c:	2201      	movs	r2, #1
 800272e:	493e      	ldr	r1, [pc, #248]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 8002730:	483e      	ldr	r0, [pc, #248]	; (800282c <HAL_UART_RxCpltCallback+0x2bc>)
 8002732:	f005 fb89 	bl	8007e48 <HAL_UART_Receive_IT>
		if (uart2_Rx[0] == 'Y' || uart2_Rx[0] == ':'){
 8002736:	e143      	b.n	80029c0 <HAL_UART_RxCpltCallback+0x450>
		}
		else{
			strcat(position_string, (char*) uart2_Rx);
 8002738:	493b      	ldr	r1, [pc, #236]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 800273a:	483d      	ldr	r0, [pc, #244]	; (8002830 <HAL_UART_RxCpltCallback+0x2c0>)
 800273c:	f007 fd14 	bl	800a168 <strcat>
			HAL_UART_Receive_IT(&huart2, uart2_Rx, 1); // Receive until end of number
 8002740:	2201      	movs	r2, #1
 8002742:	4939      	ldr	r1, [pc, #228]	; (8002828 <HAL_UART_RxCpltCallback+0x2b8>)
 8002744:	4839      	ldr	r0, [pc, #228]	; (800282c <HAL_UART_RxCpltCallback+0x2bc>)
 8002746:	f005 fb7f 	bl	8007e48 <HAL_UART_Receive_IT>
		if (uart2_Rx[0] == 'Y' || uart2_Rx[0] == ':'){
 800274a:	e139      	b.n	80029c0 <HAL_UART_RxCpltCallback+0x450>
		}
	}
	else if (huart->Instance == USART1){ // Getting speed
 800274c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <HAL_UART_RxCpltCallback+0x2d8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	f040 8130 	bne.w	80029c0 <HAL_UART_RxCpltCallback+0x450>
		if (uart1_Rx[0] != '\n') {
 8002760:	4b3a      	ldr	r3, [pc, #232]	; (800284c <HAL_UART_RxCpltCallback+0x2dc>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b0a      	cmp	r3, #10
 8002766:	d009      	beq.n	800277c <HAL_UART_RxCpltCallback+0x20c>
			strcat(encoders_string, (char*) uart1_Rx);
 8002768:	4938      	ldr	r1, [pc, #224]	; (800284c <HAL_UART_RxCpltCallback+0x2dc>)
 800276a:	4839      	ldr	r0, [pc, #228]	; (8002850 <HAL_UART_RxCpltCallback+0x2e0>)
 800276c:	f007 fcfc 	bl	800a168 <strcat>
			HAL_UART_Receive_IT(&huart1, uart1_Rx, 1); // Receive until end of line
 8002770:	2201      	movs	r2, #1
 8002772:	4936      	ldr	r1, [pc, #216]	; (800284c <HAL_UART_RxCpltCallback+0x2dc>)
 8002774:	4837      	ldr	r0, [pc, #220]	; (8002854 <HAL_UART_RxCpltCallback+0x2e4>)
 8002776:	f005 fb67 	bl	8007e48 <HAL_UART_Receive_IT>
 800277a:	e002      	b.n	8002782 <HAL_UART_RxCpltCallback+0x212>
		}
		else {
			speed_flag = 1; // Line is received entirely
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_UART_RxCpltCallback+0x2e8>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
		}
		if (speed_flag == 1){
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_UART_RxCpltCallback+0x2e8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	f040 811a 	bne.w	80029c0 <HAL_UART_RxCpltCallback+0x450>
			if ((encoders_string[0] == '?') || (encoders_string[1] == '?')){
 800278c:	4b30      	ldr	r3, [pc, #192]	; (8002850 <HAL_UART_RxCpltCallback+0x2e0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b3f      	cmp	r3, #63	; 0x3f
 8002792:	d003      	beq.n	800279c <HAL_UART_RxCpltCallback+0x22c>
 8002794:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_UART_RxCpltCallback+0x2e0>)
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	2b3f      	cmp	r3, #63	; 0x3f
 800279a:	d105      	bne.n	80027a8 <HAL_UART_RxCpltCallback+0x238>
				HAL_UART_Transmit_IT(&huart1, uart1_Tx, sizeof(uart1_Tx)-1);
 800279c:	2202      	movs	r2, #2
 800279e:	492f      	ldr	r1, [pc, #188]	; (800285c <HAL_UART_RxCpltCallback+0x2ec>)
 80027a0:	482c      	ldr	r0, [pc, #176]	; (8002854 <HAL_UART_RxCpltCallback+0x2e4>)
 80027a2:	f005 fae3 	bl	8007d6c <HAL_UART_Transmit_IT>
 80027a6:	e106      	b.n	80029b6 <HAL_UART_RxCpltCallback+0x446>
			} // Received data is incorrect
			else{
				token = strtok((char*)encoders_string, "R");
 80027a8:	492d      	ldr	r1, [pc, #180]	; (8002860 <HAL_UART_RxCpltCallback+0x2f0>)
 80027aa:	4829      	ldr	r0, [pc, #164]	; (8002850 <HAL_UART_RxCpltCallback+0x2e0>)
 80027ac:	f008 fb34 	bl	800ae18 <strtok>
 80027b0:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
				if (encoders_string[0] == '>'){
 80027b4:	4b26      	ldr	r3, [pc, #152]	; (8002850 <HAL_UART_RxCpltCallback+0x2e0>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b3e      	cmp	r3, #62	; 0x3e
 80027ba:	d102      	bne.n	80027c2 <HAL_UART_RxCpltCallback+0x252>
					indexenc = 1;
 80027bc:	2301      	movs	r3, #1
 80027be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				}
				strncpy((char*)speed_string_L, token + 2 + indexenc, strlen(token));
 80027c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027c6:	3302      	adds	r3, #2
 80027c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80027cc:	18d6      	adds	r6, r2, r3
 80027ce:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80027d2:	f7fd fcfd 	bl	80001d0 <strlen>
 80027d6:	4602      	mov	r2, r0
 80027d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027dc:	4631      	mov	r1, r6
 80027de:	4618      	mov	r0, r3
 80027e0:	f007 fcd1 	bl	800a186 <strncpy>
				strncpy((char*)speed_string_R, (char*)encoders_string + strlen(token) + 2, strlen(token));
 80027e4:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80027e8:	f7fd fcf2 	bl	80001d0 <strlen>
 80027ec:	4603      	mov	r3, r0
 80027ee:	3302      	adds	r3, #2
 80027f0:	4a17      	ldr	r2, [pc, #92]	; (8002850 <HAL_UART_RxCpltCallback+0x2e0>)
 80027f2:	189e      	adds	r6, r3, r2
 80027f4:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80027f8:	f7fd fcea 	bl	80001d0 <strlen>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002802:	4631      	mov	r1, r6
 8002804:	4618      	mov	r0, r3
 8002806:	f007 fcbe 	bl	800a186 <strncpy>
				int z = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				for (int i=0; i<sizeof(speed_string_L); i++){
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002816:	e044      	b.n	80028a2 <HAL_UART_RxCpltCallback+0x332>
 8002818:	a4a8c156 	.word	0xa4a8c156
 800281c:	3fe3404e 	.word	0x3fe3404e
 8002820:	40004400 	.word	0x40004400
 8002824:	20000005 	.word	0x20000005
 8002828:	20004768 	.word	0x20004768
 800282c:	20000498 	.word	0x20000498
 8002830:	20004704 	.word	0x20004704
 8002834:	200046e0 	.word	0x200046e0
 8002838:	20000530 	.word	0x20000530
 800283c:	200025a0 	.word	0x200025a0
 8002840:	2000000c 	.word	0x2000000c
 8002844:	0801045c 	.word	0x0801045c
 8002848:	40013800 	.word	0x40013800
 800284c:	2000476c 	.word	0x2000476c
 8002850:	200046f0 	.word	0x200046f0
 8002854:	20000414 	.word	0x20000414
 8002858:	20000000 	.word	0x20000000
 800285c:	20000040 	.word	0x20000040
 8002860:	08010464 	.word	0x08010464
					if (speed_string_L[i] != ' '){
 8002864:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800286c:	4413      	add	r3, r2
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b20      	cmp	r3, #32
 8002872:	d011      	beq.n	8002898 <HAL_UART_RxCpltCallback+0x328>
						stringL[z] = speed_string_L[i];
 8002874:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800287c:	4413      	add	r3, r2
 800287e:	7819      	ldrb	r1, [r3, #0]
 8002880:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002884:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002888:	4413      	add	r3, r2
 800288a:	460a      	mov	r2, r1
 800288c:	701a      	strb	r2, [r3, #0]
						z++;
 800288e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002892:	3301      	adds	r3, #1
 8002894:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				for (int i=0; i<sizeof(speed_string_L); i++){
 8002898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289c:	3301      	adds	r3, #1
 800289e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80028a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028a6:	2b31      	cmp	r3, #49	; 0x31
 80028a8:	d9dc      	bls.n	8002864 <HAL_UART_RxCpltCallback+0x2f4>
					}
				}
				speedLtemp = strtod((char*)stringL, NULL);
 80028aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f008 faa5 	bl	800ae00 <strtod>
 80028b6:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
				speedL = -speedLtemp*60/(2*PPR*LOOP_RATE);
 80028ba:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 80028be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_UART_RxCpltCallback+0x45c>)
 80028cc:	4620      	mov	r0, r4
 80028ce:	4629      	mov	r1, r5
 80028d0:	f7fd fe92 	bl	80005f8 <__aeabi_dmul>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_UART_RxCpltCallback+0x460>)
 80028e2:	f7fd ffb3 	bl	800084c <__aeabi_ddiv>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	493a      	ldr	r1, [pc, #232]	; (80029d4 <HAL_UART_RxCpltCallback+0x464>)
 80028ec:	e9c1 2300 	strd	r2, r3, [r1]
				speedLRPM = speedR/GEAR_RATIO;
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <HAL_UART_RxCpltCallback+0x468>)
 80028f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	4b38      	ldr	r3, [pc, #224]	; (80029dc <HAL_UART_RxCpltCallback+0x46c>)
 80028fc:	f7fd ffa6 	bl	800084c <__aeabi_ddiv>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4936      	ldr	r1, [pc, #216]	; (80029e0 <HAL_UART_RxCpltCallback+0x470>)
 8002906:	e9c1 2300 	strd	r2, r3, [r1]
				z = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				for (int i=0; i<sizeof(speed_string_R); i++){
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002916:	e020      	b.n	800295a <HAL_UART_RxCpltCallback+0x3ea>
					if (speed_string_R[i] != ' '){
 8002918:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800291c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002920:	4413      	add	r3, r2
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b20      	cmp	r3, #32
 8002926:	d013      	beq.n	8002950 <HAL_UART_RxCpltCallback+0x3e0>
						stringR[z] = speed_string_R[i];
 8002928:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800292c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002930:	4413      	add	r3, r2
 8002932:	7819      	ldrb	r1, [r3, #0]
 8002934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002938:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800293c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002940:	4413      	add	r3, r2
 8002942:	460a      	mov	r2, r1
 8002944:	701a      	strb	r2, [r3, #0]
						z++;
 8002946:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800294a:	3301      	adds	r3, #1
 800294c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				for (int i=0; i<sizeof(speed_string_R); i++){
 8002950:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002954:	3301      	adds	r3, #1
 8002956:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800295a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800295e:	2b31      	cmp	r3, #49	; 0x31
 8002960:	d9da      	bls.n	8002918 <HAL_UART_RxCpltCallback+0x3a8>
					}
				}
				speedRtemp = strtod((char*)stringR, NULL);
 8002962:	f107 0308 	add.w	r3, r7, #8
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f008 fa49 	bl	800ae00 <strtod>
 800296e:	ed87 0b36 	vstr	d0, [r7, #216]	; 0xd8
				speedR = speedRtemp*60/(2*PPR*LOOP_RATE); // Formatting buffer to extract speed values
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_UART_RxCpltCallback+0x45c>)
 8002978:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800297c:	f7fd fe3c 	bl	80005f8 <__aeabi_dmul>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_UART_RxCpltCallback+0x460>)
 800298e:	f7fd ff5d 	bl	800084c <__aeabi_ddiv>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4910      	ldr	r1, [pc, #64]	; (80029d8 <HAL_UART_RxCpltCallback+0x468>)
 8002998:	e9c1 2300 	strd	r2, r3, [r1]
				speedRRPM = speedR/GEAR_RATIO;
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_UART_RxCpltCallback+0x468>)
 800299e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_UART_RxCpltCallback+0x46c>)
 80029a8:	f7fd ff50 	bl	800084c <__aeabi_ddiv>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	490c      	ldr	r1, [pc, #48]	; (80029e4 <HAL_UART_RxCpltCallback+0x474>)
 80029b2:	e9c1 2300 	strd	r2, r3, [r1]
			}
			ClearBuffer((uint8_t*)encoders_string, 20);
 80029b6:	2114      	movs	r1, #20
 80029b8:	480b      	ldr	r0, [pc, #44]	; (80029e8 <HAL_UART_RxCpltCallback+0x478>)
 80029ba:	f000 f933 	bl	8002c24 <ClearBuffer>
		}
	}
}
 80029be:	e7ff      	b.n	80029c0 <HAL_UART_RxCpltCallback+0x450>
 80029c0:	bf00      	nop
 80029c2:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	404e0000 	.word	0x404e0000
 80029d0:	40440000 	.word	0x40440000
 80029d4:	200049d8 	.word	0x200049d8
 80029d8:	200049e0 	.word	0x200049e0
 80029dc:	40300000 	.word	0x40300000
 80029e0:	20000528 	.word	0x20000528
 80029e4:	20000520 	.word	0x20000520
 80029e8:	200046f0 	.word	0x200046f0

080029ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef * huart){ // UART Tx Callback
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	if ((huart->Instance == USART2) && (Umode == 'X')){
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <HAL_UART_TxCpltCallback+0xac>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d109      	bne.n	8002a12 <HAL_UART_TxCpltCallback+0x26>
 80029fe:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_UART_TxCpltCallback+0xb0>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b58      	cmp	r3, #88	; 0x58
 8002a04:	d105      	bne.n	8002a12 <HAL_UART_TxCpltCallback+0x26>
		HAL_UART_Receive_IT(&huart2, uart2_Rx, 1);
 8002a06:	2201      	movs	r2, #1
 8002a08:	4925      	ldr	r1, [pc, #148]	; (8002aa0 <HAL_UART_TxCpltCallback+0xb4>)
 8002a0a:	4826      	ldr	r0, [pc, #152]	; (8002aa4 <HAL_UART_TxCpltCallback+0xb8>)
 8002a0c:	f005 fa1c 	bl	8007e48 <HAL_UART_Receive_IT>
 8002a10:	e03e      	b.n	8002a90 <HAL_UART_TxCpltCallback+0xa4>
	}
	else if ((huart->Instance == USART2) && (Umode == 'Y')){
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <HAL_UART_TxCpltCallback+0xac>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d112      	bne.n	8002a42 <HAL_UART_TxCpltCallback+0x56>
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <HAL_UART_TxCpltCallback+0xb0>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b59      	cmp	r3, #89	; 0x59
 8002a22:	d10e      	bne.n	8002a42 <HAL_UART_TxCpltCallback+0x56>
		if (uart2_Tx[2] == 'Y'){
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_UART_TxCpltCallback+0xbc>)
 8002a26:	789b      	ldrb	r3, [r3, #2]
 8002a28:	2b59      	cmp	r3, #89	; 0x59
 8002a2a:	d131      	bne.n	8002a90 <HAL_UART_TxCpltCallback+0xa4>
			ClearBuffer(uart2_Tx, 50);
 8002a2c:	2132      	movs	r1, #50	; 0x32
 8002a2e:	481e      	ldr	r0, [pc, #120]	; (8002aa8 <HAL_UART_TxCpltCallback+0xbc>)
 8002a30:	f000 f8f8 	bl	8002c24 <ClearBuffer>
			Umode = 'F';
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_UART_TxCpltCallback+0xb0>)
 8002a36:	2246      	movs	r2, #70	; 0x46
 8002a38:	701a      	strb	r2, [r3, #0]
			trajectory_flag = 1; // BXY is transmitted -> Starting while loop
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_UART_TxCpltCallback+0xc0>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
		if (uart2_Tx[2] == 'Y'){
 8002a40:	e026      	b.n	8002a90 <HAL_UART_TxCpltCallback+0xa4>
		}
	} // Defined trajectory received -> Starting while loop
	else if ((huart->Instance == USART2) && (Dmode == 'T')){
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_UART_TxCpltCallback+0xac>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d113      	bne.n	8002a74 <HAL_UART_TxCpltCallback+0x88>
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_UART_TxCpltCallback+0xc4>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b54      	cmp	r3, #84	; 0x54
 8002a52:	d10f      	bne.n	8002a74 <HAL_UART_TxCpltCallback+0x88>
		Dmode = 'F'; // Database mode OFF
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_UART_TxCpltCallback+0xc4>)
 8002a56:	2246      	movs	r2, #70	; 0x46
 8002a58:	701a      	strb	r2, [r3, #0]
		Dtimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_UART_TxCpltCallback+0xc8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_UART_TxCpltCallback+0xcc>)
 8002a64:	801a      	strh	r2, [r3, #0]
		Dtimer2 = __HAL_TIM_GET_COUNTER(&htim6);
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_UART_TxCpltCallback+0xc8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_UART_TxCpltCallback+0xd0>)
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	e00d      	b.n	8002a90 <HAL_UART_TxCpltCallback+0xa4>
	}
	else if (huart->Instance == USART1){
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <HAL_UART_TxCpltCallback+0xd4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d108      	bne.n	8002a90 <HAL_UART_TxCpltCallback+0xa4>
		speed_flag = 0; // Speed is being received
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_UART_TxCpltCallback+0xd8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, uart1_Rx, 1);
 8002a84:	2201      	movs	r2, #1
 8002a86:	4910      	ldr	r1, [pc, #64]	; (8002ac8 <HAL_UART_TxCpltCallback+0xdc>)
 8002a88:	4810      	ldr	r0, [pc, #64]	; (8002acc <HAL_UART_TxCpltCallback+0xe0>)
 8002a8a:	f005 f9dd 	bl	8007e48 <HAL_UART_Receive_IT>
	}
}
 8002a8e:	e7ff      	b.n	8002a90 <HAL_UART_TxCpltCallback+0xa4>
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40004400 	.word	0x40004400
 8002a9c:	20000005 	.word	0x20000005
 8002aa0:	20004768 	.word	0x20004768
 8002aa4:	20000498 	.word	0x20000498
 8002aa8:	2000000c 	.word	0x2000000c
 8002aac:	200046ec 	.word	0x200046ec
 8002ab0:	20000006 	.word	0x20000006
 8002ab4:	2000037c 	.word	0x2000037c
 8002ab8:	20004980 	.word	0x20004980
 8002abc:	20004982 	.word	0x20004982
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	2000476c 	.word	0x2000476c
 8002acc:	20000414 	.word	0x20000414

08002ad0 <GetMeasureInfos>:


void GetMeasureInfos(){ // Get Z axis angular speed from IMU  and X and Y from Lidar via Measure MCU
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af02      	add	r7, sp, #8
	int ThetaInt = Theta_N*1000;
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <GetMeasureInfos+0x78>)
 8002ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <GetMeasureInfos+0x7c>)
 8002ae2:	f7fd fd89 	bl	80005f8 <__aeabi_dmul>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f7fe f833 	bl	8000b58 <__aeabi_d2iz>
 8002af2:	4603      	mov	r3, r0
 8002af4:	607b      	str	r3, [r7, #4]
	Mmode = 'T'; // Wz mode ON
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <GetMeasureInfos+0x80>)
 8002af8:	2254      	movs	r2, #84	; 0x54
 8002afa:	701a      	strb	r2, [r3, #0]
	Mtimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <GetMeasureInfos+0x84>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <GetMeasureInfos+0x88>)
 8002b06:	801a      	strh	r2, [r3, #0]
	Mtimer2 = __HAL_TIM_GET_COUNTER(&htim6); // Resetting Wz timer
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <GetMeasureInfos+0x84>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <GetMeasureInfos+0x8c>)
 8002b12:	801a      	strh	r2, [r3, #0]
	strcpy((char*)i2c1_Tx, "WL:");
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <GetMeasureInfos+0x90>)
 8002b16:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <GetMeasureInfos+0x94>)
 8002b18:	601a      	str	r2, [r3, #0]
	i2c1_Tx[3] = ThetaInt >> 8;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	121b      	asrs	r3, r3, #8
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <GetMeasureInfos+0x90>)
 8002b22:	70da      	strb	r2, [r3, #3]
	i2c1_Rx[4] = ThetaInt & 0x00FF; // Transmit Theta in two bytes
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <GetMeasureInfos+0x98>)
 8002b2a:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, I2C_SLAVE_ADDRESS_Measure, i2c1_Tx, sizeof(i2c1_Tx), I2C_FIRST_FRAME);
 8002b2c:	2340      	movs	r3, #64	; 0x40
 8002b2e:	b299      	uxth	r1, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2314      	movs	r3, #20
 8002b36:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <GetMeasureInfos+0x90>)
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <GetMeasureInfos+0x9c>)
 8002b3a:	f001 f9c9 	bl	8003ed0 <HAL_I2C_Master_Seq_Transmit_IT>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20004a48 	.word	0x20004a48
 8002b4c:	408f4000 	.word	0x408f4000
 8002b50:	20000008 	.word	0x20000008
 8002b54:	2000037c 	.word	0x2000037c
 8002b58:	20004978 	.word	0x20004978
 8002b5c:	2000497a 	.word	0x2000497a
 8002b60:	20000044 	.word	0x20000044
 8002b64:	003a4c57 	.word	0x003a4c57
 8002b68:	20004770 	.word	0x20004770
 8002b6c:	200002dc 	.word	0x200002dc

08002b70 <GetBMS>:

void GetBMS(){ // Get BMS MCU info
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af02      	add	r7, sp, #8
	Bmode = 'T'; // BMS MCU mode ON
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <GetBMS+0x4c>)
 8002b78:	2254      	movs	r2, #84	; 0x54
 8002b7a:	701a      	strb	r2, [r3, #0]
	Btimer1 = __HAL_TIM_GET_COUNTER(&htim6);
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <GetBMS+0x50>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <GetBMS+0x54>)
 8002b86:	801a      	strh	r2, [r3, #0]
	Btimer2 = __HAL_TIM_GET_COUNTER(&htim6); // Resetting BMS timer
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <GetBMS+0x50>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <GetBMS+0x58>)
 8002b92:	801a      	strh	r2, [r3, #0]
	strcpy((char*)i2c1_Tx, "BMS:");
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <GetBMS+0x5c>)
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <GetBMS+0x60>)
 8002b98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b9c:	6018      	str	r0, [r3, #0]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	7019      	strb	r1, [r3, #0]
	HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, I2C_SLAVE_ADDRESS_BMS, i2c1_Tx, sizeof(i2c1_Tx), I2C_FIRST_FRAME);
 8002ba2:	232e      	movs	r3, #46	; 0x2e
 8002ba4:	b299      	uxth	r1, r3
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2314      	movs	r3, #20
 8002bac:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <GetBMS+0x5c>)
 8002bae:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <GetBMS+0x64>)
 8002bb0:	f001 f98e 	bl	8003ed0 <HAL_I2C_Master_Seq_Transmit_IT>
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000007 	.word	0x20000007
 8002bc0:	2000037c 	.word	0x2000037c
 8002bc4:	20004984 	.word	0x20004984
 8002bc8:	20004986 	.word	0x20004986
 8002bcc:	20000044 	.word	0x20000044
 8002bd0:	08010468 	.word	0x08010468
 8002bd4:	200002dc 	.word	0x200002dc

08002bd8 <GetSpeed>:

void GetSpeed(){ // Get encoders speed
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	speed_flag = 0; // Speed is being received
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <GetSpeed+0x18>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, uart1_Tx, sizeof(uart1_Tx)-1);
 8002be2:	2202      	movs	r2, #2
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <GetSpeed+0x1c>)
 8002be6:	4804      	ldr	r0, [pc, #16]	; (8002bf8 <GetSpeed+0x20>)
 8002be8:	f005 f8c0 	bl	8007d6c <HAL_UART_Transmit_IT>
}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	20000040 	.word	0x20000040
 8002bf8:	20000414 	.word	0x20000414

08002bfc <SendDatabase>:

void SendDatabase(){ // Database Tx via RaspberryPi
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
	Dmode = 'T'; // Database mode ON
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SendDatabase+0x1c>)
 8002c02:	2254      	movs	r2, #84	; 0x54
 8002c04:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, data_buf, sizeof(data_buf));
 8002c06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c0a:	4904      	ldr	r1, [pc, #16]	; (8002c1c <SendDatabase+0x20>)
 8002c0c:	4804      	ldr	r0, [pc, #16]	; (8002c20 <SendDatabase+0x24>)
 8002c0e:	f005 f8ad 	bl	8007d6c <HAL_UART_Transmit_IT>
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000006 	.word	0x20000006
 8002c1c:	20004784 	.word	0x20004784
 8002c20:	20000498 	.word	0x20000498

08002c24 <ClearBuffer>:

void ClearBuffer(uint8_t* buffer, int size){ // Clear buffer
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
    for(int i=0; i<size; i++){
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e007      	b.n	8002c44 <ClearBuffer+0x20>
    	buffer[i]='\0';
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<size; i++){
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3301      	adds	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	dbf3      	blt.n	8002c34 <ClearBuffer+0x10>
    }
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <Heartbeat>:

void Heartbeat(){ // LED Heartbeat
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - Beat > 1000) {
 8002c60:	f000 fd3c 	bl	80036dc <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <Heartbeat+0x2c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c70:	d908      	bls.n	8002c84 <Heartbeat+0x28>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8002c72:	2108      	movs	r1, #8
 8002c74:	4805      	ldr	r0, [pc, #20]	; (8002c8c <Heartbeat+0x30>)
 8002c76:	f001 f881 	bl	8003d7c <HAL_GPIO_TogglePin>
		Beat = HAL_GetTick();
 8002c7a:	f000 fd2f 	bl	80036dc <HAL_GetTick>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4a01      	ldr	r2, [pc, #4]	; (8002c88 <Heartbeat+0x2c>)
 8002c82:	6013      	str	r3, [r2, #0]
	}
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2000498c 	.word	0x2000498c
 8002c8c:	48000400 	.word	0x48000400

08002c90 <LinAct>:

void LinAct(){ // Activates linear actuators
 8002c90:	b598      	push	{r3, r4, r7, lr}
 8002c92:	af00      	add	r7, sp, #0
	if (k == 20){
 8002c94:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <LinAct+0x170>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b14      	cmp	r3, #20
 8002c9a:	d105      	bne.n	8002ca8 <LinAct+0x18>
		Acttimer = HAL_GetTick(); // Reboot linear actuators cycle
 8002c9c:	f000 fd1e 	bl	80036dc <HAL_GetTick>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <LinAct+0x174>)
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e021      	b.n	8002cec <LinAct+0x5c>
	}
	else if (k == 290){
 8002ca8:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <LinAct+0x170>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002cb0:	d105      	bne.n	8002cbe <LinAct+0x2e>
		Acttimer = HAL_GetTick(); // Reboot linear actuators cycle
 8002cb2:	f000 fd13 	bl	80036dc <HAL_GetTick>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4a52      	ldr	r2, [pc, #328]	; (8002e04 <LinAct+0x174>)
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e016      	b.n	8002cec <LinAct+0x5c>
	}
	else if (k == 550){
 8002cbe:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <LinAct+0x170>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f240 2226 	movw	r2, #550	; 0x226
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d105      	bne.n	8002cd6 <LinAct+0x46>
		Acttimer = HAL_GetTick(); // Reboot linear actuators cycle
 8002cca:	f000 fd07 	bl	80036dc <HAL_GetTick>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4a4c      	ldr	r2, [pc, #304]	; (8002e04 <LinAct+0x174>)
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e00a      	b.n	8002cec <LinAct+0x5c>
	}
	else if (k == 850){
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <LinAct+0x170>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f240 3252 	movw	r2, #850	; 0x352
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d104      	bne.n	8002cec <LinAct+0x5c>
		Acttimer = HAL_GetTick(); // Reboot linear actuators cycle
 8002ce2:	f000 fcfb 	bl	80036dc <HAL_GetTick>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a46      	ldr	r2, [pc, #280]	; (8002e04 <LinAct+0x174>)
 8002cea:	6013      	str	r3, [r2, #0]
	}

	if (k>=20){
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <LinAct+0x170>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b13      	cmp	r3, #19
 8002cf2:	dd71      	ble.n	8002dd8 <LinAct+0x148>
		if (HAL_GetTick() - Acttimer <= 5000){
 8002cf4:	f000 fcf2 	bl	80036dc <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <LinAct+0x174>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d806      	bhi.n	8002d16 <LinAct+0x86>
			LinearActPWM = 1100; // Linear actuators go up
 8002d08:	493f      	ldr	r1, [pc, #252]	; (8002e08 <LinAct+0x178>)
 8002d0a:	a335      	add	r3, pc, #212	; (adr r3, 8002de0 <LinAct+0x150>)
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	e9c1 2300 	strd	r2, r3, [r1]
 8002d14:	e04f      	b.n	8002db6 <LinAct+0x126>
		}
		else if ((HAL_GetTick() - Acttimer > 5000) && (HAL_GetTick() - Acttimer <= 7000)){
 8002d16:	f000 fce1 	bl	80036dc <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <LinAct+0x174>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d910      	bls.n	8002d4c <LinAct+0xbc>
 8002d2a:	f000 fcd7 	bl	80036dc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <LinAct+0x174>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d806      	bhi.n	8002d4c <LinAct+0xbc>
			LinearActPWM = 1700; // Linear actuators go down
 8002d3e:	4932      	ldr	r1, [pc, #200]	; (8002e08 <LinAct+0x178>)
 8002d40:	a329      	add	r3, pc, #164	; (adr r3, 8002de8 <LinAct+0x158>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	e9c1 2300 	strd	r2, r3, [r1]
 8002d4a:	e034      	b.n	8002db6 <LinAct+0x126>
		}
		else if ((HAL_GetTick() - Acttimer > 7000) && (HAL_GetTick() - Acttimer <= 12000)){
 8002d4c:	f000 fcc6 	bl	80036dc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <LinAct+0x174>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d910      	bls.n	8002d82 <LinAct+0xf2>
 8002d60:	f000 fcbc 	bl	80036dc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <LinAct+0x174>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d806      	bhi.n	8002d82 <LinAct+0xf2>
			LinearActPWM = 1100; // Linear actuators go up
 8002d74:	4924      	ldr	r1, [pc, #144]	; (8002e08 <LinAct+0x178>)
 8002d76:	a31a      	add	r3, pc, #104	; (adr r3, 8002de0 <LinAct+0x150>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	e9c1 2300 	strd	r2, r3, [r1]
 8002d80:	e019      	b.n	8002db6 <LinAct+0x126>
		}
		else if ((HAL_GetTick() - Acttimer > 12000) && (HAL_GetTick() - Acttimer <= 27000)){
 8002d82:	f000 fcab 	bl	80036dc <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <LinAct+0x174>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d90f      	bls.n	8002db6 <LinAct+0x126>
 8002d96:	f000 fca1 	bl	80036dc <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <LinAct+0x174>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f646 1278 	movw	r2, #27000	; 0x6978
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d805      	bhi.n	8002db6 <LinAct+0x126>
			LinearActPWM = 1500; // Linear actuators stay straight
 8002daa:	4917      	ldr	r1, [pc, #92]	; (8002e08 <LinAct+0x178>)
 8002dac:	a310      	add	r3, pc, #64	; (adr r3, 8002df0 <LinAct+0x160>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	e9c1 2300 	strd	r2, r3, [r1]
		}
		TIM16->CCR1 = LinearActPWM*FREQ_PSCCLOCK; // Generating LinearAct PWM signal
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <LinAct+0x178>)
 8002db8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dbc:	a30e      	add	r3, pc, #56	; (adr r3, 8002df8 <LinAct+0x168>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fc19 	bl	80005f8 <__aeabi_dmul>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4c10      	ldr	r4, [pc, #64]	; (8002e0c <LinAct+0x17c>)
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7fd feea 	bl	8000ba8 <__aeabi_d2uiz>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	6363      	str	r3, [r4, #52]	; 0x34
	}
}
 8002dd8:	bf00      	nop
 8002dda:	bd98      	pop	{r3, r4, r7, pc}
 8002ddc:	f3af 8000 	nop.w
 8002de0:	00000000 	.word	0x00000000
 8002de4:	40913000 	.word	0x40913000
 8002de8:	00000000 	.word	0x00000000
 8002dec:	409a9000 	.word	0x409a9000
 8002df0:	00000000 	.word	0x00000000
 8002df4:	40977000 	.word	0x40977000
 8002df8:	9999999a 	.word	0x9999999a
 8002dfc:	40099999 	.word	0x40099999
 8002e00:	200046e4 	.word	0x200046e4
 8002e04:	20004990 	.word	0x20004990
 8002e08:	20000068 	.word	0x20000068
 8002e0c:	40014400 	.word	0x40014400

08002e10 <PIController_Init>:

void PIController_Init(PIController *pi){ // PI init
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	pi->proportional = 0;
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pi->integral = 0;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pi->prevError  = 0;
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pi->out = 0;
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	0000      	movs	r0, r0
	...

08002e60 <PIController_Update>:

double PIController_Update(PIController *pi, double setpoint, double measurement){ // PI update
 8002e60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e64:	b088      	sub	sp, #32
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6178      	str	r0, [r7, #20]
 8002e6a:	ed87 0b02 	vstr	d0, [r7, #8]
 8002e6e:	ed87 1b00 	vstr	d1, [r7]
	double error = setpoint - measurement; // Error signal
 8002e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e7a:	f7fd fa05 	bl	8000288 <__aeabi_dsub>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pi->proportional = PI_KP * error; // Proportional
 8002e86:	a33a      	add	r3, pc, #232	; (adr r3, 8002f70 <PIController_Update+0x110>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e90:	f7fd fbb2 	bl	80005f8 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	6979      	ldr	r1, [r7, #20]
 8002e9a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pi->integral = pi->integral + 0.5 * PI_KI * pi->T * (error + pi->prevError); // Integral
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002eaa:	a333      	add	r3, pc, #204	; (adr r3, 8002f78 <PIController_Update+0x118>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd fba2 	bl	80005f8 <__aeabi_dmul>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4690      	mov	r8, r2
 8002eba:	4699      	mov	r9, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec6:	f7fd f9e1 	bl	800028c <__adddf3>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4640      	mov	r0, r8
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	f7fd fb91 	bl	80005f8 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4620      	mov	r0, r4
 8002edc:	4629      	mov	r1, r5
 8002ede:	f7fd f9d5 	bl	800028c <__adddf3>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	6979      	ldr	r1, [r7, #20]
 8002ee8:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pi->out = pi->proportional + pi->integral; // Out
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ef8:	f7fd f9c8 	bl	800028c <__adddf3>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	6979      	ldr	r1, [r7, #20]
 8002f02:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    if (pi->out > pi->limMax){
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f12:	f7fd fe01 	bl	8000b18 <__aeabi_dcmpgt>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d006      	beq.n	8002f2a <PIController_Update+0xca>
        pi->out = pi->limMax;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f22:	6979      	ldr	r1, [r7, #20]
 8002f24:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002f28:	e010      	b.n	8002f4c <PIController_Update+0xec>
    }
    else if (pi->out < pi->limMin){
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd fdd1 	bl	8000adc <__aeabi_dcmplt>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <PIController_Update+0xec>
        pi->out = pi->limMin;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	6979      	ldr	r1, [r7, #20]
 8002f48:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    } // Applying PI limits
    pi->prevError = error; // Keeping error for the next update
 8002f4c:	6979      	ldr	r1, [r7, #20]
 8002f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    return pi->out;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f5c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f60:	eeb0 0a47 	vmov.f32	s0, s14
 8002f64:	eef0 0a67 	vmov.f32	s1, s15
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f70:	97247454 	.word	0x97247454
 8002f74:	3fbe90ff 	.word	0x3fbe90ff
 8002f78:	8db8bac7 	.word	0x8db8bac7
 8002f7c:	3fb6f006 	.word	0x3fb6f006

08002f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f84:	b672      	cpsid	i
}
 8002f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <Error_Handler+0x8>
	...

08002f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f92:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <HAL_MspInit+0x44>)
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	4a0e      	ldr	r2, [pc, #56]	; (8002fd0 <HAL_MspInit+0x44>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_MspInit+0x44>)
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_MspInit+0x44>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <HAL_MspInit+0x44>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_MspInit+0x44>)
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b09e      	sub	sp, #120	; 0x78
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fec:	f107 0310 	add.w	r3, r7, #16
 8002ff0:	2254      	movs	r2, #84	; 0x54
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f006 fa0f 	bl	8009418 <memset>
  if(hi2c->Instance==I2C1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a23      	ldr	r2, [pc, #140]	; (800308c <HAL_I2C_MspInit+0xb8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d13f      	bne.n	8003084 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003004:	2340      	movs	r3, #64	; 0x40
 8003006:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003008:	2300      	movs	r3, #0
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800300c:	f107 0310 	add.w	r3, r7, #16
 8003010:	4618      	mov	r0, r3
 8003012:	f003 f99d 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800301c:	f7ff ffb0 	bl	8002f80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_I2C_MspInit+0xbc>)
 8003022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003024:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_I2C_MspInit+0xbc>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_I2C_MspInit+0xbc>)
 800302e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003038:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800303c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800303e:	2312      	movs	r3, #18
 8003040:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003042:	2301      	movs	r3, #1
 8003044:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003046:	2303      	movs	r3, #3
 8003048:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800304a:	2304      	movs	r3, #4
 800304c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003052:	4619      	mov	r1, r3
 8003054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003058:	f000 fd0e 	bl	8003a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_I2C_MspInit+0xbc>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <HAL_I2C_MspInit+0xbc>)
 8003062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003066:	6593      	str	r3, [r2, #88]	; 0x58
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_I2C_MspInit+0xbc>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	2100      	movs	r1, #0
 8003078:	201f      	movs	r0, #31
 800307a:	f000 fc3a 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800307e:	201f      	movs	r0, #31
 8003080:	f000 fc53 	bl	800392a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003084:	bf00      	nop
 8003086:	3778      	adds	r7, #120	; 0x78
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40005400 	.word	0x40005400
 8003090:	40021000 	.word	0x40021000

08003094 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0d      	ldr	r2, [pc, #52]	; (80030d8 <HAL_TIM_PWM_MspInit+0x44>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d113      	bne.n	80030ce <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_TIM_PWM_MspInit+0x48>)
 80030a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030aa:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <HAL_TIM_PWM_MspInit+0x48>)
 80030ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030b0:	6613      	str	r3, [r2, #96]	; 0x60
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_TIM_PWM_MspInit+0x48>)
 80030b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	210f      	movs	r1, #15
 80030c2:	2019      	movs	r0, #25
 80030c4:	f000 fc15 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80030c8:	2019      	movs	r0, #25
 80030ca:	f000 fc2e 	bl	800392a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <HAL_TIM_Base_MspInit+0x68>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10c      	bne.n	800310c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030f2:	4b16      	ldr	r3, [pc, #88]	; (800314c <HAL_TIM_Base_MspInit+0x6c>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <HAL_TIM_Base_MspInit+0x6c>)
 80030f8:	f043 0310 	orr.w	r3, r3, #16
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_TIM_Base_MspInit+0x6c>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800310a:	e018      	b.n	800313e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <HAL_TIM_Base_MspInit+0x70>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d113      	bne.n	800313e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_TIM_Base_MspInit+0x6c>)
 8003118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311a:	4a0c      	ldr	r2, [pc, #48]	; (800314c <HAL_TIM_Base_MspInit+0x6c>)
 800311c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003120:	6613      	str	r3, [r2, #96]	; 0x60
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_TIM_Base_MspInit+0x6c>)
 8003124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	210f      	movs	r1, #15
 8003132:	2019      	movs	r0, #25
 8003134:	f000 fbdd 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003138:	2019      	movs	r0, #25
 800313a:	f000 fbf6 	bl	800392a <HAL_NVIC_EnableIRQ>
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40001000 	.word	0x40001000
 800314c:	40021000 	.word	0x40021000
 8003150:	40014400 	.word	0x40014400

08003154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a23      	ldr	r2, [pc, #140]	; (8003200 <HAL_TIM_MspPostInit+0xac>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d11e      	bne.n	80031b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_TIM_MspPostInit+0xb0>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	4a22      	ldr	r2, [pc, #136]	; (8003204 <HAL_TIM_MspPostInit+0xb0>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_TIM_MspPostInit+0xb0>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 800318e:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8003192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031a0:	2301      	movs	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4619      	mov	r1, r3
 80031aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ae:	f000 fc63 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80031b2:	e021      	b.n	80031f8 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM16)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a13      	ldr	r2, [pc, #76]	; (8003208 <HAL_TIM_MspPostInit+0xb4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d11c      	bne.n	80031f8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_TIM_MspPostInit+0xb0>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c2:	4a10      	ldr	r2, [pc, #64]	; (8003204 <HAL_TIM_MspPostInit+0xb0>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <HAL_TIM_MspPostInit+0xb0>)
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031d6:	2340      	movs	r3, #64	; 0x40
 80031d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80031e6:	230e      	movs	r3, #14
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	4619      	mov	r1, r3
 80031f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f4:	f000 fc40 	bl	8003a78 <HAL_GPIO_Init>
}
 80031f8:	bf00      	nop
 80031fa:	3728      	adds	r7, #40	; 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40021000 	.word	0x40021000
 8003208:	40014400 	.word	0x40014400

0800320c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b0a0      	sub	sp, #128	; 0x80
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003224:	f107 0318 	add.w	r3, r7, #24
 8003228:	2254      	movs	r2, #84	; 0x54
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f006 f8f3 	bl	8009418 <memset>
  if(huart->Instance==USART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a45      	ldr	r2, [pc, #276]	; (800334c <HAL_UART_MspInit+0x140>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d13e      	bne.n	80032ba <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800323c:	2301      	movs	r3, #1
 800323e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003240:	2300      	movs	r3, #0
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003244:	f107 0318 	add.w	r3, r7, #24
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f881 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003254:	f7ff fe94 	bl	8002f80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003258:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <HAL_UART_MspInit+0x144>)
 800325a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325c:	4a3c      	ldr	r2, [pc, #240]	; (8003350 <HAL_UART_MspInit+0x144>)
 800325e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003262:	6613      	str	r3, [r2, #96]	; 0x60
 8003264:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <HAL_UART_MspInit+0x144>)
 8003266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003270:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_UART_MspInit+0x144>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	4a36      	ldr	r2, [pc, #216]	; (8003350 <HAL_UART_MspInit+0x144>)
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327c:	4b34      	ldr	r3, [pc, #208]	; (8003350 <HAL_UART_MspInit+0x144>)
 800327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003288:	23c0      	movs	r3, #192	; 0xc0
 800328a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003294:	2303      	movs	r3, #3
 8003296:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003298:	2307      	movs	r3, #7
 800329a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032a0:	4619      	mov	r1, r3
 80032a2:	482c      	ldr	r0, [pc, #176]	; (8003354 <HAL_UART_MspInit+0x148>)
 80032a4:	f000 fbe8 	bl	8003a78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2100      	movs	r1, #0
 80032ac:	2025      	movs	r0, #37	; 0x25
 80032ae:	f000 fb20 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032b2:	2025      	movs	r0, #37	; 0x25
 80032b4:	f000 fb39 	bl	800392a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032b8:	e043      	b.n	8003342 <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a26      	ldr	r2, [pc, #152]	; (8003358 <HAL_UART_MspInit+0x14c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d13e      	bne.n	8003342 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032c4:	2302      	movs	r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032c8:	2300      	movs	r3, #0
 80032ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032cc:	f107 0318 	add.w	r3, r7, #24
 80032d0:	4618      	mov	r0, r3
 80032d2:	f003 f83d 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80032dc:	f7ff fe50 	bl	8002f80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_UART_MspInit+0x144>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <HAL_UART_MspInit+0x144>)
 80032e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ea:	6593      	str	r3, [r2, #88]	; 0x58
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_UART_MspInit+0x144>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_UART_MspInit+0x144>)
 80032fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fc:	4a14      	ldr	r2, [pc, #80]	; (8003350 <HAL_UART_MspInit+0x144>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_UART_MspInit+0x144>)
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003310:	230c      	movs	r3, #12
 8003312:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331c:	2303      	movs	r3, #3
 800331e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003320:	2307      	movs	r3, #7
 8003322:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003324:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003328:	4619      	mov	r1, r3
 800332a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800332e:	f000 fba3 	bl	8003a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	2026      	movs	r0, #38	; 0x26
 8003338:	f000 fadb 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800333c:	2026      	movs	r0, #38	; 0x26
 800333e:	f000 faf4 	bl	800392a <HAL_NVIC_EnableIRQ>
}
 8003342:	bf00      	nop
 8003344:	3780      	adds	r7, #128	; 0x80
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40013800 	.word	0x40013800
 8003350:	40021000 	.word	0x40021000
 8003354:	48000400 	.word	0x48000400
 8003358:	40004400 	.word	0x40004400

0800335c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <NMI_Handler+0x4>

08003362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003366:	e7fe      	b.n	8003366 <HardFault_Handler+0x4>

08003368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800336c:	e7fe      	b.n	800336c <MemManage_Handler+0x4>

0800336e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003372:	e7fe      	b.n	8003372 <BusFault_Handler+0x4>

08003374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003378:	e7fe      	b.n	8003378 <UsageFault_Handler+0x4>

0800337a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a8:	f000 f984 	bl	80036b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033b4:	4803      	ldr	r0, [pc, #12]	; (80033c4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80033b6:	f003 fc8d 	bl	8006cd4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80033ba:	4803      	ldr	r0, [pc, #12]	; (80033c8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80033bc:	f003 fc8a 	bl	8006cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20000330 	.word	0x20000330
 80033c8:	200003c8 	.word	0x200003c8

080033cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80033d0:	4802      	ldr	r0, [pc, #8]	; (80033dc <I2C1_EV_IRQHandler+0x10>)
 80033d2:	f000 fe85 	bl	80040e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200002dc 	.word	0x200002dc

080033e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033e4:	4802      	ldr	r0, [pc, #8]	; (80033f0 <USART1_IRQHandler+0x10>)
 80033e6:	f004 fd85 	bl	8007ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000414 	.word	0x20000414

080033f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033f8:	4802      	ldr	r0, [pc, #8]	; (8003404 <USART2_IRQHandler+0x10>)
 80033fa:	f004 fd7b 	bl	8007ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000498 	.word	0x20000498

08003408 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return 1;
 800340c:	2301      	movs	r3, #1
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <_kill>:

int _kill(int pid, int sig)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003422:	f005 ffcf 	bl	80093c4 <__errno>
 8003426:	4603      	mov	r3, r0
 8003428:	2216      	movs	r2, #22
 800342a:	601a      	str	r2, [r3, #0]
  return -1;
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_exit>:

void _exit (int status)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ffe7 	bl	8003418 <_kill>
  while (1) {}    /* Make sure we hang here */
 800344a:	e7fe      	b.n	800344a <_exit+0x12>

0800344c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e00a      	b.n	8003474 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800345e:	f3af 8000 	nop.w
 8003462:	4601      	mov	r1, r0
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	60ba      	str	r2, [r7, #8]
 800346a:	b2ca      	uxtb	r2, r1
 800346c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	3301      	adds	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	dbf0      	blt.n	800345e <_read+0x12>
  }

  return len;
 800347c:	687b      	ldr	r3, [r7, #4]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e009      	b.n	80034ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	60ba      	str	r2, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3301      	adds	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	dbf1      	blt.n	8003498 <_write+0x12>
  }
  return len;
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <_close>:

int _close(int file)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034e6:	605a      	str	r2, [r3, #4]
  return 0;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <_isatty>:

int _isatty(int file)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034fe:	2301      	movs	r3, #1
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <_sbrk+0x5c>)
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <_sbrk+0x60>)
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <_sbrk+0x64>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003544:	4b11      	ldr	r3, [pc, #68]	; (800358c <_sbrk+0x64>)
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <_sbrk+0x68>)
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <_sbrk+0x64>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	429a      	cmp	r2, r3
 8003556:	d207      	bcs.n	8003568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003558:	f005 ff34 	bl	80093c4 <__errno>
 800355c:	4603      	mov	r3, r0
 800355e:	220c      	movs	r2, #12
 8003560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003562:	f04f 33ff 	mov.w	r3, #4294967295
 8003566:	e009      	b.n	800357c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003568:	4b08      	ldr	r3, [pc, #32]	; (800358c <_sbrk+0x64>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <_sbrk+0x64>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	4a05      	ldr	r2, [pc, #20]	; (800358c <_sbrk+0x64>)
 8003578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20010000 	.word	0x20010000
 8003588:	00000400 	.word	0x00000400
 800358c:	20004a98 	.word	0x20004a98
 8003590:	20004ab0 	.word	0x20004ab0

08003594 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <SystemInit+0x20>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <SystemInit+0x20>)
 80035a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035bc:	f7ff ffea 	bl	8003594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c0:	480c      	ldr	r0, [pc, #48]	; (80035f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80035c2:	490d      	ldr	r1, [pc, #52]	; (80035f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035c4:	4a0d      	ldr	r2, [pc, #52]	; (80035fc <LoopForever+0xe>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c8:	e002      	b.n	80035d0 <LoopCopyDataInit>

080035ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ce:	3304      	adds	r3, #4

080035d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d4:	d3f9      	bcc.n	80035ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035d8:	4c0a      	ldr	r4, [pc, #40]	; (8003604 <LoopForever+0x16>)
  movs r3, #0
 80035da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035dc:	e001      	b.n	80035e2 <LoopFillZerobss>

080035de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e0:	3204      	adds	r2, #4

080035e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e4:	d3fb      	bcc.n	80035de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035e6:	f005 fef3 	bl	80093d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035ea:	f7fd fd05 	bl	8000ff8 <main>

080035ee <LoopForever>:

LoopForever:
    b LoopForever
 80035ee:	e7fe      	b.n	80035ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80035f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80035f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f8:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 80035fc:	08010c50 	.word	0x08010c50
  ldr r2, =_sbss
 8003600:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8003604:	20004ab0 	.word	0x20004ab0

08003608 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003608:	e7fe      	b.n	8003608 <ADC1_IRQHandler>

0800360a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003614:	2003      	movs	r0, #3
 8003616:	f000 f961 	bl	80038dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800361a:	2000      	movs	r0, #0
 800361c:	f000 f80e 	bl	800363c <HAL_InitTick>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	71fb      	strb	r3, [r7, #7]
 800362a:	e001      	b.n	8003630 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800362c:	f7ff fcae 	bl	8002f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003630:	79fb      	ldrb	r3, [r7, #7]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003648:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <HAL_InitTick+0x6c>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d023      	beq.n	8003698 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003650:	4b16      	ldr	r3, [pc, #88]	; (80036ac <HAL_InitTick+0x70>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <HAL_InitTick+0x6c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003662:	fbb2 f3f3 	udiv	r3, r2, r3
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f96d 	bl	8003946 <HAL_SYSTICK_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d809      	bhi.n	800368c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003678:	2200      	movs	r2, #0
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	f000 f937 	bl	80038f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003684:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <HAL_InitTick+0x74>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e007      	b.n	800369c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	e004      	b.n	800369c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	e001      	b.n	800369c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200000e8 	.word	0x200000e8
 80036ac:	200000e0 	.word	0x200000e0
 80036b0:	200000e4 	.word	0x200000e4

080036b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_IncTick+0x20>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_IncTick+0x24>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4413      	add	r3, r2
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <HAL_IncTick+0x24>)
 80036c6:	6013      	str	r3, [r2, #0]
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	200000e8 	.word	0x200000e8
 80036d8:	20004a9c 	.word	0x20004a9c

080036dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return uwTick;
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <HAL_GetTick+0x14>)
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20004a9c 	.word	0x20004a9c

080036f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036fc:	f7ff ffee 	bl	80036dc <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d005      	beq.n	800371a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_Delay+0x44>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800371a:	bf00      	nop
 800371c:	f7ff ffde 	bl	80036dc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	429a      	cmp	r2, r3
 800372a:	d8f7      	bhi.n	800371c <HAL_Delay+0x28>
  {
  }
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200000e8 	.word	0x200000e8

0800373c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <__NVIC_SetPriorityGrouping+0x44>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003758:	4013      	ands	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800376e:	4a04      	ldr	r2, [pc, #16]	; (8003780 <__NVIC_SetPriorityGrouping+0x44>)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	60d3      	str	r3, [r2, #12]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <__NVIC_GetPriorityGrouping+0x18>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	0a1b      	lsrs	r3, r3, #8
 800378e:	f003 0307 	and.w	r3, r3, #7
}
 8003792:	4618      	mov	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	db0b      	blt.n	80037ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	f003 021f 	and.w	r2, r3, #31
 80037b8:	4907      	ldr	r1, [pc, #28]	; (80037d8 <__NVIC_EnableIRQ+0x38>)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	2001      	movs	r0, #1
 80037c2:	fa00 f202 	lsl.w	r2, r0, r2
 80037c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000e100 	.word	0xe000e100

080037dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	db0a      	blt.n	8003806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	490c      	ldr	r1, [pc, #48]	; (8003828 <__NVIC_SetPriority+0x4c>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	440b      	add	r3, r1
 8003800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003804:	e00a      	b.n	800381c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4908      	ldr	r1, [pc, #32]	; (800382c <__NVIC_SetPriority+0x50>)
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3b04      	subs	r3, #4
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	440b      	add	r3, r1
 800381a:	761a      	strb	r2, [r3, #24]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000e100 	.word	0xe000e100
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f1c3 0307 	rsb	r3, r3, #7
 800384a:	2b04      	cmp	r3, #4
 800384c:	bf28      	it	cs
 800384e:	2304      	movcs	r3, #4
 8003850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3304      	adds	r3, #4
 8003856:	2b06      	cmp	r3, #6
 8003858:	d902      	bls.n	8003860 <NVIC_EncodePriority+0x30>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3b03      	subs	r3, #3
 800385e:	e000      	b.n	8003862 <NVIC_EncodePriority+0x32>
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	f04f 32ff 	mov.w	r2, #4294967295
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43da      	mvns	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	401a      	ands	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003878:	f04f 31ff 	mov.w	r1, #4294967295
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	43d9      	mvns	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	4313      	orrs	r3, r2
         );
}
 800388a:	4618      	mov	r0, r3
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a8:	d301      	bcc.n	80038ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038aa:	2301      	movs	r3, #1
 80038ac:	e00f      	b.n	80038ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <SysTick_Config+0x40>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038b6:	210f      	movs	r1, #15
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	f7ff ff8e 	bl	80037dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <SysTick_Config+0x40>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c6:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <SysTick_Config+0x40>)
 80038c8:	2207      	movs	r2, #7
 80038ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000e010 	.word	0xe000e010

080038dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff29 	bl	800373c <__NVIC_SetPriorityGrouping>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003904:	f7ff ff3e 	bl	8003784 <__NVIC_GetPriorityGrouping>
 8003908:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7ff ff8e 	bl	8003830 <NVIC_EncodePriority>
 8003914:	4602      	mov	r2, r0
 8003916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff5d 	bl	80037dc <__NVIC_SetPriority>
}
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	4603      	mov	r3, r0
 8003932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff31 	bl	80037a0 <__NVIC_EnableIRQ>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ffa2 	bl	8003898 <SysTick_Config>
 8003954:	4603      	mov	r3, r0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d008      	beq.n	8003988 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2204      	movs	r2, #4
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e022      	b.n	80039ce <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 020e 	bic.w	r2, r2, #14
 8003996:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	f003 021c 	and.w	r2, r3, #28
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d005      	beq.n	80039fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2204      	movs	r2, #4
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e029      	b.n	8003a52 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 020e 	bic.w	r2, r2, #14
 8003a0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f003 021c 	and.w	r2, r3, #28
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a30:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
    }
  }
  return status;
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a6a:	b2db      	uxtb	r3, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a86:	e148      	b.n	8003d1a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	4013      	ands	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 813a 	beq.w	8003d14 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d005      	beq.n	8003ab8 <HAL_GPIO_Init+0x40>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d130      	bne.n	8003b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aee:	2201      	movs	r2, #1
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 0201 	and.w	r2, r3, #1
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d017      	beq.n	8003b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2203      	movs	r2, #3
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d123      	bne.n	8003baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	220f      	movs	r2, #15
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	08da      	lsrs	r2, r3, #3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3208      	adds	r2, #8
 8003ba4:	6939      	ldr	r1, [r7, #16]
 8003ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 0203 	and.w	r2, r3, #3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8094 	beq.w	8003d14 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bec:	4b52      	ldr	r3, [pc, #328]	; (8003d38 <HAL_GPIO_Init+0x2c0>)
 8003bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf0:	4a51      	ldr	r2, [pc, #324]	; (8003d38 <HAL_GPIO_Init+0x2c0>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bf8:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <HAL_GPIO_Init+0x2c0>)
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c04:	4a4d      	ldr	r2, [pc, #308]	; (8003d3c <HAL_GPIO_Init+0x2c4>)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	220f      	movs	r2, #15
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c2e:	d00d      	beq.n	8003c4c <HAL_GPIO_Init+0x1d4>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a43      	ldr	r2, [pc, #268]	; (8003d40 <HAL_GPIO_Init+0x2c8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d007      	beq.n	8003c48 <HAL_GPIO_Init+0x1d0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a42      	ldr	r2, [pc, #264]	; (8003d44 <HAL_GPIO_Init+0x2cc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_GPIO_Init+0x1cc>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e004      	b.n	8003c4e <HAL_GPIO_Init+0x1d6>
 8003c44:	2307      	movs	r3, #7
 8003c46:	e002      	b.n	8003c4e <HAL_GPIO_Init+0x1d6>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_GPIO_Init+0x1d6>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	f002 0203 	and.w	r2, r2, #3
 8003c54:	0092      	lsls	r2, r2, #2
 8003c56:	4093      	lsls	r3, r2
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c5e:	4937      	ldr	r1, [pc, #220]	; (8003d3c <HAL_GPIO_Init+0x2c4>)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	089b      	lsrs	r3, r3, #2
 8003c64:	3302      	adds	r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c6c:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <HAL_GPIO_Init+0x2d0>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c90:	4a2d      	ldr	r2, [pc, #180]	; (8003d48 <HAL_GPIO_Init+0x2d0>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c96:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <HAL_GPIO_Init+0x2d0>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cba:	4a23      	ldr	r2, [pc, #140]	; (8003d48 <HAL_GPIO_Init+0x2d0>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cc0:	4b21      	ldr	r3, [pc, #132]	; (8003d48 <HAL_GPIO_Init+0x2d0>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ce4:	4a18      	ldr	r2, [pc, #96]	; (8003d48 <HAL_GPIO_Init+0x2d0>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003cea:	4b17      	ldr	r3, [pc, #92]	; (8003d48 <HAL_GPIO_Init+0x2d0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d0e:	4a0e      	ldr	r2, [pc, #56]	; (8003d48 <HAL_GPIO_Init+0x2d0>)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3301      	adds	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f47f aeaf 	bne.w	8003a88 <HAL_GPIO_Init+0x10>
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	48000400 	.word	0x48000400
 8003d44:	48000800 	.word	0x48000800
 8003d48:	40010400 	.word	0x40010400

08003d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d5c:	787b      	ldrb	r3, [r7, #1]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d68:	e002      	b.n	8003d70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4013      	ands	r3, r2
 8003d94:	041a      	lsls	r2, r3, #16
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43d9      	mvns	r1, r3
 8003d9a:	887b      	ldrh	r3, [r7, #2]
 8003d9c:	400b      	ands	r3, r1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	619a      	str	r2, [r3, #24]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e081      	b.n	8003ec6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff f8fc 	bl	8002fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d107      	bne.n	8003e2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	e006      	b.n	8003e38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d104      	bne.n	8003e4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69d9      	ldr	r1, [r3, #28]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	461a      	mov	r2, r3
 8003edc:	460b      	mov	r3, r1
 8003ede:	817b      	strh	r3, [r7, #10]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8003ee4:	4b3a      	ldr	r3, [pc, #232]	; (8003fd0 <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d167      	bne.n	8003fc4 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_I2C_Master_Seq_Transmit_IT+0x32>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e061      	b.n	8003fc6 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2221      	movs	r2, #33	; 0x21
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2210      	movs	r2, #16
 8003f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	893a      	ldrh	r2, [r7, #8]
 8003f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a3a      	ldr	r2, [r7, #32]
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
 8003f36:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2bff      	cmp	r3, #255	; 0xff
 8003f40:	d906      	bls.n	8003f50 <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	e007      	b.n	8003f60 <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	2b11      	cmp	r3, #17
 8003f66:	d10e      	bne.n	8003f86 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2baa      	cmp	r3, #170	; 0xaa
 8003f6c:	d003      	beq.n	8003f76 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8003f74:	d101      	bne.n	8003f7a <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_I2C_Master_Seq_Transmit_IT+0xac>
 8003f7a:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	e00a      	b.n	8003f9c <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f001 fa94 	bl	80054b4 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2bff      	cmp	r3, #255	; 0xff
 8003f94:	d802      	bhi.n	8003f9c <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	8979      	ldrh	r1, [r7, #10]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f001 f988 	bl	80052c0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
       I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003fb8:	2101      	movs	r1, #1
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f001 f9b2 	bl	8005324 <I2C_Enable_IRQ>

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	80002000 	.word	0x80002000
 8003fd4:	080041bd 	.word	0x080041bd

08003fd8 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	817b      	strh	r3, [r7, #10]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8003fec:	4b3a      	ldr	r3, [pc, #232]	; (80040d8 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
 8003fee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d167      	bne.n	80040cc <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_I2C_Master_Seq_Receive_IT+0x32>
 8004006:	2302      	movs	r3, #2
 8004008:	e061      	b.n	80040ce <HAL_I2C_Master_Seq_Receive_IT+0xf6>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2222      	movs	r2, #34	; 0x22
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2210      	movs	r2, #16
 800401e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	893a      	ldrh	r2, [r7, #8]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a27      	ldr	r2, [pc, #156]	; (80040dc <HAL_I2C_Master_Seq_Receive_IT+0x104>)
 800403e:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	2bff      	cmp	r3, #255	; 0xff
 8004048:	d906      	bls.n	8004058 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	22ff      	movs	r2, #255	; 0xff
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e007      	b.n	8004068 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	2b12      	cmp	r3, #18
 800406e:	d10e      	bne.n	800408e <HAL_I2C_Master_Seq_Receive_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	2baa      	cmp	r3, #170	; 0xaa
 8004074:	d003      	beq.n	800407e <HAL_I2C_Master_Seq_Receive_IT+0xa6>
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800407c:	d101      	bne.n	8004082 <HAL_I2C_Master_Seq_Receive_IT+0xaa>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 8004082:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	e00a      	b.n	80040a4 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f001 fa10 	bl	80054b4 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2bff      	cmp	r3, #255	; 0xff
 800409c:	d802      	bhi.n	80040a4 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	8979      	ldrh	r1, [r7, #10]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f001 f904 	bl	80052c0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80040c0:	2102      	movs	r1, #2
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f001 f92e 	bl	8005324 <I2C_Enable_IRQ>

    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e000      	b.n	80040ce <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	80002400 	.word	0x80002400
 80040dc:	080041bd 	.word	0x080041bd

080040e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	68f9      	ldr	r1, [r7, #12]
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
  }
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
 8004148:	4613      	mov	r3, r2
 800414a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <I2C_Master_ISR_IT+0x1e>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e114      	b.n	8004404 <I2C_Master_ISR_IT+0x248>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d013      	beq.n	8004216 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2210      	movs	r2, #16
 8004200:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f043 0204 	orr.w	r2, r3, #4
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f001 f813 	bl	800523a <I2C_Flush_TXDR>
 8004214:	e0e1      	b.n	80043da <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d023      	beq.n	800426a <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01d      	beq.n	800426a <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f023 0304 	bic.w	r3, r3, #4
 8004234:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004268:	e0b7      	b.n	80043da <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01e      	beq.n	80042b4 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800427e:	2b00      	cmp	r3, #0
 8004280:	d018      	beq.n	80042b4 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	781a      	ldrb	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b2:	e092      	b.n	80043da <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	09db      	lsrs	r3, r3, #7
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05d      	beq.n	800437c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	099b      	lsrs	r3, r3, #6
 80042c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d057      	beq.n	800437c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d040      	beq.n	8004358 <I2C_Master_ISR_IT+0x19c>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d13c      	bne.n	8004358 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ea:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2bff      	cmp	r3, #255	; 0xff
 80042f4:	d90e      	bls.n	8004314 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	22ff      	movs	r2, #255	; 0xff
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004300:	b2da      	uxtb	r2, r3
 8004302:	8a79      	ldrh	r1, [r7, #18]
 8004304:	2300      	movs	r3, #0
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 ffd7 	bl	80052c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004312:	e032      	b.n	800437a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004326:	d00b      	beq.n	8004340 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432c:	b2da      	uxtb	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	8a79      	ldrh	r1, [r7, #18]
 8004334:	2000      	movs	r0, #0
 8004336:	9000      	str	r0, [sp, #0]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 ffc1 	bl	80052c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800433e:	e01c      	b.n	800437a <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	b2da      	uxtb	r2, r3
 8004346:	8a79      	ldrh	r1, [r7, #18]
 8004348:	2300      	movs	r3, #0
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 ffb5 	bl	80052c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004356:	e010      	b.n	800437a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004366:	d003      	beq.n	8004370 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fba9 	bl	8004ac0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800436e:	e034      	b.n	80043da <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fe6a 	bl	800504c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004378:	e02f      	b.n	80043da <I2C_Master_ISR_IT+0x21e>
 800437a:	e02e      	b.n	80043da <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	099b      	lsrs	r3, r3, #6
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d028      	beq.n	80043da <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004390:	2b00      	cmp	r3, #0
 8004392:	d022      	beq.n	80043da <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d119      	bne.n	80043d2 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ac:	d015      	beq.n	80043da <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043b6:	d108      	bne.n	80043ca <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	e007      	b.n	80043da <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fb78 	bl	8004ac0 <I2C_ITMasterSeqCplt>
 80043d0:	e003      	b.n	80043da <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043d2:	2140      	movs	r1, #64	; 0x40
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fe39 	bl	800504c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80043f2:	6979      	ldr	r1, [r7, #20]
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fbff 	bl	8004bf8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <I2C_Slave_ISR_IT+0x24>
 800442c:	2302      	movs	r3, #2
 800442e:	e0ec      	b.n	800460a <I2C_Slave_ISR_IT+0x1fe>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d009      	beq.n	8004458 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004450:	6939      	ldr	r1, [r7, #16]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fc9a 	bl	8004d8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d04d      	beq.n	8004500 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800446c:	2b00      	cmp	r3, #0
 800446e:	d047      	beq.n	8004500 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d128      	bne.n	80044cc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b28      	cmp	r3, #40	; 0x28
 8004484:	d108      	bne.n	8004498 <I2C_Slave_ISR_IT+0x8c>
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800448c:	d104      	bne.n	8004498 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800448e:	6939      	ldr	r1, [r7, #16]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fd85 	bl	8004fa0 <I2C_ITListenCplt>
 8004496:	e032      	b.n	80044fe <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b29      	cmp	r3, #41	; 0x29
 80044a2:	d10e      	bne.n	80044c2 <I2C_Slave_ISR_IT+0xb6>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044aa:	d00a      	beq.n	80044c2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2210      	movs	r2, #16
 80044b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fec0 	bl	800523a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fb3d 	bl	8004b3a <I2C_ITSlaveSeqCplt>
 80044c0:	e01d      	b.n	80044fe <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2210      	movs	r2, #16
 80044c8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80044ca:	e096      	b.n	80045fa <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2210      	movs	r2, #16
 80044d2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d8:	f043 0204 	orr.w	r2, r3, #4
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <I2C_Slave_ISR_IT+0xe4>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044ec:	f040 8085 	bne.w	80045fa <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f4:	4619      	mov	r1, r3
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fda8 	bl	800504c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80044fc:	e07d      	b.n	80045fa <I2C_Slave_ISR_IT+0x1ee>
 80044fe:	e07c      	b.n	80045fa <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d030      	beq.n	800456e <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004514:	2b00      	cmp	r3, #0
 8004516:	d02a      	beq.n	800456e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d14f      	bne.n	80045fe <I2C_Slave_ISR_IT+0x1f2>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004564:	d04b      	beq.n	80045fe <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fae7 	bl	8004b3a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800456c:	e047      	b.n	80045fe <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	08db      	lsrs	r3, r3, #3
 800457e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004586:	6939      	ldr	r1, [r7, #16]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fa15 	bl	80049b8 <I2C_ITAddrCplt>
 800458e:	e037      	b.n	8004600 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d031      	beq.n	8004600 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	085b      	lsrs	r3, r3, #1
 80045a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d02b      	beq.n	8004600 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	781a      	ldrb	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80045e2:	e00d      	b.n	8004600 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ea:	d002      	beq.n	80045f2 <I2C_Slave_ISR_IT+0x1e6>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 faa1 	bl	8004b3a <I2C_ITSlaveSeqCplt>
 80045f8:	e002      	b.n	8004600 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80045fe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b088      	sub	sp, #32
 8004616:	af02      	add	r7, sp, #8
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <I2C_Master_ISR_DMA+0x1a>
 8004628:	2302      	movs	r3, #2
 800462a:	e0e1      	b.n	80047f0 <I2C_Master_ISR_DMA+0x1de>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d017      	beq.n	8004670 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004648:	2b00      	cmp	r3, #0
 800464a:	d011      	beq.n	8004670 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2210      	movs	r2, #16
 8004652:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004658:	f043 0204 	orr.w	r2, r3, #4
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004660:	2120      	movs	r1, #32
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fe5e 	bl	8005324 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fde6 	bl	800523a <I2C_Flush_TXDR>
 800466e:	e0ba      	b.n	80047e6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	09db      	lsrs	r3, r3, #7
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d072      	beq.n	8004762 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004684:	2b00      	cmp	r3, #0
 8004686:	d06c      	beq.n	8004762 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004696:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04e      	beq.n	8004740 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ae:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2bff      	cmp	r3, #255	; 0xff
 80046b8:	d906      	bls.n	80046c8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	22ff      	movs	r2, #255	; 0xff
 80046be:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80046c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e010      	b.n	80046ea <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046da:	d003      	beq.n	80046e4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	e002      	b.n	80046ea <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80046e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046e8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	8a79      	ldrh	r1, [r7, #18]
 80046f2:	2300      	movs	r3, #0
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fde1 	bl	80052c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b22      	cmp	r3, #34	; 0x22
 800471a:	d108      	bne.n	800472e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800472a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800472c:	e05b      	b.n	80047e6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800473c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800473e:	e052      	b.n	80047e6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800474e:	d003      	beq.n	8004758 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f9b5 	bl	8004ac0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004756:	e046      	b.n	80047e6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004758:	2140      	movs	r1, #64	; 0x40
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fc76 	bl	800504c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004760:	e041      	b.n	80047e6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	099b      	lsrs	r3, r3, #6
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d029      	beq.n	80047c2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	099b      	lsrs	r3, r3, #6
 8004772:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004776:	2b00      	cmp	r3, #0
 8004778:	d023      	beq.n	80047c2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d119      	bne.n	80047b8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004792:	d027      	beq.n	80047e4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800479c:	d108      	bne.n	80047b0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ac:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80047ae:	e019      	b.n	80047e4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f985 	bl	8004ac0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80047b6:	e015      	b.n	80047e4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80047b8:	2140      	movs	r1, #64	; 0x40
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fc46 	bl	800504c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80047c0:	e010      	b.n	80047e4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fa0b 	bl	8004bf8 <I2C_ITMasterCplt>
 80047e2:	e000      	b.n	80047e6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80047e4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <I2C_Slave_ISR_DMA+0x24>
 8004818:	2302      	movs	r3, #2
 800481a:	e0c9      	b.n	80049b0 <I2C_Slave_ISR_DMA+0x1b8>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 faa4 	bl	8004d8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 809a 	beq.w	8004986 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 8093 	beq.w	8004986 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0b9b      	lsrs	r3, r3, #14
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	0bdb      	lsrs	r3, r3, #15
 8004870:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004874:	2b00      	cmp	r3, #0
 8004876:	d07f      	beq.n	8004978 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	0bdb      	lsrs	r3, r3, #15
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004898:	2301      	movs	r3, #1
 800489a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00d      	beq.n	80048c0 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	0b9b      	lsrs	r3, r3, #14
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80048bc:	2301      	movs	r3, #1
 80048be:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d128      	bne.n	8004918 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b28      	cmp	r3, #40	; 0x28
 80048d0:	d108      	bne.n	80048e4 <I2C_Slave_ISR_DMA+0xec>
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048d8:	d104      	bne.n	80048e4 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fb5f 	bl	8004fa0 <I2C_ITListenCplt>
 80048e2:	e048      	b.n	8004976 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b29      	cmp	r3, #41	; 0x29
 80048ee:	d10e      	bne.n	800490e <I2C_Slave_ISR_DMA+0x116>
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048f6:	d00a      	beq.n	800490e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2210      	movs	r2, #16
 80048fe:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fc9a 	bl	800523a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f917 	bl	8004b3a <I2C_ITSlaveSeqCplt>
 800490c:	e033      	b.n	8004976 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2210      	movs	r2, #16
 8004914:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004916:	e034      	b.n	8004982 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2210      	movs	r2, #16
 800491e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004924:	f043 0204 	orr.w	r2, r3, #4
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004932:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <I2C_Slave_ISR_DMA+0x14a>
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004940:	d11f      	bne.n	8004982 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004942:	7dfb      	ldrb	r3, [r7, #23]
 8004944:	2b21      	cmp	r3, #33	; 0x21
 8004946:	d002      	beq.n	800494e <I2C_Slave_ISR_DMA+0x156>
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b29      	cmp	r3, #41	; 0x29
 800494c:	d103      	bne.n	8004956 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2221      	movs	r2, #33	; 0x21
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
 8004954:	e008      	b.n	8004968 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b22      	cmp	r3, #34	; 0x22
 800495a:	d002      	beq.n	8004962 <I2C_Slave_ISR_DMA+0x16a>
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	2b2a      	cmp	r3, #42	; 0x2a
 8004960:	d102      	bne.n	8004968 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2222      	movs	r2, #34	; 0x22
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	4619      	mov	r1, r3
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fb6c 	bl	800504c <I2C_ITError>
      if (treatdmanack == 1U)
 8004974:	e005      	b.n	8004982 <I2C_Slave_ISR_DMA+0x18a>
 8004976:	e004      	b.n	8004982 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2210      	movs	r2, #16
 800497e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004980:	e011      	b.n	80049a6 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004982:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004984:	e00f      	b.n	80049a6 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	08db      	lsrs	r3, r3, #3
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	08db      	lsrs	r3, r3, #3
 8004996:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f809 	bl	80049b8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049ce:	2b28      	cmp	r3, #40	; 0x28
 80049d0:	d16a      	bne.n	8004aa8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80049f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a0c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d138      	bne.n	8004a88 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004a16:	897b      	ldrh	r3, [r7, #10]
 8004a18:	09db      	lsrs	r3, r3, #7
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	89bb      	ldrh	r3, [r7, #12]
 8004a1e:	4053      	eors	r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f003 0306 	and.w	r3, r3, #6
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d11c      	bne.n	8004a64 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d13b      	bne.n	8004ab8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a56:	89ba      	ldrh	r2, [r7, #12]
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fb6d 	bl	800413c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a62:	e029      	b.n	8004ab8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004a64:	893b      	ldrh	r3, [r7, #8]
 8004a66:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fcc3 	bl	80053f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a7a:	89ba      	ldrh	r2, [r7, #12]
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff fb5b 	bl	800413c <HAL_I2C_AddrCallback>
}
 8004a86:	e017      	b.n	8004ab8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fcb3 	bl	80053f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a9a:	89ba      	ldrh	r2, [r7, #12]
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff fb4b 	bl	800413c <HAL_I2C_AddrCallback>
}
 8004aa6:	e007      	b.n	8004ab8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2208      	movs	r2, #8
 8004aae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b21      	cmp	r3, #33	; 0x21
 8004ada:	d115      	bne.n	8004b08 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2211      	movs	r2, #17
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004af0:	2101      	movs	r1, #1
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fc80 	bl	80053f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fd fce7 	bl	80024d4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b06:	e014      	b.n	8004b32 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2212      	movs	r2, #18
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fc6a 	bl	80053f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fd fb97 	bl	8002260 <HAL_I2C_MasterRxCpltCallback>
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	0b9b      	lsrs	r3, r3, #14
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e00d      	b.n	8004b8c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	0bdb      	lsrs	r3, r3, #15
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b8a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b29      	cmp	r3, #41	; 0x29
 8004b96:	d112      	bne.n	8004bbe <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2228      	movs	r2, #40	; 0x28
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2221      	movs	r2, #33	; 0x21
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fc25 	bl	80053f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff faac 	bl	8004114 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bbc:	e017      	b.n	8004bee <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8004bc8:	d111      	bne.n	8004bee <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2228      	movs	r2, #40	; 0x28
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2222      	movs	r2, #34	; 0x22
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004bd8:	2102      	movs	r1, #2
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fc0c 	bl	80053f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff fa9d 	bl	8004128 <HAL_I2C_SlaveRxCpltCallback>
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b21      	cmp	r3, #33	; 0x21
 8004c18:	d107      	bne.n	8004c2a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fbeb 	bl	80053f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2211      	movs	r2, #17
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
 8004c28:	e00c      	b.n	8004c44 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b22      	cmp	r3, #34	; 0x22
 8004c34:	d106      	bne.n	8004c44 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c36:	2102      	movs	r1, #2
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fbdd 	bl	80053f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2212      	movs	r2, #18
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6859      	ldr	r1, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4b4d      	ldr	r3, [pc, #308]	; (8004d84 <I2C_ITMasterCplt+0x18c>)
 8004c50:	400b      	ands	r3, r1
 8004c52:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <I2C_ITMasterCplt+0x190>)
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d009      	beq.n	8004c80 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2210      	movs	r2, #16
 8004c72:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f043 0204 	orr.w	r2, r3, #4
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b60      	cmp	r3, #96	; 0x60
 8004c8a:	d10b      	bne.n	8004ca4 <I2C_ITMasterCplt+0xac>
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fac8 	bl	800523a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b60      	cmp	r3, #96	; 0x60
 8004cba:	d002      	beq.n	8004cc2 <I2C_ITMasterCplt+0xca>
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d006      	beq.n	8004cd0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f9bf 	bl	800504c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cce:	e054      	b.n	8004d7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b21      	cmp	r3, #33	; 0x21
 8004cda:	d124      	bne.n	8004d26 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d10b      	bne.n	8004d0e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fa30 	bl	800416c <HAL_I2C_MemTxCpltCallback>
}
 8004d0c:	e035      	b.n	8004d7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fd fbd8 	bl	80024d4 <HAL_I2C_MasterTxCpltCallback>
}
 8004d24:	e029      	b.n	8004d7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b22      	cmp	r3, #34	; 0x22
 8004d30:	d123      	bne.n	8004d7a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d10b      	bne.n	8004d64 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff fa0f 	bl	8004180 <HAL_I2C_MemRxCpltCallback>
}
 8004d62:	e00a      	b.n	8004d7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fd fa73 	bl	8002260 <HAL_I2C_MasterRxCpltCallback>
}
 8004d7a:	bf00      	nop
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	fe00e800 	.word	0xfe00e800
 8004d88:	ffff0000 	.word	0xffff0000

08004d8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2220      	movs	r2, #32
 8004db0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b21      	cmp	r3, #33	; 0x21
 8004db6:	d002      	beq.n	8004dbe <I2C_ITSlaveCplt+0x32>
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	2b29      	cmp	r3, #41	; 0x29
 8004dbc:	d108      	bne.n	8004dd0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004dbe:	f248 0101 	movw	r1, #32769	; 0x8001
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fb18 	bl	80053f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2221      	movs	r2, #33	; 0x21
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8004dce:	e00d      	b.n	8004dec <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b22      	cmp	r3, #34	; 0x22
 8004dd4:	d002      	beq.n	8004ddc <I2C_ITSlaveCplt+0x50>
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dda:	d107      	bne.n	8004dec <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ddc:	f248 0102 	movw	r1, #32770	; 0x8002
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fb09 	bl	80053f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2222      	movs	r2, #34	; 0x22
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <I2C_ITSlaveCplt+0x20c>)
 8004e08:	400b      	ands	r3, r1
 8004e0a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fa14 	bl	800523a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	0b9b      	lsrs	r3, r3, #14
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d013      	beq.n	8004e46 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e2c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d020      	beq.n	8004e78 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e44:	e018      	b.n	8004e78 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	0bdb      	lsrs	r3, r3, #15
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d012      	beq.n	8004e78 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d006      	beq.n	8004e78 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d020      	beq.n	8004ec6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0304 	bic.w	r3, r3, #4
 8004e8a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00c      	beq.n	8004ec6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	f043 0204 	orr.w	r2, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d010      	beq.n	8004f14 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f8a7 	bl	800504c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b28      	cmp	r3, #40	; 0x28
 8004f08:	d141      	bne.n	8004f8e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f847 	bl	8004fa0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f12:	e03c      	b.n	8004f8e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f1c:	d014      	beq.n	8004f48 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff fe0b 	bl	8004b3a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <I2C_ITSlaveCplt+0x210>)
 8004f28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff f909 	bl	8004158 <HAL_I2C_ListenCpltCallback>
}
 8004f46:	e022      	b.n	8004f8e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b22      	cmp	r3, #34	; 0x22
 8004f52:	d10e      	bne.n	8004f72 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff f8dc 	bl	8004128 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f70:	e00d      	b.n	8004f8e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff f8c3 	bl	8004114 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f8e:	bf00      	nop
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	fe00e800 	.word	0xfe00e800
 8004f9c:	ffff0000 	.word	0xffff0000

08004fa0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a26      	ldr	r2, [pc, #152]	; (8005048 <I2C_ITListenCplt+0xa8>)
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d022      	beq.n	800501e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d012      	beq.n	800501e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	f043 0204 	orr.w	r2, r3, #4
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800501e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f9e8 	bl	80053f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2210      	movs	r2, #16
 800502e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff f88d 	bl	8004158 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	ffff0000 	.word	0xffff0000

0800504c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a5d      	ldr	r2, [pc, #372]	; (80051e0 <I2C_ITError+0x194>)
 800506a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	2b28      	cmp	r3, #40	; 0x28
 8005082:	d005      	beq.n	8005090 <I2C_ITError+0x44>
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b29      	cmp	r3, #41	; 0x29
 8005088:	d002      	beq.n	8005090 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b2a      	cmp	r3, #42	; 0x2a
 800508e:	d10b      	bne.n	80050a8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005090:	2103      	movs	r1, #3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f9b0 	bl	80053f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2228      	movs	r2, #40	; 0x28
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a50      	ldr	r2, [pc, #320]	; (80051e4 <I2C_ITError+0x198>)
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34
 80050a6:	e011      	b.n	80050cc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050a8:	f248 0103 	movw	r1, #32771	; 0x8003
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f9a3 	bl	80053f8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b60      	cmp	r3, #96	; 0x60
 80050bc:	d003      	beq.n	80050c6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d039      	beq.n	800514e <I2C_ITError+0x102>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b11      	cmp	r3, #17
 80050de:	d002      	beq.n	80050e6 <I2C_ITError+0x9a>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b21      	cmp	r3, #33	; 0x21
 80050e4:	d133      	bne.n	800514e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f4:	d107      	bne.n	8005106 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005104:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe fca6 	bl	8003a5c <HAL_DMA_GetState>
 8005110:	4603      	mov	r3, r0
 8005112:	2b01      	cmp	r3, #1
 8005114:	d017      	beq.n	8005146 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	4a33      	ldr	r2, [pc, #204]	; (80051e8 <I2C_ITError+0x19c>)
 800511c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fc55 	bl	80039da <HAL_DMA_Abort_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d04d      	beq.n	80051d2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005144:	e045      	b.n	80051d2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f850 	bl	80051ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800514c:	e041      	b.n	80051d2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d039      	beq.n	80051ca <I2C_ITError+0x17e>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b12      	cmp	r3, #18
 800515a:	d002      	beq.n	8005162 <I2C_ITError+0x116>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b22      	cmp	r3, #34	; 0x22
 8005160:	d133      	bne.n	80051ca <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800516c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005170:	d107      	bne.n	8005182 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005180:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	4618      	mov	r0, r3
 8005188:	f7fe fc68 	bl	8003a5c <HAL_DMA_GetState>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d017      	beq.n	80051c2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <I2C_ITError+0x19c>)
 8005198:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe fc17 	bl	80039da <HAL_DMA_Abort_IT>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d011      	beq.n	80051d6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051bc:	4610      	mov	r0, r2
 80051be:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051c0:	e009      	b.n	80051d6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f812 	bl	80051ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051c8:	e005      	b.n	80051d6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f80e 	bl	80051ec <I2C_TreatErrorCallback>
  }
}
 80051d0:	e002      	b.n	80051d8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051d2:	bf00      	nop
 80051d4:	e000      	b.n	80051d8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051d6:	bf00      	nop
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	ffff0000 	.word	0xffff0000
 80051e4:	0800440d 	.word	0x0800440d
 80051e8:	08005283 	.word	0x08005283

080051ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b60      	cmp	r3, #96	; 0x60
 80051fe:	d10e      	bne.n	800521e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fe ffc6 	bl	80041a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800521c:	e009      	b.n	8005232 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7fe ffb1 	bl	8004194 <HAL_I2C_ErrorCallback>
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b02      	cmp	r3, #2
 800524e:	d103      	bne.n	8005258 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2200      	movs	r2, #0
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b01      	cmp	r3, #1
 8005264:	d007      	beq.n	8005276 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	619a      	str	r2, [r3, #24]
  }
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	2200      	movs	r2, #0
 800529e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ac:	2200      	movs	r2, #0
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff ff9b 	bl	80051ec <I2C_TreatErrorCallback>
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	817b      	strh	r3, [r7, #10]
 80052ce:	4613      	mov	r3, r2
 80052d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052d2:	897b      	ldrh	r3, [r7, #10]
 80052d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052d8:	7a7b      	ldrb	r3, [r7, #9]
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	0d5b      	lsrs	r3, r3, #21
 80052fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052fe:	4b08      	ldr	r3, [pc, #32]	; (8005320 <I2C_TransferConfig+0x60>)
 8005300:	430b      	orrs	r3, r1
 8005302:	43db      	mvns	r3, r3
 8005304:	ea02 0103 	and.w	r1, r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	03ff63ff 	.word	0x03ff63ff

08005324 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005338:	4a2d      	ldr	r2, [pc, #180]	; (80053f0 <I2C_Enable_IRQ+0xcc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005342:	4a2c      	ldr	r2, [pc, #176]	; (80053f4 <I2C_Enable_IRQ+0xd0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d11d      	bne.n	8005384 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005348:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800534c:	2b00      	cmp	r3, #0
 800534e:	da03      	bge.n	8005358 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005356:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005358:	887b      	ldrh	r3, [r7, #2]
 800535a:	2b10      	cmp	r3, #16
 800535c:	d103      	bne.n	8005366 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005364:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005366:	887b      	ldrh	r3, [r7, #2]
 8005368:	2b20      	cmp	r3, #32
 800536a:	d103      	bne.n	8005374 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005372:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	d12c      	bne.n	80053d4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005380:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005382:	e027      	b.n	80053d4 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005384:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005388:	2b00      	cmp	r3, #0
 800538a:	da03      	bge.n	8005394 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005392:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80053a4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80053a6:	887b      	ldrh	r3, [r7, #2]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80053b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80053b8:	887b      	ldrh	r3, [r7, #2]
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d103      	bne.n	80053c6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80053c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80053c6:	887b      	ldrh	r3, [r7, #2]
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d103      	bne.n	80053d4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f043 0320 	orr.w	r3, r3, #32
 80053d2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	601a      	str	r2, [r3, #0]
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	08004613 	.word	0x08004613
 80053f4:	080047f9 	.word	0x080047f9

080053f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005408:	887b      	ldrh	r3, [r7, #2]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00f      	beq.n	8005432 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005418:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005426:	2b28      	cmp	r3, #40	; 0x28
 8005428:	d003      	beq.n	8005432 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005430:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005432:	887b      	ldrh	r3, [r7, #2]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00f      	beq.n	800545c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005442:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005450:	2b28      	cmp	r3, #40	; 0x28
 8005452:	d003      	beq.n	800545c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800545a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800545c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005460:	2b00      	cmp	r3, #0
 8005462:	da03      	bge.n	800546c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800546a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800546c:	887b      	ldrh	r3, [r7, #2]
 800546e:	2b10      	cmp	r3, #16
 8005470:	d103      	bne.n	800547a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005478:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800547a:	887b      	ldrh	r3, [r7, #2]
 800547c:	2b20      	cmp	r3, #32
 800547e:	d103      	bne.n	8005488 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f043 0320 	orr.w	r3, r3, #32
 8005486:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005488:	887b      	ldrh	r3, [r7, #2]
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d103      	bne.n	8005496 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005494:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6819      	ldr	r1, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	43da      	mvns	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	400a      	ands	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
}
 80054a8:	bf00      	nop
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	2baa      	cmp	r3, #170	; 0xaa
 80054c2:	d103      	bne.n	80054cc <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80054ca:	e008      	b.n	80054de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80054d4:	d103      	bne.n	80054de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d138      	bne.n	8005572 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800550a:	2302      	movs	r3, #2
 800550c:	e032      	b.n	8005574 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2224      	movs	r2, #36	; 0x24
 800551a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800553c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6819      	ldr	r1, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e000      	b.n	8005574 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005572:	2302      	movs	r3, #2
  }
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b20      	cmp	r3, #32
 8005594:	d139      	bne.n	800560a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e033      	b.n	800560c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2224      	movs	r2, #36	; 0x24
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e000      	b.n	800560c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800560a:	2302      	movs	r3, #2
  }
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800561c:	4b04      	ldr	r3, [pc, #16]	; (8005630 <HAL_PWREx_GetVoltageRange+0x18>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005624:	4618      	mov	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40007000 	.word	0x40007000

08005634 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005642:	d130      	bne.n	80056a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005644:	4b23      	ldr	r3, [pc, #140]	; (80056d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800564c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005650:	d038      	beq.n	80056c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005652:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800565a:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800565c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005660:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005662:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2232      	movs	r2, #50	; 0x32
 8005668:	fb02 f303 	mul.w	r3, r2, r3
 800566c:	4a1b      	ldr	r2, [pc, #108]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	0c9b      	lsrs	r3, r3, #18
 8005674:	3301      	adds	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005678:	e002      	b.n	8005680 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3b01      	subs	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005680:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568c:	d102      	bne.n	8005694 <HAL_PWREx_ControlVoltageScaling+0x60>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1f2      	bne.n	800567a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005694:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800569c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a0:	d110      	bne.n	80056c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e00f      	b.n	80056c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b2:	d007      	beq.n	80056c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056b4:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056bc:	4a05      	ldr	r2, [pc, #20]	; (80056d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40007000 	.word	0x40007000
 80056d8:	200000e0 	.word	0x200000e0
 80056dc:	431bde83 	.word	0x431bde83

080056e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d102      	bne.n	80056f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f000 bc02 	b.w	8005ef8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056f4:	4b96      	ldr	r3, [pc, #600]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 030c 	and.w	r3, r3, #12
 80056fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056fe:	4b94      	ldr	r3, [pc, #592]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80e4 	beq.w	80058de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <HAL_RCC_OscConfig+0x4c>
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2b0c      	cmp	r3, #12
 8005720:	f040 808b 	bne.w	800583a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2b01      	cmp	r3, #1
 8005728:	f040 8087 	bne.w	800583a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800572c:	4b88      	ldr	r3, [pc, #544]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_RCC_OscConfig+0x64>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e3d9      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1a      	ldr	r2, [r3, #32]
 8005748:	4b81      	ldr	r3, [pc, #516]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <HAL_RCC_OscConfig+0x7e>
 8005754:	4b7e      	ldr	r3, [pc, #504]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800575c:	e005      	b.n	800576a <HAL_RCC_OscConfig+0x8a>
 800575e:	4b7c      	ldr	r3, [pc, #496]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800576a:	4293      	cmp	r3, r2
 800576c:	d223      	bcs.n	80057b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fd8c 	bl	8006290 <RCC_SetFlashLatencyFromMSIRange>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e3ba      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005782:	4b73      	ldr	r3, [pc, #460]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a72      	ldr	r2, [pc, #456]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005788:	f043 0308 	orr.w	r3, r3, #8
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	4b70      	ldr	r3, [pc, #448]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	496d      	ldr	r1, [pc, #436]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057a0:	4b6b      	ldr	r3, [pc, #428]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	4968      	ldr	r1, [pc, #416]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	604b      	str	r3, [r1, #4]
 80057b4:	e025      	b.n	8005802 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057b6:	4b66      	ldr	r3, [pc, #408]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a65      	ldr	r2, [pc, #404]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80057bc:	f043 0308 	orr.w	r3, r3, #8
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	4b63      	ldr	r3, [pc, #396]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	4960      	ldr	r1, [pc, #384]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057d4:	4b5e      	ldr	r3, [pc, #376]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	495b      	ldr	r1, [pc, #364]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fd4c 	bl	8006290 <RCC_SetFlashLatencyFromMSIRange>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e37a      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005802:	f000 fc81 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 8005806:	4602      	mov	r2, r0
 8005808:	4b51      	ldr	r3, [pc, #324]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	4950      	ldr	r1, [pc, #320]	; (8005954 <HAL_RCC_OscConfig+0x274>)
 8005814:	5ccb      	ldrb	r3, [r1, r3]
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	fa22 f303 	lsr.w	r3, r2, r3
 800581e:	4a4e      	ldr	r2, [pc, #312]	; (8005958 <HAL_RCC_OscConfig+0x278>)
 8005820:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005822:	4b4e      	ldr	r3, [pc, #312]	; (800595c <HAL_RCC_OscConfig+0x27c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7fd ff08 	bl	800363c <HAL_InitTick>
 800582c:	4603      	mov	r3, r0
 800582e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d052      	beq.n	80058dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	e35e      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d032      	beq.n	80058a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005842:	4b43      	ldr	r3, [pc, #268]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a42      	ldr	r2, [pc, #264]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800584e:	f7fd ff45 	bl	80036dc <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005856:	f7fd ff41 	bl	80036dc <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e347      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005868:	4b39      	ldr	r3, [pc, #228]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f0      	beq.n	8005856 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005874:	4b36      	ldr	r3, [pc, #216]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a35      	ldr	r2, [pc, #212]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 800587a:	f043 0308 	orr.w	r3, r3, #8
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	4b33      	ldr	r3, [pc, #204]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	4930      	ldr	r1, [pc, #192]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 800588e:	4313      	orrs	r3, r2
 8005890:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005892:	4b2f      	ldr	r3, [pc, #188]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	492b      	ldr	r1, [pc, #172]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	604b      	str	r3, [r1, #4]
 80058a6:	e01a      	b.n	80058de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058a8:	4b29      	ldr	r3, [pc, #164]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a28      	ldr	r2, [pc, #160]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058b4:	f7fd ff12 	bl	80036dc <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058bc:	f7fd ff0e 	bl	80036dc <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e314      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058ce:	4b20      	ldr	r3, [pc, #128]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f0      	bne.n	80058bc <HAL_RCC_OscConfig+0x1dc>
 80058da:	e000      	b.n	80058de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d073      	beq.n	80059d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d005      	beq.n	80058fc <HAL_RCC_OscConfig+0x21c>
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b0c      	cmp	r3, #12
 80058f4:	d10e      	bne.n	8005914 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d10b      	bne.n	8005914 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058fc:	4b14      	ldr	r3, [pc, #80]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d063      	beq.n	80059d0 <HAL_RCC_OscConfig+0x2f0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d15f      	bne.n	80059d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e2f1      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800591c:	d106      	bne.n	800592c <HAL_RCC_OscConfig+0x24c>
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a0b      	ldr	r2, [pc, #44]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e025      	b.n	8005978 <HAL_RCC_OscConfig+0x298>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005934:	d114      	bne.n	8005960 <HAL_RCC_OscConfig+0x280>
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a05      	ldr	r2, [pc, #20]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 800593c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	4b03      	ldr	r3, [pc, #12]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a02      	ldr	r2, [pc, #8]	; (8005950 <HAL_RCC_OscConfig+0x270>)
 8005948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e013      	b.n	8005978 <HAL_RCC_OscConfig+0x298>
 8005950:	40021000 	.word	0x40021000
 8005954:	08010470 	.word	0x08010470
 8005958:	200000e0 	.word	0x200000e0
 800595c:	200000e4 	.word	0x200000e4
 8005960:	4ba0      	ldr	r3, [pc, #640]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a9f      	ldr	r2, [pc, #636]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	4b9d      	ldr	r3, [pc, #628]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a9c      	ldr	r2, [pc, #624]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d013      	beq.n	80059a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fd feac 	bl	80036dc <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005988:	f7fd fea8 	bl	80036dc <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	; 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e2ae      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800599a:	4b92      	ldr	r3, [pc, #584]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0x2a8>
 80059a6:	e014      	b.n	80059d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a8:	f7fd fe98 	bl	80036dc <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b0:	f7fd fe94 	bl	80036dc <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b64      	cmp	r3, #100	; 0x64
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e29a      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059c2:	4b88      	ldr	r3, [pc, #544]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0x2d0>
 80059ce:	e000      	b.n	80059d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d060      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d005      	beq.n	80059f0 <HAL_RCC_OscConfig+0x310>
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d119      	bne.n	8005a1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d116      	bne.n	8005a1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059f0:	4b7c      	ldr	r3, [pc, #496]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_RCC_OscConfig+0x328>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e277      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a08:	4b76      	ldr	r3, [pc, #472]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	061b      	lsls	r3, r3, #24
 8005a16:	4973      	ldr	r1, [pc, #460]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a1c:	e040      	b.n	8005aa0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d023      	beq.n	8005a6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a26:	4b6f      	ldr	r3, [pc, #444]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a6e      	ldr	r2, [pc, #440]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fd fe53 	bl	80036dc <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a3a:	f7fd fe4f 	bl	80036dc <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e255      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a4c:	4b65      	ldr	r3, [pc, #404]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a58:	4b62      	ldr	r3, [pc, #392]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	061b      	lsls	r3, r3, #24
 8005a66:	495f      	ldr	r1, [pc, #380]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	604b      	str	r3, [r1, #4]
 8005a6c:	e018      	b.n	8005aa0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a6e:	4b5d      	ldr	r3, [pc, #372]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a5c      	ldr	r2, [pc, #368]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7a:	f7fd fe2f 	bl	80036dc <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a82:	f7fd fe2b 	bl	80036dc <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e231      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a94:	4b53      	ldr	r3, [pc, #332]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f0      	bne.n	8005a82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d03c      	beq.n	8005b26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01c      	beq.n	8005aee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ab4:	4b4b      	ldr	r3, [pc, #300]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aba:	4a4a      	ldr	r2, [pc, #296]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005abc:	f043 0301 	orr.w	r3, r3, #1
 8005ac0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac4:	f7fd fe0a 	bl	80036dc <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005acc:	f7fd fe06 	bl	80036dc <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e20c      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ade:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0ef      	beq.n	8005acc <HAL_RCC_OscConfig+0x3ec>
 8005aec:	e01b      	b.n	8005b26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aee:	4b3d      	ldr	r3, [pc, #244]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005af4:	4a3b      	ldr	r2, [pc, #236]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afe:	f7fd fded 	bl	80036dc <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b06:	f7fd fde9 	bl	80036dc <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e1ef      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b18:	4b32      	ldr	r3, [pc, #200]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1ef      	bne.n	8005b06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80a6 	beq.w	8005c80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b34:	2300      	movs	r3, #0
 8005b36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b38:	4b2a      	ldr	r3, [pc, #168]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10d      	bne.n	8005b60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b44:	4b27      	ldr	r3, [pc, #156]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b48:	4a26      	ldr	r2, [pc, #152]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8005b50:	4b24      	ldr	r3, [pc, #144]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b60:	4b21      	ldr	r3, [pc, #132]	; (8005be8 <HAL_RCC_OscConfig+0x508>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d118      	bne.n	8005b9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b6c:	4b1e      	ldr	r3, [pc, #120]	; (8005be8 <HAL_RCC_OscConfig+0x508>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1d      	ldr	r2, [pc, #116]	; (8005be8 <HAL_RCC_OscConfig+0x508>)
 8005b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b78:	f7fd fdb0 	bl	80036dc <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b80:	f7fd fdac 	bl	80036dc <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e1b2      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b92:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <HAL_RCC_OscConfig+0x508>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d108      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x4d8>
 8005ba6:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bac:	4a0d      	ldr	r2, [pc, #52]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bb6:	e029      	b.n	8005c0c <HAL_RCC_OscConfig+0x52c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b05      	cmp	r3, #5
 8005bbe:	d115      	bne.n	8005bec <HAL_RCC_OscConfig+0x50c>
 8005bc0:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc6:	4a07      	ldr	r2, [pc, #28]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005bc8:	f043 0304 	orr.w	r3, r3, #4
 8005bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bd0:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	4a03      	ldr	r2, [pc, #12]	; (8005be4 <HAL_RCC_OscConfig+0x504>)
 8005bd8:	f043 0301 	orr.w	r3, r3, #1
 8005bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005be0:	e014      	b.n	8005c0c <HAL_RCC_OscConfig+0x52c>
 8005be2:	bf00      	nop
 8005be4:	40021000 	.word	0x40021000
 8005be8:	40007000 	.word	0x40007000
 8005bec:	4b9a      	ldr	r3, [pc, #616]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf2:	4a99      	ldr	r2, [pc, #612]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bfc:	4b96      	ldr	r3, [pc, #600]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c02:	4a95      	ldr	r2, [pc, #596]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005c04:	f023 0304 	bic.w	r3, r3, #4
 8005c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d016      	beq.n	8005c42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c14:	f7fd fd62 	bl	80036dc <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c1a:	e00a      	b.n	8005c32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1c:	f7fd fd5e 	bl	80036dc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e162      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c32:	4b89      	ldr	r3, [pc, #548]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ed      	beq.n	8005c1c <HAL_RCC_OscConfig+0x53c>
 8005c40:	e015      	b.n	8005c6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c42:	f7fd fd4b 	bl	80036dc <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c48:	e00a      	b.n	8005c60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4a:	f7fd fd47 	bl	80036dc <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e14b      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c60:	4b7d      	ldr	r3, [pc, #500]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1ed      	bne.n	8005c4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c6e:	7ffb      	ldrb	r3, [r7, #31]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d105      	bne.n	8005c80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c74:	4b78      	ldr	r3, [pc, #480]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c78:	4a77      	ldr	r2, [pc, #476]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d03c      	beq.n	8005d06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01c      	beq.n	8005cce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c94:	4b70      	ldr	r3, [pc, #448]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c9a:	4a6f      	ldr	r2, [pc, #444]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca4:	f7fd fd1a 	bl	80036dc <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cac:	f7fd fd16 	bl	80036dc <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e11c      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cbe:	4b66      	ldr	r3, [pc, #408]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0ef      	beq.n	8005cac <HAL_RCC_OscConfig+0x5cc>
 8005ccc:	e01b      	b.n	8005d06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cce:	4b62      	ldr	r3, [pc, #392]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cd4:	4a60      	ldr	r2, [pc, #384]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005cd6:	f023 0301 	bic.w	r3, r3, #1
 8005cda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cde:	f7fd fcfd 	bl	80036dc <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ce6:	f7fd fcf9 	bl	80036dc <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e0ff      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cf8:	4b57      	ldr	r3, [pc, #348]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1ef      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80f3 	beq.w	8005ef6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	f040 80c9 	bne.w	8005eac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d1a:	4b4f      	ldr	r3, [pc, #316]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f003 0203 	and.w	r2, r3, #3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d12c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d123      	bne.n	8005d88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d11b      	bne.n	8005d88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d113      	bne.n	8005d88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d109      	bne.n	8005d88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	3b01      	subs	r3, #1
 8005d82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d06b      	beq.n	8005e60 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	2b0c      	cmp	r3, #12
 8005d8c:	d062      	beq.n	8005e54 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d8e:	4b32      	ldr	r3, [pc, #200]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e0ac      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d9e:	4b2e      	ldr	r3, [pc, #184]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2d      	ldr	r2, [pc, #180]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005da8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005daa:	f7fd fc97 	bl	80036dc <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db2:	f7fd fc93 	bl	80036dc <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e099      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc4:	4b24      	ldr	r3, [pc, #144]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f0      	bne.n	8005db2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dd0:	4b21      	ldr	r3, [pc, #132]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <HAL_RCC_OscConfig+0x77c>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005de0:	3a01      	subs	r2, #1
 8005de2:	0112      	lsls	r2, r2, #4
 8005de4:	4311      	orrs	r1, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dea:	0212      	lsls	r2, r2, #8
 8005dec:	4311      	orrs	r1, r2
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005df2:	0852      	lsrs	r2, r2, #1
 8005df4:	3a01      	subs	r2, #1
 8005df6:	0552      	lsls	r2, r2, #21
 8005df8:	4311      	orrs	r1, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005dfe:	0852      	lsrs	r2, r2, #1
 8005e00:	3a01      	subs	r2, #1
 8005e02:	0652      	lsls	r2, r2, #25
 8005e04:	4311      	orrs	r1, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e0a:	06d2      	lsls	r2, r2, #27
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	4912      	ldr	r1, [pc, #72]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e14:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a0f      	ldr	r2, [pc, #60]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e20:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e2c:	f7fd fc56 	bl	80036dc <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e34:	f7fd fc52 	bl	80036dc <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e058      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e46:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <HAL_RCC_OscConfig+0x778>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e52:	e050      	b.n	8005ef6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e04f      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e60:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d144      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e6c:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a23      	ldr	r2, [pc, #140]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e78:	4b21      	ldr	r3, [pc, #132]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	4a20      	ldr	r2, [pc, #128]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e84:	f7fd fc2a 	bl	80036dc <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e8c:	f7fd fc26 	bl	80036dc <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e02c      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e9e:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCC_OscConfig+0x7ac>
 8005eaa:	e024      	b.n	8005ef6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b0c      	cmp	r3, #12
 8005eb0:	d01f      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb2:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebe:	f7fd fc0d 	bl	80036dc <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec6:	f7fd fc09 	bl	80036dc <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e00f      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ed8:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f0      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005ee4:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	4905      	ldr	r1, [pc, #20]	; (8005f00 <HAL_RCC_OscConfig+0x820>)
 8005eea:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <HAL_RCC_OscConfig+0x824>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	60cb      	str	r3, [r1, #12]
 8005ef0:	e001      	b.n	8005ef6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40021000 	.word	0x40021000
 8005f04:	feeefffc 	.word	0xfeeefffc

08005f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0e7      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f1c:	4b75      	ldr	r3, [pc, #468]	; (80060f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d910      	bls.n	8005f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2a:	4b72      	ldr	r3, [pc, #456]	; (80060f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 0207 	bic.w	r2, r3, #7
 8005f32:	4970      	ldr	r1, [pc, #448]	; (80060f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b6e      	ldr	r3, [pc, #440]	; (80060f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0cf      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d010      	beq.n	8005f7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	4b66      	ldr	r3, [pc, #408]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d908      	bls.n	8005f7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f68:	4b63      	ldr	r3, [pc, #396]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	4960      	ldr	r1, [pc, #384]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d04c      	beq.n	8006020 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d107      	bne.n	8005f9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f8e:	4b5a      	ldr	r3, [pc, #360]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d121      	bne.n	8005fde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e0a6      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d107      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fa6:	4b54      	ldr	r3, [pc, #336]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d115      	bne.n	8005fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e09a      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d107      	bne.n	8005fce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fbe:	4b4e      	ldr	r3, [pc, #312]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e08e      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fce:	4b4a      	ldr	r3, [pc, #296]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e086      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fde:	4b46      	ldr	r3, [pc, #280]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f023 0203 	bic.w	r2, r3, #3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4943      	ldr	r1, [pc, #268]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff0:	f7fd fb74 	bl	80036dc <HAL_GetTick>
 8005ff4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff8:	f7fd fb70 	bl	80036dc <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f241 3288 	movw	r2, #5000	; 0x1388
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e06e      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600e:	4b3a      	ldr	r3, [pc, #232]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 020c 	and.w	r2, r3, #12
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	429a      	cmp	r2, r3
 800601e:	d1eb      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	4b31      	ldr	r3, [pc, #196]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006038:	429a      	cmp	r2, r3
 800603a:	d208      	bcs.n	800604e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800603c:	4b2e      	ldr	r3, [pc, #184]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	492b      	ldr	r1, [pc, #172]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 800604a:	4313      	orrs	r3, r2
 800604c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800604e:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d210      	bcs.n	800607e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605c:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <HAL_RCC_ClockConfig+0x1ec>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f023 0207 	bic.w	r2, r3, #7
 8006064:	4923      	ldr	r1, [pc, #140]	; (80060f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	4313      	orrs	r3, r2
 800606a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800606c:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <HAL_RCC_ClockConfig+0x1ec>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d001      	beq.n	800607e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e036      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b00      	cmp	r3, #0
 8006088:	d008      	beq.n	800609c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800608a:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	4918      	ldr	r1, [pc, #96]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006098:	4313      	orrs	r3, r2
 800609a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d009      	beq.n	80060bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060a8:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4910      	ldr	r1, [pc, #64]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060bc:	f000 f824 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 80060c0:	4602      	mov	r2, r0
 80060c2:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <HAL_RCC_ClockConfig+0x1f0>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	091b      	lsrs	r3, r3, #4
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	490b      	ldr	r1, [pc, #44]	; (80060fc <HAL_RCC_ClockConfig+0x1f4>)
 80060ce:	5ccb      	ldrb	r3, [r1, r3]
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	fa22 f303 	lsr.w	r3, r2, r3
 80060d8:	4a09      	ldr	r2, [pc, #36]	; (8006100 <HAL_RCC_ClockConfig+0x1f8>)
 80060da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <HAL_RCC_ClockConfig+0x1fc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fd faab 	bl	800363c <HAL_InitTick>
 80060e6:	4603      	mov	r3, r0
 80060e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80060ea:	7afb      	ldrb	r3, [r7, #11]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40022000 	.word	0x40022000
 80060f8:	40021000 	.word	0x40021000
 80060fc:	08010470 	.word	0x08010470
 8006100:	200000e0 	.word	0x200000e0
 8006104:	200000e4 	.word	0x200000e4

08006108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006108:	b480      	push	{r7}
 800610a:	b089      	sub	sp, #36	; 0x24
 800610c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	2300      	movs	r3, #0
 8006114:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006116:	4b3e      	ldr	r3, [pc, #248]	; (8006210 <HAL_RCC_GetSysClockFreq+0x108>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 030c 	and.w	r3, r3, #12
 800611e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006120:	4b3b      	ldr	r3, [pc, #236]	; (8006210 <HAL_RCC_GetSysClockFreq+0x108>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <HAL_RCC_GetSysClockFreq+0x34>
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b0c      	cmp	r3, #12
 8006134:	d121      	bne.n	800617a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d11e      	bne.n	800617a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800613c:	4b34      	ldr	r3, [pc, #208]	; (8006210 <HAL_RCC_GetSysClockFreq+0x108>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d107      	bne.n	8006158 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006148:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_RCC_GetSysClockFreq+0x108>)
 800614a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800614e:	0a1b      	lsrs	r3, r3, #8
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	61fb      	str	r3, [r7, #28]
 8006156:	e005      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006158:	4b2d      	ldr	r3, [pc, #180]	; (8006210 <HAL_RCC_GetSysClockFreq+0x108>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	091b      	lsrs	r3, r3, #4
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006164:	4a2b      	ldr	r2, [pc, #172]	; (8006214 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10d      	bne.n	8006190 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006178:	e00a      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b04      	cmp	r3, #4
 800617e:	d102      	bne.n	8006186 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006180:	4b25      	ldr	r3, [pc, #148]	; (8006218 <HAL_RCC_GetSysClockFreq+0x110>)
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e004      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d101      	bne.n	8006190 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800618c:	4b23      	ldr	r3, [pc, #140]	; (800621c <HAL_RCC_GetSysClockFreq+0x114>)
 800618e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2b0c      	cmp	r3, #12
 8006194:	d134      	bne.n	8006200 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006196:	4b1e      	ldr	r3, [pc, #120]	; (8006210 <HAL_RCC_GetSysClockFreq+0x108>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d003      	beq.n	80061ae <HAL_RCC_GetSysClockFreq+0xa6>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d003      	beq.n	80061b4 <HAL_RCC_GetSysClockFreq+0xac>
 80061ac:	e005      	b.n	80061ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80061ae:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <HAL_RCC_GetSysClockFreq+0x110>)
 80061b0:	617b      	str	r3, [r7, #20]
      break;
 80061b2:	e005      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80061b4:	4b19      	ldr	r3, [pc, #100]	; (800621c <HAL_RCC_GetSysClockFreq+0x114>)
 80061b6:	617b      	str	r3, [r7, #20]
      break;
 80061b8:	e002      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	617b      	str	r3, [r7, #20]
      break;
 80061be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061c0:	4b13      	ldr	r3, [pc, #76]	; (8006210 <HAL_RCC_GetSysClockFreq+0x108>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	3301      	adds	r3, #1
 80061cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <HAL_RCC_GetSysClockFreq+0x108>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	fb03 f202 	mul.w	r2, r3, r2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061e6:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <HAL_RCC_GetSysClockFreq+0x108>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	0e5b      	lsrs	r3, r3, #25
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	3301      	adds	r3, #1
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006200:	69bb      	ldr	r3, [r7, #24]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3724      	adds	r7, #36	; 0x24
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40021000 	.word	0x40021000
 8006214:	08010488 	.word	0x08010488
 8006218:	00f42400 	.word	0x00f42400
 800621c:	007a1200 	.word	0x007a1200

08006220 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006224:	4b03      	ldr	r3, [pc, #12]	; (8006234 <HAL_RCC_GetHCLKFreq+0x14>)
 8006226:	681b      	ldr	r3, [r3, #0]
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	200000e0 	.word	0x200000e0

08006238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800623c:	f7ff fff0 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b06      	ldr	r3, [pc, #24]	; (800625c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4904      	ldr	r1, [pc, #16]	; (8006260 <HAL_RCC_GetPCLK1Freq+0x28>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006258:	4618      	mov	r0, r3
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000
 8006260:	08010480 	.word	0x08010480

08006264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006268:	f7ff ffda 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 800626c:	4602      	mov	r2, r0
 800626e:	4b06      	ldr	r3, [pc, #24]	; (8006288 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	0adb      	lsrs	r3, r3, #11
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	4904      	ldr	r1, [pc, #16]	; (800628c <HAL_RCC_GetPCLK2Freq+0x28>)
 800627a:	5ccb      	ldrb	r3, [r1, r3]
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40021000 	.word	0x40021000
 800628c:	08010480 	.word	0x08010480

08006290 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006298:	2300      	movs	r3, #0
 800629a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800629c:	4b2a      	ldr	r3, [pc, #168]	; (8006348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800629e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80062a8:	f7ff f9b6 	bl	8005618 <HAL_PWREx_GetVoltageRange>
 80062ac:	6178      	str	r0, [r7, #20]
 80062ae:	e014      	b.n	80062da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80062b0:	4b25      	ldr	r3, [pc, #148]	; (8006348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b4:	4a24      	ldr	r2, [pc, #144]	; (8006348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ba:	6593      	str	r3, [r2, #88]	; 0x58
 80062bc:	4b22      	ldr	r3, [pc, #136]	; (8006348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80062c8:	f7ff f9a6 	bl	8005618 <HAL_PWREx_GetVoltageRange>
 80062cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80062ce:	4b1e      	ldr	r3, [pc, #120]	; (8006348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d2:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e0:	d10b      	bne.n	80062fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b80      	cmp	r3, #128	; 0x80
 80062e6:	d919      	bls.n	800631c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2ba0      	cmp	r3, #160	; 0xa0
 80062ec:	d902      	bls.n	80062f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062ee:	2302      	movs	r3, #2
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	e013      	b.n	800631c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062f4:	2301      	movs	r3, #1
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	e010      	b.n	800631c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d902      	bls.n	8006306 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006300:	2303      	movs	r3, #3
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	e00a      	b.n	800631c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b80      	cmp	r3, #128	; 0x80
 800630a:	d102      	bne.n	8006312 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800630c:	2302      	movs	r3, #2
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	e004      	b.n	800631c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b70      	cmp	r3, #112	; 0x70
 8006316:	d101      	bne.n	800631c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006318:	2301      	movs	r3, #1
 800631a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800631c:	4b0b      	ldr	r3, [pc, #44]	; (800634c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f023 0207 	bic.w	r2, r3, #7
 8006324:	4909      	ldr	r1, [pc, #36]	; (800634c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	429a      	cmp	r2, r3
 8006338:	d001      	beq.n	800633e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40021000 	.word	0x40021000
 800634c:	40022000 	.word	0x40022000

08006350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006358:	2300      	movs	r3, #0
 800635a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800635c:	2300      	movs	r3, #0
 800635e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006368:	2b00      	cmp	r3, #0
 800636a:	d031      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006370:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006374:	d01a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006376:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800637a:	d814      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006380:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006384:	d10f      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006386:	4b5d      	ldr	r3, [pc, #372]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	4a5c      	ldr	r2, [pc, #368]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800638c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006390:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006392:	e00c      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3304      	adds	r3, #4
 8006398:	2100      	movs	r1, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f9ce 	bl	800673c <RCCEx_PLLSAI1_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80063a4:	e003      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	74fb      	strb	r3, [r7, #19]
      break;
 80063aa:	e000      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80063ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ae:	7cfb      	ldrb	r3, [r7, #19]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063b4:	4b51      	ldr	r3, [pc, #324]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	494e      	ldr	r1, [pc, #312]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80063ca:	e001      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063cc:	7cfb      	ldrb	r3, [r7, #19]
 80063ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 809e 	beq.w	800651a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063de:	2300      	movs	r3, #0
 80063e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063e2:	4b46      	ldr	r3, [pc, #280]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00d      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f8:	4b40      	ldr	r3, [pc, #256]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	4a3f      	ldr	r2, [pc, #252]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006402:	6593      	str	r3, [r2, #88]	; 0x58
 8006404:	4b3d      	ldr	r3, [pc, #244]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640c:	60bb      	str	r3, [r7, #8]
 800640e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006410:	2301      	movs	r3, #1
 8006412:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006414:	4b3a      	ldr	r3, [pc, #232]	; (8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a39      	ldr	r2, [pc, #228]	; (8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800641a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006420:	f7fd f95c 	bl	80036dc <HAL_GetTick>
 8006424:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006426:	e009      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006428:	f7fd f958 	bl	80036dc <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d902      	bls.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	74fb      	strb	r3, [r7, #19]
        break;
 800643a:	e005      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800643c:	4b30      	ldr	r3, [pc, #192]	; (8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0ef      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006448:	7cfb      	ldrb	r3, [r7, #19]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d15a      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800644e:	4b2b      	ldr	r3, [pc, #172]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006458:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01e      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	429a      	cmp	r2, r3
 8006468:	d019      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800646a:	4b24      	ldr	r3, [pc, #144]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800646c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006474:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006476:	4b21      	ldr	r3, [pc, #132]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647c:	4a1f      	ldr	r2, [pc, #124]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800647e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006486:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648c:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800648e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006496:	4a19      	ldr	r2, [pc, #100]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d016      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a8:	f7fd f918 	bl	80036dc <HAL_GetTick>
 80064ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ae:	e00b      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b0:	f7fd f914 	bl	80036dc <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80064be:	4293      	cmp	r3, r2
 80064c0:	d902      	bls.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	74fb      	strb	r3, [r7, #19]
            break;
 80064c6:	e006      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0ec      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064dc:	4b07      	ldr	r3, [pc, #28]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ea:	4904      	ldr	r1, [pc, #16]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064f2:	e009      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064f4:	7cfb      	ldrb	r3, [r7, #19]
 80064f6:	74bb      	strb	r3, [r7, #18]
 80064f8:	e006      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80064fa:	bf00      	nop
 80064fc:	40021000 	.word	0x40021000
 8006500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	7cfb      	ldrb	r3, [r7, #19]
 8006506:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006508:	7c7b      	ldrb	r3, [r7, #17]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d105      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800650e:	4b8a      	ldr	r3, [pc, #552]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006512:	4a89      	ldr	r2, [pc, #548]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006518:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006526:	4b84      	ldr	r3, [pc, #528]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f023 0203 	bic.w	r2, r3, #3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	4980      	ldr	r1, [pc, #512]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006548:	4b7b      	ldr	r3, [pc, #492]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f023 020c 	bic.w	r2, r3, #12
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	4978      	ldr	r1, [pc, #480]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800656a:	4b73      	ldr	r3, [pc, #460]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006570:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	496f      	ldr	r1, [pc, #444]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800658c:	4b6a      	ldr	r3, [pc, #424]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006592:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659a:	4967      	ldr	r1, [pc, #412]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065ae:	4b62      	ldr	r3, [pc, #392]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	495e      	ldr	r1, [pc, #376]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065d0:	4b59      	ldr	r3, [pc, #356]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065de:	4956      	ldr	r1, [pc, #344]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065f2:	4b51      	ldr	r3, [pc, #324]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	494d      	ldr	r1, [pc, #308]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d028      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006614:	4b48      	ldr	r3, [pc, #288]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	4945      	ldr	r1, [pc, #276]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006632:	d106      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006634:	4b40      	ldr	r3, [pc, #256]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4a3f      	ldr	r2, [pc, #252]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800663a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800663e:	60d3      	str	r3, [r2, #12]
 8006640:	e011      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800664a:	d10c      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	2101      	movs	r1, #1
 8006652:	4618      	mov	r0, r3
 8006654:	f000 f872 	bl	800673c <RCCEx_PLLSAI1_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800665c:	7cfb      	ldrb	r3, [r7, #19]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d028      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006672:	4b31      	ldr	r3, [pc, #196]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006680:	492d      	ldr	r1, [pc, #180]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006690:	d106      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006692:	4b29      	ldr	r3, [pc, #164]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	4a28      	ldr	r2, [pc, #160]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800669c:	60d3      	str	r3, [r2, #12]
 800669e:	e011      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3304      	adds	r3, #4
 80066ae:	2101      	movs	r1, #1
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 f843 	bl	800673c <RCCEx_PLLSAI1_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ba:	7cfb      	ldrb	r3, [r7, #19]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80066c0:	7cfb      	ldrb	r3, [r7, #19]
 80066c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01c      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066d0:	4b19      	ldr	r3, [pc, #100]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066de:	4916      	ldr	r1, [pc, #88]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ee:	d10c      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3304      	adds	r3, #4
 80066f4:	2102      	movs	r1, #2
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f820 	bl	800673c <RCCEx_PLLSAI1_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006700:	7cfb      	ldrb	r3, [r7, #19]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006706:	7cfb      	ldrb	r3, [r7, #19]
 8006708:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006724:	4904      	ldr	r1, [pc, #16]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800672c:	7cbb      	ldrb	r3, [r7, #18]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000

0800673c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800674a:	4b74      	ldr	r3, [pc, #464]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d018      	beq.n	8006788 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006756:	4b71      	ldr	r3, [pc, #452]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 0203 	and.w	r2, r3, #3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d10d      	bne.n	8006782 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
       ||
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800676e:	4b6b      	ldr	r3, [pc, #428]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	091b      	lsrs	r3, r3, #4
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
       ||
 800677e:	429a      	cmp	r2, r3
 8006780:	d047      	beq.n	8006812 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	73fb      	strb	r3, [r7, #15]
 8006786:	e044      	b.n	8006812 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b03      	cmp	r3, #3
 800678e:	d018      	beq.n	80067c2 <RCCEx_PLLSAI1_Config+0x86>
 8006790:	2b03      	cmp	r3, #3
 8006792:	d825      	bhi.n	80067e0 <RCCEx_PLLSAI1_Config+0xa4>
 8006794:	2b01      	cmp	r3, #1
 8006796:	d002      	beq.n	800679e <RCCEx_PLLSAI1_Config+0x62>
 8006798:	2b02      	cmp	r3, #2
 800679a:	d009      	beq.n	80067b0 <RCCEx_PLLSAI1_Config+0x74>
 800679c:	e020      	b.n	80067e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800679e:	4b5f      	ldr	r3, [pc, #380]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d11d      	bne.n	80067e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067ae:	e01a      	b.n	80067e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067b0:	4b5a      	ldr	r3, [pc, #360]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d116      	bne.n	80067ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067c0:	e013      	b.n	80067ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067c2:	4b56      	ldr	r3, [pc, #344]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10f      	bne.n	80067ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067ce:	4b53      	ldr	r3, [pc, #332]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d109      	bne.n	80067ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067de:	e006      	b.n	80067ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	73fb      	strb	r3, [r7, #15]
      break;
 80067e4:	e004      	b.n	80067f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10d      	bne.n	8006812 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80067f6:	4b49      	ldr	r3, [pc, #292]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6819      	ldr	r1, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	3b01      	subs	r3, #1
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	430b      	orrs	r3, r1
 800680c:	4943      	ldr	r1, [pc, #268]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 800680e:	4313      	orrs	r3, r2
 8006810:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d17c      	bne.n	8006912 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006818:	4b40      	ldr	r3, [pc, #256]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a3f      	ldr	r2, [pc, #252]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 800681e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006824:	f7fc ff5a 	bl	80036dc <HAL_GetTick>
 8006828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800682a:	e009      	b.n	8006840 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800682c:	f7fc ff56 	bl	80036dc <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d902      	bls.n	8006840 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	73fb      	strb	r3, [r7, #15]
        break;
 800683e:	e005      	b.n	800684c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006840:	4b36      	ldr	r3, [pc, #216]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1ef      	bne.n	800682c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d15f      	bne.n	8006912 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d110      	bne.n	800687a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006858:	4b30      	ldr	r3, [pc, #192]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006860:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6892      	ldr	r2, [r2, #8]
 8006868:	0211      	lsls	r1, r2, #8
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68d2      	ldr	r2, [r2, #12]
 800686e:	06d2      	lsls	r2, r2, #27
 8006870:	430a      	orrs	r2, r1
 8006872:	492a      	ldr	r1, [pc, #168]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006874:	4313      	orrs	r3, r2
 8006876:	610b      	str	r3, [r1, #16]
 8006878:	e027      	b.n	80068ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d112      	bne.n	80068a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006880:	4b26      	ldr	r3, [pc, #152]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006888:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6892      	ldr	r2, [r2, #8]
 8006890:	0211      	lsls	r1, r2, #8
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6912      	ldr	r2, [r2, #16]
 8006896:	0852      	lsrs	r2, r2, #1
 8006898:	3a01      	subs	r2, #1
 800689a:	0552      	lsls	r2, r2, #21
 800689c:	430a      	orrs	r2, r1
 800689e:	491f      	ldr	r1, [pc, #124]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	610b      	str	r3, [r1, #16]
 80068a4:	e011      	b.n	80068ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068a6:	4b1d      	ldr	r3, [pc, #116]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6892      	ldr	r2, [r2, #8]
 80068b6:	0211      	lsls	r1, r2, #8
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6952      	ldr	r2, [r2, #20]
 80068bc:	0852      	lsrs	r2, r2, #1
 80068be:	3a01      	subs	r2, #1
 80068c0:	0652      	lsls	r2, r2, #25
 80068c2:	430a      	orrs	r2, r1
 80068c4:	4915      	ldr	r1, [pc, #84]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068ca:	4b14      	ldr	r3, [pc, #80]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a13      	ldr	r2, [pc, #76]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d6:	f7fc ff01 	bl	80036dc <HAL_GetTick>
 80068da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068dc:	e009      	b.n	80068f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068de:	f7fc fefd 	bl	80036dc <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d902      	bls.n	80068f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	73fb      	strb	r3, [r7, #15]
          break;
 80068f0:	e005      	b.n	80068fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068f2:	4b0a      	ldr	r3, [pc, #40]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0ef      	beq.n	80068de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	4903      	ldr	r1, [pc, #12]	; (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 800690e:	4313      	orrs	r3, r2
 8006910:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40021000 	.word	0x40021000

08006920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e049      	b.n	80069c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fc fbca 	bl	80030e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3304      	adds	r3, #4
 800695c:	4619      	mov	r1, r3
 800695e:	4610      	mov	r0, r2
 8006960:	f000 fc1e 	bl	80071a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d001      	beq.n	80069e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e033      	b.n	8006a50 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a19      	ldr	r2, [pc, #100]	; (8006a5c <HAL_TIM_Base_Start+0x8c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d009      	beq.n	8006a0e <HAL_TIM_Base_Start+0x3e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a02:	d004      	beq.n	8006a0e <HAL_TIM_Base_Start+0x3e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a15      	ldr	r2, [pc, #84]	; (8006a60 <HAL_TIM_Base_Start+0x90>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d115      	bne.n	8006a3a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	4b13      	ldr	r3, [pc, #76]	; (8006a64 <HAL_TIM_Base_Start+0x94>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b06      	cmp	r3, #6
 8006a1e:	d015      	beq.n	8006a4c <HAL_TIM_Base_Start+0x7c>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a26:	d011      	beq.n	8006a4c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a38:	e008      	b.n	8006a4c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f042 0201 	orr.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	e000      	b.n	8006a4e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	40012c00 	.word	0x40012c00
 8006a60:	40014000 	.word	0x40014000
 8006a64:	00010007 	.word	0x00010007

08006a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e049      	b.n	8006b0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fc fb00 	bl	8003094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f000 fb7a 	bl	80071a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d109      	bne.n	8006b3c <HAL_TIM_PWM_Start+0x24>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	bf14      	ite	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	2300      	moveq	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	e03c      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d109      	bne.n	8006b56 <HAL_TIM_PWM_Start+0x3e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	bf14      	ite	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	2300      	moveq	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	e02f      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d109      	bne.n	8006b70 <HAL_TIM_PWM_Start+0x58>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	bf14      	ite	ne
 8006b68:	2301      	movne	r3, #1
 8006b6a:	2300      	moveq	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	e022      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b0c      	cmp	r3, #12
 8006b74:	d109      	bne.n	8006b8a <HAL_TIM_PWM_Start+0x72>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	bf14      	ite	ne
 8006b82:	2301      	movne	r3, #1
 8006b84:	2300      	moveq	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	e015      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b10      	cmp	r3, #16
 8006b8e:	d109      	bne.n	8006ba4 <HAL_TIM_PWM_Start+0x8c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e008      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	bf14      	ite	ne
 8006bb0:	2301      	movne	r3, #1
 8006bb2:	2300      	moveq	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e07e      	b.n	8006cbc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <HAL_TIM_PWM_Start+0xb6>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bcc:	e023      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d104      	bne.n	8006bde <HAL_TIM_PWM_Start+0xc6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bdc:	e01b      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_PWM_Start+0xd6>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bec:	e013      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b0c      	cmp	r3, #12
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_PWM_Start+0xe6>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bfc:	e00b      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_PWM_Start+0xf6>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c0c:	e003      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fda0 	bl	8007764 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a26      	ldr	r2, [pc, #152]	; (8006cc4 <HAL_TIM_PWM_Start+0x1ac>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <HAL_TIM_PWM_Start+0x12a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a25      	ldr	r2, [pc, #148]	; (8006cc8 <HAL_TIM_PWM_Start+0x1b0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <HAL_TIM_PWM_Start+0x12a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <HAL_TIM_PWM_Start+0x1b4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d101      	bne.n	8006c46 <HAL_TIM_PWM_Start+0x12e>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <HAL_TIM_PWM_Start+0x130>
 8006c46:	2300      	movs	r3, #0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <HAL_TIM_PWM_Start+0x1ac>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d009      	beq.n	8006c7a <HAL_TIM_PWM_Start+0x162>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d004      	beq.n	8006c7a <HAL_TIM_PWM_Start+0x162>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <HAL_TIM_PWM_Start+0x1b0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d115      	bne.n	8006ca6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <HAL_TIM_PWM_Start+0x1b8>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b06      	cmp	r3, #6
 8006c8a:	d015      	beq.n	8006cb8 <HAL_TIM_PWM_Start+0x1a0>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c92:	d011      	beq.n	8006cb8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca4:	e008      	b.n	8006cb8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0201 	orr.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e000      	b.n	8006cba <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	00010007 	.word	0x00010007

08006cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d122      	bne.n	8006d30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d11b      	bne.n	8006d30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f06f 0202 	mvn.w	r2, #2
 8006d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fa24 	bl	8007164 <HAL_TIM_IC_CaptureCallback>
 8006d1c:	e005      	b.n	8006d2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa16 	bl	8007150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fa27 	bl	8007178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d122      	bne.n	8006d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d11b      	bne.n	8006d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f06f 0204 	mvn.w	r2, #4
 8006d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f9fa 	bl	8007164 <HAL_TIM_IC_CaptureCallback>
 8006d70:	e005      	b.n	8006d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9ec 	bl	8007150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f9fd 	bl	8007178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d122      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d11b      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0208 	mvn.w	r2, #8
 8006da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2204      	movs	r2, #4
 8006dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f9d0 	bl	8007164 <HAL_TIM_IC_CaptureCallback>
 8006dc4:	e005      	b.n	8006dd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f9c2 	bl	8007150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f9d3 	bl	8007178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0310 	and.w	r3, r3, #16
 8006de2:	2b10      	cmp	r3, #16
 8006de4:	d122      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	2b10      	cmp	r3, #16
 8006df2:	d11b      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f06f 0210 	mvn.w	r2, #16
 8006dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2208      	movs	r2, #8
 8006e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9a6 	bl	8007164 <HAL_TIM_IC_CaptureCallback>
 8006e18:	e005      	b.n	8006e26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f998 	bl	8007150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9a9 	bl	8007178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d10e      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d107      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0201 	mvn.w	r2, #1
 8006e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f972 	bl	800713c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	2b80      	cmp	r3, #128	; 0x80
 8006e64:	d10e      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e70:	2b80      	cmp	r3, #128	; 0x80
 8006e72:	d107      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fe1c 	bl	8007abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e92:	d10e      	bne.n	8006eb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9e:	2b80      	cmp	r3, #128	; 0x80
 8006ea0:	d107      	bne.n	8006eb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fe0f 	bl	8007ad0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	d10e      	bne.n	8006ede <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d107      	bne.n	8006ede <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f957 	bl	800718c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d10e      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d107      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f06f 0220 	mvn.w	r2, #32
 8006f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fdcf 	bl	8007aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e0ff      	b.n	8007132 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b14      	cmp	r3, #20
 8006f3e:	f200 80f0 	bhi.w	8007122 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f42:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f9d 	.word	0x08006f9d
 8006f4c:	08007123 	.word	0x08007123
 8006f50:	08007123 	.word	0x08007123
 8006f54:	08007123 	.word	0x08007123
 8006f58:	08006fdd 	.word	0x08006fdd
 8006f5c:	08007123 	.word	0x08007123
 8006f60:	08007123 	.word	0x08007123
 8006f64:	08007123 	.word	0x08007123
 8006f68:	0800701f 	.word	0x0800701f
 8006f6c:	08007123 	.word	0x08007123
 8006f70:	08007123 	.word	0x08007123
 8006f74:	08007123 	.word	0x08007123
 8006f78:	0800705f 	.word	0x0800705f
 8006f7c:	08007123 	.word	0x08007123
 8006f80:	08007123 	.word	0x08007123
 8006f84:	08007123 	.word	0x08007123
 8006f88:	080070a1 	.word	0x080070a1
 8006f8c:	08007123 	.word	0x08007123
 8006f90:	08007123 	.word	0x08007123
 8006f94:	08007123 	.word	0x08007123
 8006f98:	080070e1 	.word	0x080070e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 f960 	bl	8007268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0208 	orr.w	r2, r2, #8
 8006fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0204 	bic.w	r2, r2, #4
 8006fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6999      	ldr	r1, [r3, #24]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	619a      	str	r2, [r3, #24]
      break;
 8006fda:	e0a5      	b.n	8007128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f9bc 	bl	8007360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6999      	ldr	r1, [r3, #24]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	021a      	lsls	r2, r3, #8
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	619a      	str	r2, [r3, #24]
      break;
 800701c:	e084      	b.n	8007128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fa15 	bl	8007454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0208 	orr.w	r2, r2, #8
 8007038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0204 	bic.w	r2, r2, #4
 8007048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69d9      	ldr	r1, [r3, #28]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	61da      	str	r2, [r3, #28]
      break;
 800705c:	e064      	b.n	8007128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fa6d 	bl	8007544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69da      	ldr	r2, [r3, #28]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69d9      	ldr	r1, [r3, #28]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	021a      	lsls	r2, r3, #8
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	61da      	str	r2, [r3, #28]
      break;
 800709e:	e043      	b.n	8007128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 faaa 	bl	8007600 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0208 	orr.w	r2, r2, #8
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0204 	bic.w	r2, r2, #4
 80070ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	691a      	ldr	r2, [r3, #16]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070de:	e023      	b.n	8007128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fae2 	bl	80076b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800710a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	021a      	lsls	r2, r3, #8
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007120:	e002      	b.n	8007128 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	75fb      	strb	r3, [r7, #23]
      break;
 8007126:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007130:	7dfb      	ldrb	r3, [r7, #23]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop

0800713c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a2a      	ldr	r2, [pc, #168]	; (800725c <TIM_Base_SetConfig+0xbc>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_Base_SetConfig+0x20>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071be:	d108      	bne.n	80071d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a21      	ldr	r2, [pc, #132]	; (800725c <TIM_Base_SetConfig+0xbc>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00b      	beq.n	80071f2 <TIM_Base_SetConfig+0x52>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e0:	d007      	beq.n	80071f2 <TIM_Base_SetConfig+0x52>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a1e      	ldr	r2, [pc, #120]	; (8007260 <TIM_Base_SetConfig+0xc0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_Base_SetConfig+0x52>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <TIM_Base_SetConfig+0xc4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d108      	bne.n	8007204 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a0c      	ldr	r2, [pc, #48]	; (800725c <TIM_Base_SetConfig+0xbc>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d007      	beq.n	8007240 <TIM_Base_SetConfig+0xa0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a0b      	ldr	r2, [pc, #44]	; (8007260 <TIM_Base_SetConfig+0xc0>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_Base_SetConfig+0xa0>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a0a      	ldr	r2, [pc, #40]	; (8007264 <TIM_Base_SetConfig+0xc4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d103      	bne.n	8007248 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	615a      	str	r2, [r3, #20]
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40014000 	.word	0x40014000
 8007264:	40014400 	.word	0x40014400

08007268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f023 0201 	bic.w	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f023 0302 	bic.w	r3, r3, #2
 80072b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a24      	ldr	r2, [pc, #144]	; (8007354 <TIM_OC1_SetConfig+0xec>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d007      	beq.n	80072d8 <TIM_OC1_SetConfig+0x70>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a23      	ldr	r2, [pc, #140]	; (8007358 <TIM_OC1_SetConfig+0xf0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_OC1_SetConfig+0x70>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a22      	ldr	r2, [pc, #136]	; (800735c <TIM_OC1_SetConfig+0xf4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d10c      	bne.n	80072f2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f023 0308 	bic.w	r3, r3, #8
 80072de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f023 0304 	bic.w	r3, r3, #4
 80072f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a17      	ldr	r2, [pc, #92]	; (8007354 <TIM_OC1_SetConfig+0xec>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d007      	beq.n	800730a <TIM_OC1_SetConfig+0xa2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a16      	ldr	r2, [pc, #88]	; (8007358 <TIM_OC1_SetConfig+0xf0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d003      	beq.n	800730a <TIM_OC1_SetConfig+0xa2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a15      	ldr	r2, [pc, #84]	; (800735c <TIM_OC1_SetConfig+0xf4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d111      	bne.n	800732e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	621a      	str	r2, [r3, #32]
}
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	40012c00 	.word	0x40012c00
 8007358:	40014000 	.word	0x40014000
 800735c:	40014400 	.word	0x40014400

08007360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f023 0210 	bic.w	r2, r3, #16
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f023 0320 	bic.w	r3, r3, #32
 80073ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a22      	ldr	r2, [pc, #136]	; (8007448 <TIM_OC2_SetConfig+0xe8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d10d      	bne.n	80073e0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a19      	ldr	r2, [pc, #100]	; (8007448 <TIM_OC2_SetConfig+0xe8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <TIM_OC2_SetConfig+0x98>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a18      	ldr	r2, [pc, #96]	; (800744c <TIM_OC2_SetConfig+0xec>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC2_SetConfig+0x98>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a17      	ldr	r2, [pc, #92]	; (8007450 <TIM_OC2_SetConfig+0xf0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d113      	bne.n	8007420 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40012c00 	.word	0x40012c00
 800744c:	40014000 	.word	0x40014000
 8007450:	40014400 	.word	0x40014400

08007454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0303 	bic.w	r3, r3, #3
 800748e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a21      	ldr	r2, [pc, #132]	; (8007538 <TIM_OC3_SetConfig+0xe4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d10d      	bne.n	80074d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a18      	ldr	r2, [pc, #96]	; (8007538 <TIM_OC3_SetConfig+0xe4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d007      	beq.n	80074ea <TIM_OC3_SetConfig+0x96>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a17      	ldr	r2, [pc, #92]	; (800753c <TIM_OC3_SetConfig+0xe8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d003      	beq.n	80074ea <TIM_OC3_SetConfig+0x96>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a16      	ldr	r2, [pc, #88]	; (8007540 <TIM_OC3_SetConfig+0xec>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d113      	bne.n	8007512 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	621a      	str	r2, [r3, #32]
}
 800752c:	bf00      	nop
 800752e:	371c      	adds	r7, #28
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	40012c00 	.word	0x40012c00
 800753c:	40014000 	.word	0x40014000
 8007540:	40014400 	.word	0x40014400

08007544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	031b      	lsls	r3, r3, #12
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a14      	ldr	r2, [pc, #80]	; (80075f4 <TIM_OC4_SetConfig+0xb0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d007      	beq.n	80075b8 <TIM_OC4_SetConfig+0x74>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a13      	ldr	r2, [pc, #76]	; (80075f8 <TIM_OC4_SetConfig+0xb4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_OC4_SetConfig+0x74>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a12      	ldr	r2, [pc, #72]	; (80075fc <TIM_OC4_SetConfig+0xb8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d109      	bne.n	80075cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	019b      	lsls	r3, r3, #6
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	621a      	str	r2, [r3, #32]
}
 80075e6:	bf00      	nop
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40014000 	.word	0x40014000
 80075fc:	40014400 	.word	0x40014400

08007600 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800762e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007644:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	041b      	lsls	r3, r3, #16
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a13      	ldr	r2, [pc, #76]	; (80076a4 <TIM_OC5_SetConfig+0xa4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d007      	beq.n	800766a <TIM_OC5_SetConfig+0x6a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a12      	ldr	r2, [pc, #72]	; (80076a8 <TIM_OC5_SetConfig+0xa8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d003      	beq.n	800766a <TIM_OC5_SetConfig+0x6a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a11      	ldr	r2, [pc, #68]	; (80076ac <TIM_OC5_SetConfig+0xac>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d109      	bne.n	800767e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	621a      	str	r2, [r3, #32]
}
 8007698:	bf00      	nop
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40014000 	.word	0x40014000
 80076ac:	40014400 	.word	0x40014400

080076b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	051b      	lsls	r3, r3, #20
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a14      	ldr	r2, [pc, #80]	; (8007758 <TIM_OC6_SetConfig+0xa8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d007      	beq.n	800771c <TIM_OC6_SetConfig+0x6c>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a13      	ldr	r2, [pc, #76]	; (800775c <TIM_OC6_SetConfig+0xac>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d003      	beq.n	800771c <TIM_OC6_SetConfig+0x6c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a12      	ldr	r2, [pc, #72]	; (8007760 <TIM_OC6_SetConfig+0xb0>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d109      	bne.n	8007730 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007722:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	029b      	lsls	r3, r3, #10
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	621a      	str	r2, [r3, #32]
}
 800774a:	bf00      	nop
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40012c00 	.word	0x40012c00
 800775c:	40014000 	.word	0x40014000
 8007760:	40014400 	.word	0x40014400

08007764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 031f 	and.w	r3, r3, #31
 8007776:	2201      	movs	r2, #1
 8007778:	fa02 f303 	lsl.w	r3, r2, r3
 800777c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a1a      	ldr	r2, [r3, #32]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	43db      	mvns	r3, r3
 8007786:	401a      	ands	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a1a      	ldr	r2, [r3, #32]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	fa01 f303 	lsl.w	r3, r1, r3
 800779c:	431a      	orrs	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	621a      	str	r2, [r3, #32]
}
 80077a2:	bf00      	nop
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d109      	bne.n	80077d4 <HAL_TIMEx_PWMN_Start+0x24>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	bf14      	ite	ne
 80077cc:	2301      	movne	r3, #1
 80077ce:	2300      	moveq	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	e022      	b.n	800781a <HAL_TIMEx_PWMN_Start+0x6a>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d109      	bne.n	80077ee <HAL_TIMEx_PWMN_Start+0x3e>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	bf14      	ite	ne
 80077e6:	2301      	movne	r3, #1
 80077e8:	2300      	moveq	r3, #0
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	e015      	b.n	800781a <HAL_TIMEx_PWMN_Start+0x6a>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b08      	cmp	r3, #8
 80077f2:	d109      	bne.n	8007808 <HAL_TIMEx_PWMN_Start+0x58>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	bf14      	ite	ne
 8007800:	2301      	movne	r3, #1
 8007802:	2300      	moveq	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	e008      	b.n	800781a <HAL_TIMEx_PWMN_Start+0x6a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	bf14      	ite	ne
 8007814:	2301      	movne	r3, #1
 8007816:	2300      	moveq	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e05a      	b.n	80078d8 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <HAL_TIMEx_PWMN_Start+0x82>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007830:	e013      	b.n	800785a <HAL_TIMEx_PWMN_Start+0xaa>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b04      	cmp	r3, #4
 8007836:	d104      	bne.n	8007842 <HAL_TIMEx_PWMN_Start+0x92>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007840:	e00b      	b.n	800785a <HAL_TIMEx_PWMN_Start+0xaa>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b08      	cmp	r3, #8
 8007846:	d104      	bne.n	8007852 <HAL_TIMEx_PWMN_Start+0xa2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007850:	e003      	b.n	800785a <HAL_TIMEx_PWMN_Start+0xaa>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2202      	movs	r2, #2
 8007856:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2204      	movs	r2, #4
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	4618      	mov	r0, r3
 8007864:	f000 f93e 	bl	8007ae4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007876:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a18      	ldr	r2, [pc, #96]	; (80078e0 <HAL_TIMEx_PWMN_Start+0x130>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d009      	beq.n	8007896 <HAL_TIMEx_PWMN_Start+0xe6>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788a:	d004      	beq.n	8007896 <HAL_TIMEx_PWMN_Start+0xe6>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a14      	ldr	r2, [pc, #80]	; (80078e4 <HAL_TIMEx_PWMN_Start+0x134>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d115      	bne.n	80078c2 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <HAL_TIMEx_PWMN_Start+0x138>)
 800789e:	4013      	ands	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b06      	cmp	r3, #6
 80078a6:	d015      	beq.n	80078d4 <HAL_TIMEx_PWMN_Start+0x124>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ae:	d011      	beq.n	80078d4 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c0:	e008      	b.n	80078d4 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0201 	orr.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	e000      	b.n	80078d6 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	40012c00 	.word	0x40012c00
 80078e4:	40014000 	.word	0x40014000
 80078e8:	00010007 	.word	0x00010007

080078ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007900:	2302      	movs	r3, #2
 8007902:	e04f      	b.n	80079a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a21      	ldr	r2, [pc, #132]	; (80079b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d108      	bne.n	8007940 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007934:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a14      	ldr	r2, [pc, #80]	; (80079b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d009      	beq.n	8007978 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800796c:	d004      	beq.n	8007978 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a10      	ldr	r2, [pc, #64]	; (80079b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d10c      	bne.n	8007992 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800797e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	4313      	orrs	r3, r2
 8007988:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	40012c00 	.word	0x40012c00
 80079b4:	40014000 	.word	0x40014000

080079b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d101      	bne.n	80079d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079d0:	2302      	movs	r3, #2
 80079d2:	e060      	b.n	8007a96 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	041b      	lsls	r3, r3, #16
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a14      	ldr	r2, [pc, #80]	; (8007aa4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d115      	bne.n	8007a84 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	051b      	lsls	r3, r3, #20
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	40012c00 	.word	0x40012c00

08007aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	2204      	movs	r2, #4
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a1a      	ldr	r2, [r3, #32]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	43db      	mvns	r3, r3
 8007b06:	401a      	ands	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a1a      	ldr	r2, [r3, #32]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 031f 	and.w	r3, r3, #31
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e040      	b.n	8007bc2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7fb fb5b 	bl	800320c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2224      	movs	r2, #36	; 0x24
 8007b5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0201 	bic.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fcb9 	bl	80084e4 <UART_SetConfig>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e022      	b.n	8007bc2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fed9 	bl	800893c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ba8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0201 	orr.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 ff60 	bl	8008a80 <UART_CheckIdleState>
 8007bc0:	4603      	mov	r3, r0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b08a      	sub	sp, #40	; 0x28
 8007bce:	af02      	add	r7, sp, #8
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	603b      	str	r3, [r7, #0]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	f040 80bf 	bne.w	8007d62 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <HAL_UART_Receive+0x26>
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e0b7      	b.n	8007d64 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d101      	bne.n	8007c02 <HAL_UART_Receive+0x38>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e0b0      	b.n	8007d64 <HAL_UART_Receive+0x19a>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2222      	movs	r2, #34	; 0x22
 8007c16:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c1e:	f7fb fd5d 	bl	80036dc <HAL_GetTick>
 8007c22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	88fa      	ldrh	r2, [r7, #6]
 8007c28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	88fa      	ldrh	r2, [r7, #6]
 8007c30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3c:	d10e      	bne.n	8007c5c <HAL_UART_Receive+0x92>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <HAL_UART_Receive+0x88>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c50:	e02d      	b.n	8007cae <HAL_UART_Receive+0xe4>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	22ff      	movs	r2, #255	; 0xff
 8007c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c5a:	e028      	b.n	8007cae <HAL_UART_Receive+0xe4>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10d      	bne.n	8007c80 <HAL_UART_Receive+0xb6>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d104      	bne.n	8007c76 <HAL_UART_Receive+0xac>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	22ff      	movs	r2, #255	; 0xff
 8007c70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c74:	e01b      	b.n	8007cae <HAL_UART_Receive+0xe4>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	227f      	movs	r2, #127	; 0x7f
 8007c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c7e:	e016      	b.n	8007cae <HAL_UART_Receive+0xe4>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c88:	d10d      	bne.n	8007ca6 <HAL_UART_Receive+0xdc>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d104      	bne.n	8007c9c <HAL_UART_Receive+0xd2>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	227f      	movs	r2, #127	; 0x7f
 8007c96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c9a:	e008      	b.n	8007cae <HAL_UART_Receive+0xe4>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	223f      	movs	r2, #63	; 0x3f
 8007ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ca4:	e003      	b.n	8007cae <HAL_UART_Receive+0xe4>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cb4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cbe:	d108      	bne.n	8007cd2 <HAL_UART_Receive+0x108>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d104      	bne.n	8007cd2 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61bb      	str	r3, [r7, #24]
 8007cd0:	e003      	b.n	8007cda <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007ce2:	e033      	b.n	8007d4c <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2200      	movs	r2, #0
 8007cec:	2120      	movs	r1, #32
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 ff0f 	bl	8008b12 <UART_WaitOnFlagUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e032      	b.n	8007d64 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10c      	bne.n	8007d1e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	8a7b      	ldrh	r3, [r7, #18]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	3302      	adds	r3, #2
 8007d1a:	61bb      	str	r3, [r7, #24]
 8007d1c:	e00d      	b.n	8007d3a <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	8a7b      	ldrh	r3, [r7, #18]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	3301      	adds	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	3b01      	subs	r3, #1
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1c5      	bne.n	8007ce4 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e000      	b.n	8007d64 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007d62:	2302      	movs	r3, #2
  }
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3720      	adds	r7, #32
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b08b      	sub	sp, #44	; 0x2c
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	4613      	mov	r3, r2
 8007d78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d156      	bne.n	8007e30 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <HAL_UART_Transmit_IT+0x22>
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e04f      	b.n	8007e32 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d101      	bne.n	8007da0 <HAL_UART_Transmit_IT+0x34>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e048      	b.n	8007e32 <HAL_UART_Transmit_IT+0xc6>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	88fa      	ldrh	r2, [r7, #6]
 8007db2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	88fa      	ldrh	r2, [r7, #6]
 8007dba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2221      	movs	r2, #33	; 0x21
 8007dd0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dda:	d107      	bne.n	8007dec <HAL_UART_Transmit_IT+0x80>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4a16      	ldr	r2, [pc, #88]	; (8007e40 <HAL_UART_Transmit_IT+0xd4>)
 8007de8:	669a      	str	r2, [r3, #104]	; 0x68
 8007dea:	e002      	b.n	8007df2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4a15      	ldr	r2, [pc, #84]	; (8007e44 <HAL_UART_Transmit_IT+0xd8>)
 8007df0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	613b      	str	r3, [r7, #16]
   return(result);
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	623b      	str	r3, [r7, #32]
 8007e1a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	69f9      	ldr	r1, [r7, #28]
 8007e1e:	6a3a      	ldr	r2, [r7, #32]
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e6      	bne.n	8007dfa <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	e000      	b.n	8007e32 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	372c      	adds	r7, #44	; 0x2c
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	08008fdb 	.word	0x08008fdb
 8007e44:	08008f23 	.word	0x08008f23

08007e48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b08a      	sub	sp, #40	; 0x28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	d142      	bne.n	8007ee4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <HAL_UART_Receive_IT+0x22>
 8007e64:	88fb      	ldrh	r3, [r7, #6]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e03b      	b.n	8007ee6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_UART_Receive_IT+0x34>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e034      	b.n	8007ee6 <HAL_UART_Receive_IT+0x9e>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <HAL_UART_Receive_IT+0xa8>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d01f      	beq.n	8007ed4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d018      	beq.n	8007ed4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	623b      	str	r3, [r7, #32]
 8007ec2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec4:	69f9      	ldr	r1, [r7, #28]
 8007ec6:	6a3a      	ldr	r2, [r7, #32]
 8007ec8:	e841 2300 	strex	r3, r2, [r1]
 8007ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e6      	bne.n	8007ea2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 fede 	bl	8008c9c <UART_Start_Receive_IT>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	e000      	b.n	8007ee6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007ee4:	2302      	movs	r3, #2
  }
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3728      	adds	r7, #40	; 0x28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	40008000 	.word	0x40008000

08007ef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b0ba      	sub	sp, #232	; 0xe8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f22:	4013      	ands	r3, r2
 8007f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d115      	bne.n	8007f5c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00f      	beq.n	8007f5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d009      	beq.n	8007f5c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 82a6 	beq.w	800849e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	4798      	blx	r3
      }
      return;
 8007f5a:	e2a0      	b.n	800849e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 8117 	beq.w	8008194 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d106      	bne.n	8007f80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f76:	4b85      	ldr	r3, [pc, #532]	; (800818c <HAL_UART_IRQHandler+0x298>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 810a 	beq.w	8008194 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d011      	beq.n	8007fb0 <HAL_UART_IRQHandler+0xbc>
 8007f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00b      	beq.n	8007fb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fa6:	f043 0201 	orr.w	r2, r3, #1
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d011      	beq.n	8007fe0 <HAL_UART_IRQHandler+0xec>
 8007fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00b      	beq.n	8007fe0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2202      	movs	r2, #2
 8007fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd6:	f043 0204 	orr.w	r2, r3, #4
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d011      	beq.n	8008010 <HAL_UART_IRQHandler+0x11c>
 8007fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00b      	beq.n	8008010 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008006:	f043 0202 	orr.w	r2, r3, #2
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008014:	f003 0308 	and.w	r3, r3, #8
 8008018:	2b00      	cmp	r3, #0
 800801a:	d017      	beq.n	800804c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800801c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008020:	f003 0320 	and.w	r3, r3, #32
 8008024:	2b00      	cmp	r3, #0
 8008026:	d105      	bne.n	8008034 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800802c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2208      	movs	r2, #8
 800803a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008042:	f043 0208 	orr.w	r2, r3, #8
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800804c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008054:	2b00      	cmp	r3, #0
 8008056:	d012      	beq.n	800807e <HAL_UART_IRQHandler+0x18a>
 8008058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800805c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00c      	beq.n	800807e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800806c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008074:	f043 0220 	orr.w	r2, r3, #32
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 820c 	beq.w	80084a2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800808a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808e:	f003 0320 	and.w	r3, r3, #32
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00d      	beq.n	80080b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c6:	2b40      	cmp	r3, #64	; 0x40
 80080c8:	d005      	beq.n	80080d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d04f      	beq.n	8008176 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 feaa 	bl	8008e30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d141      	bne.n	800816e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3308      	adds	r3, #8
 80080f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3308      	adds	r3, #8
 8008112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800811a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800812e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1d9      	bne.n	80080ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813a:	2b00      	cmp	r3, #0
 800813c:	d013      	beq.n	8008166 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008142:	4a13      	ldr	r2, [pc, #76]	; (8008190 <HAL_UART_IRQHandler+0x29c>)
 8008144:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814a:	4618      	mov	r0, r3
 800814c:	f7fb fc45 	bl	80039da <HAL_DMA_Abort_IT>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d017      	beq.n	8008186 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008164:	e00f      	b.n	8008186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9a6 	bl	80084b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816c:	e00b      	b.n	8008186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f9a2 	bl	80084b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008174:	e007      	b.n	8008186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f99e 	bl	80084b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008184:	e18d      	b.n	80084a2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008186:	bf00      	nop
    return;
 8008188:	e18b      	b.n	80084a2 <HAL_UART_IRQHandler+0x5ae>
 800818a:	bf00      	nop
 800818c:	04000120 	.word	0x04000120
 8008190:	08008ef7 	.word	0x08008ef7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008198:	2b01      	cmp	r3, #1
 800819a:	f040 8146 	bne.w	800842a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800819e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a2:	f003 0310 	and.w	r3, r3, #16
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 813f 	beq.w	800842a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081b0:	f003 0310 	and.w	r3, r3, #16
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8138 	beq.w	800842a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2210      	movs	r2, #16
 80081c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	f040 80b4 	bne.w	800833a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 815f 	beq.w	80084a6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081f2:	429a      	cmp	r2, r3
 80081f4:	f080 8157 	bcs.w	80084a6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 8085 	bne.w	800831e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800822c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800823e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008242:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800824a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1da      	bne.n	8008214 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800826e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008270:	f023 0301 	bic.w	r3, r3, #1
 8008274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3308      	adds	r3, #8
 800827e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008282:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008286:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008288:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800828a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e1      	bne.n	800825e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3308      	adds	r3, #8
 80082a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3308      	adds	r3, #8
 80082ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e3      	bne.n	800829a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e6:	e853 3f00 	ldrex	r3, [r3]
 80082ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ee:	f023 0310 	bic.w	r3, r3, #16
 80082f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008300:	65bb      	str	r3, [r7, #88]	; 0x58
 8008302:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008308:	e841 2300 	strex	r3, r2, [r1]
 800830c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800830e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e4      	bne.n	80082de <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008318:	4618      	mov	r0, r3
 800831a:	f7fb fb20 	bl	800395e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800832a:	b29b      	uxth	r3, r3
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	b29b      	uxth	r3, r3
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f8ca 	bl	80084cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008338:	e0b5      	b.n	80084a6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008346:	b29b      	uxth	r3, r3
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008354:	b29b      	uxth	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 80a7 	beq.w	80084aa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800835c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 80a2 	beq.w	80084aa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800837a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008388:	647b      	str	r3, [r7, #68]	; 0x44
 800838a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800838e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e4      	bne.n	8008366 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3308      	adds	r3, #8
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	623b      	str	r3, [r7, #32]
   return(result);
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	f023 0301 	bic.w	r3, r3, #1
 80083b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3308      	adds	r3, #8
 80083bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083c0:	633a      	str	r2, [r7, #48]	; 0x30
 80083c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e3      	bne.n	800839c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2220      	movs	r2, #32
 80083d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0310 	bic.w	r3, r3, #16
 80083fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008408:	61fb      	str	r3, [r7, #28]
 800840a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	69b9      	ldr	r1, [r7, #24]
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	617b      	str	r3, [r7, #20]
   return(result);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e4      	bne.n	80083e6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800841c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f852 	bl	80084cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008428:	e03f      	b.n	80084aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800842a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800842e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00e      	beq.n	8008454 <HAL_UART_IRQHandler+0x560>
 8008436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800843a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d008      	beq.n	8008454 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800844a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 ffae 	bl	80093ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008452:	e02d      	b.n	80084b0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00e      	beq.n	800847e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008468:	2b00      	cmp	r3, #0
 800846a:	d008      	beq.n	800847e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008470:	2b00      	cmp	r3, #0
 8008472:	d01c      	beq.n	80084ae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
    }
    return;
 800847c:	e017      	b.n	80084ae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800847e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008486:	2b00      	cmp	r3, #0
 8008488:	d012      	beq.n	80084b0 <HAL_UART_IRQHandler+0x5bc>
 800848a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00c      	beq.n	80084b0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fdff 	bl	800909a <UART_EndTransmit_IT>
    return;
 800849c:	e008      	b.n	80084b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800849e:	bf00      	nop
 80084a0:	e006      	b.n	80084b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80084a2:	bf00      	nop
 80084a4:	e004      	b.n	80084b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80084a6:	bf00      	nop
 80084a8:	e002      	b.n	80084b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80084aa:	bf00      	nop
 80084ac:	e000      	b.n	80084b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80084ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80084b0:	37e8      	adds	r7, #232	; 0xe8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop

080084b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084e8:	b08a      	sub	sp, #40	; 0x28
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	431a      	orrs	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	431a      	orrs	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	4313      	orrs	r3, r2
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4bb4      	ldr	r3, [pc, #720]	; (80087e4 <UART_SetConfig+0x300>)
 8008514:	4013      	ands	r3, r2
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	6812      	ldr	r2, [r2, #0]
 800851a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800851c:	430b      	orrs	r3, r1
 800851e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	68da      	ldr	r2, [r3, #12]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4aa9      	ldr	r2, [pc, #676]	; (80087e8 <UART_SetConfig+0x304>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d004      	beq.n	8008550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800854c:	4313      	orrs	r3, r2
 800854e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008560:	430a      	orrs	r2, r1
 8008562:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4aa0      	ldr	r2, [pc, #640]	; (80087ec <UART_SetConfig+0x308>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d126      	bne.n	80085bc <UART_SetConfig+0xd8>
 800856e:	4ba0      	ldr	r3, [pc, #640]	; (80087f0 <UART_SetConfig+0x30c>)
 8008570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008574:	f003 0303 	and.w	r3, r3, #3
 8008578:	2b03      	cmp	r3, #3
 800857a:	d81b      	bhi.n	80085b4 <UART_SetConfig+0xd0>
 800857c:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <UART_SetConfig+0xa0>)
 800857e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008582:	bf00      	nop
 8008584:	08008595 	.word	0x08008595
 8008588:	080085a5 	.word	0x080085a5
 800858c:	0800859d 	.word	0x0800859d
 8008590:	080085ad 	.word	0x080085ad
 8008594:	2301      	movs	r3, #1
 8008596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800859a:	e080      	b.n	800869e <UART_SetConfig+0x1ba>
 800859c:	2302      	movs	r3, #2
 800859e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085a2:	e07c      	b.n	800869e <UART_SetConfig+0x1ba>
 80085a4:	2304      	movs	r3, #4
 80085a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085aa:	e078      	b.n	800869e <UART_SetConfig+0x1ba>
 80085ac:	2308      	movs	r3, #8
 80085ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085b2:	e074      	b.n	800869e <UART_SetConfig+0x1ba>
 80085b4:	2310      	movs	r3, #16
 80085b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ba:	e070      	b.n	800869e <UART_SetConfig+0x1ba>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a8c      	ldr	r2, [pc, #560]	; (80087f4 <UART_SetConfig+0x310>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d138      	bne.n	8008638 <UART_SetConfig+0x154>
 80085c6:	4b8a      	ldr	r3, [pc, #552]	; (80087f0 <UART_SetConfig+0x30c>)
 80085c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085cc:	f003 030c 	and.w	r3, r3, #12
 80085d0:	2b0c      	cmp	r3, #12
 80085d2:	d82d      	bhi.n	8008630 <UART_SetConfig+0x14c>
 80085d4:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <UART_SetConfig+0xf8>)
 80085d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085da:	bf00      	nop
 80085dc:	08008611 	.word	0x08008611
 80085e0:	08008631 	.word	0x08008631
 80085e4:	08008631 	.word	0x08008631
 80085e8:	08008631 	.word	0x08008631
 80085ec:	08008621 	.word	0x08008621
 80085f0:	08008631 	.word	0x08008631
 80085f4:	08008631 	.word	0x08008631
 80085f8:	08008631 	.word	0x08008631
 80085fc:	08008619 	.word	0x08008619
 8008600:	08008631 	.word	0x08008631
 8008604:	08008631 	.word	0x08008631
 8008608:	08008631 	.word	0x08008631
 800860c:	08008629 	.word	0x08008629
 8008610:	2300      	movs	r3, #0
 8008612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008616:	e042      	b.n	800869e <UART_SetConfig+0x1ba>
 8008618:	2302      	movs	r3, #2
 800861a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800861e:	e03e      	b.n	800869e <UART_SetConfig+0x1ba>
 8008620:	2304      	movs	r3, #4
 8008622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008626:	e03a      	b.n	800869e <UART_SetConfig+0x1ba>
 8008628:	2308      	movs	r3, #8
 800862a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800862e:	e036      	b.n	800869e <UART_SetConfig+0x1ba>
 8008630:	2310      	movs	r3, #16
 8008632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008636:	e032      	b.n	800869e <UART_SetConfig+0x1ba>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a6a      	ldr	r2, [pc, #424]	; (80087e8 <UART_SetConfig+0x304>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d12a      	bne.n	8008698 <UART_SetConfig+0x1b4>
 8008642:	4b6b      	ldr	r3, [pc, #428]	; (80087f0 <UART_SetConfig+0x30c>)
 8008644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008648:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800864c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008650:	d01a      	beq.n	8008688 <UART_SetConfig+0x1a4>
 8008652:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008656:	d81b      	bhi.n	8008690 <UART_SetConfig+0x1ac>
 8008658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800865c:	d00c      	beq.n	8008678 <UART_SetConfig+0x194>
 800865e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008662:	d815      	bhi.n	8008690 <UART_SetConfig+0x1ac>
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <UART_SetConfig+0x18c>
 8008668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800866c:	d008      	beq.n	8008680 <UART_SetConfig+0x19c>
 800866e:	e00f      	b.n	8008690 <UART_SetConfig+0x1ac>
 8008670:	2300      	movs	r3, #0
 8008672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008676:	e012      	b.n	800869e <UART_SetConfig+0x1ba>
 8008678:	2302      	movs	r3, #2
 800867a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800867e:	e00e      	b.n	800869e <UART_SetConfig+0x1ba>
 8008680:	2304      	movs	r3, #4
 8008682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008686:	e00a      	b.n	800869e <UART_SetConfig+0x1ba>
 8008688:	2308      	movs	r3, #8
 800868a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800868e:	e006      	b.n	800869e <UART_SetConfig+0x1ba>
 8008690:	2310      	movs	r3, #16
 8008692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008696:	e002      	b.n	800869e <UART_SetConfig+0x1ba>
 8008698:	2310      	movs	r3, #16
 800869a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a51      	ldr	r2, [pc, #324]	; (80087e8 <UART_SetConfig+0x304>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d17a      	bne.n	800879e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d824      	bhi.n	80086fa <UART_SetConfig+0x216>
 80086b0:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <UART_SetConfig+0x1d4>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086dd 	.word	0x080086dd
 80086bc:	080086fb 	.word	0x080086fb
 80086c0:	080086e5 	.word	0x080086e5
 80086c4:	080086fb 	.word	0x080086fb
 80086c8:	080086eb 	.word	0x080086eb
 80086cc:	080086fb 	.word	0x080086fb
 80086d0:	080086fb 	.word	0x080086fb
 80086d4:	080086fb 	.word	0x080086fb
 80086d8:	080086f3 	.word	0x080086f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086dc:	f7fd fdac 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 80086e0:	61f8      	str	r0, [r7, #28]
        break;
 80086e2:	e010      	b.n	8008706 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e4:	4b44      	ldr	r3, [pc, #272]	; (80087f8 <UART_SetConfig+0x314>)
 80086e6:	61fb      	str	r3, [r7, #28]
        break;
 80086e8:	e00d      	b.n	8008706 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ea:	f7fd fd0d 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 80086ee:	61f8      	str	r0, [r7, #28]
        break;
 80086f0:	e009      	b.n	8008706 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f6:	61fb      	str	r3, [r7, #28]
        break;
 80086f8:	e005      	b.n	8008706 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008704:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8107 	beq.w	800891c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4413      	add	r3, r2
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	429a      	cmp	r2, r3
 800871c:	d305      	bcc.n	800872a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008724:	69fa      	ldr	r2, [r7, #28]
 8008726:	429a      	cmp	r2, r3
 8008728:	d903      	bls.n	8008732 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008730:	e0f4      	b.n	800891c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	2200      	movs	r2, #0
 8008736:	461c      	mov	r4, r3
 8008738:	4615      	mov	r5, r2
 800873a:	f04f 0200 	mov.w	r2, #0
 800873e:	f04f 0300 	mov.w	r3, #0
 8008742:	022b      	lsls	r3, r5, #8
 8008744:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008748:	0222      	lsls	r2, r4, #8
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	6849      	ldr	r1, [r1, #4]
 800874e:	0849      	lsrs	r1, r1, #1
 8008750:	2000      	movs	r0, #0
 8008752:	4688      	mov	r8, r1
 8008754:	4681      	mov	r9, r0
 8008756:	eb12 0a08 	adds.w	sl, r2, r8
 800875a:	eb43 0b09 	adc.w	fp, r3, r9
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	603b      	str	r3, [r7, #0]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800876c:	4650      	mov	r0, sl
 800876e:	4659      	mov	r1, fp
 8008770:	f7f8 fa8a 	bl	8000c88 <__aeabi_uldivmod>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4613      	mov	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008782:	d308      	bcc.n	8008796 <UART_SetConfig+0x2b2>
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800878a:	d204      	bcs.n	8008796 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	60da      	str	r2, [r3, #12]
 8008794:	e0c2      	b.n	800891c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800879c:	e0be      	b.n	800891c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a6:	d16a      	bne.n	800887e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80087a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d834      	bhi.n	800881a <UART_SetConfig+0x336>
 80087b0:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <UART_SetConfig+0x2d4>)
 80087b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b6:	bf00      	nop
 80087b8:	080087dd 	.word	0x080087dd
 80087bc:	080087fd 	.word	0x080087fd
 80087c0:	08008805 	.word	0x08008805
 80087c4:	0800881b 	.word	0x0800881b
 80087c8:	0800880b 	.word	0x0800880b
 80087cc:	0800881b 	.word	0x0800881b
 80087d0:	0800881b 	.word	0x0800881b
 80087d4:	0800881b 	.word	0x0800881b
 80087d8:	08008813 	.word	0x08008813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087dc:	f7fd fd2c 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 80087e0:	61f8      	str	r0, [r7, #28]
        break;
 80087e2:	e020      	b.n	8008826 <UART_SetConfig+0x342>
 80087e4:	efff69f3 	.word	0xefff69f3
 80087e8:	40008000 	.word	0x40008000
 80087ec:	40013800 	.word	0x40013800
 80087f0:	40021000 	.word	0x40021000
 80087f4:	40004400 	.word	0x40004400
 80087f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087fc:	f7fd fd32 	bl	8006264 <HAL_RCC_GetPCLK2Freq>
 8008800:	61f8      	str	r0, [r7, #28]
        break;
 8008802:	e010      	b.n	8008826 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008804:	4b4c      	ldr	r3, [pc, #304]	; (8008938 <UART_SetConfig+0x454>)
 8008806:	61fb      	str	r3, [r7, #28]
        break;
 8008808:	e00d      	b.n	8008826 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880a:	f7fd fc7d 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 800880e:	61f8      	str	r0, [r7, #28]
        break;
 8008810:	e009      	b.n	8008826 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008816:	61fb      	str	r3, [r7, #28]
        break;
 8008818:	e005      	b.n	8008826 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d077      	beq.n	800891c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	005a      	lsls	r2, r3, #1
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	085b      	lsrs	r3, r3, #1
 8008836:	441a      	add	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008840:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2b0f      	cmp	r3, #15
 8008846:	d916      	bls.n	8008876 <UART_SetConfig+0x392>
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800884e:	d212      	bcs.n	8008876 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	b29b      	uxth	r3, r3
 8008854:	f023 030f 	bic.w	r3, r3, #15
 8008858:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	b29b      	uxth	r3, r3
 8008860:	f003 0307 	and.w	r3, r3, #7
 8008864:	b29a      	uxth	r2, r3
 8008866:	8afb      	ldrh	r3, [r7, #22]
 8008868:	4313      	orrs	r3, r2
 800886a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	8afa      	ldrh	r2, [r7, #22]
 8008872:	60da      	str	r2, [r3, #12]
 8008874:	e052      	b.n	800891c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800887c:	e04e      	b.n	800891c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800887e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008882:	2b08      	cmp	r3, #8
 8008884:	d827      	bhi.n	80088d6 <UART_SetConfig+0x3f2>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <UART_SetConfig+0x3a8>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088b9 	.word	0x080088b9
 8008894:	080088c1 	.word	0x080088c1
 8008898:	080088d7 	.word	0x080088d7
 800889c:	080088c7 	.word	0x080088c7
 80088a0:	080088d7 	.word	0x080088d7
 80088a4:	080088d7 	.word	0x080088d7
 80088a8:	080088d7 	.word	0x080088d7
 80088ac:	080088cf 	.word	0x080088cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088b0:	f7fd fcc2 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 80088b4:	61f8      	str	r0, [r7, #28]
        break;
 80088b6:	e014      	b.n	80088e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088b8:	f7fd fcd4 	bl	8006264 <HAL_RCC_GetPCLK2Freq>
 80088bc:	61f8      	str	r0, [r7, #28]
        break;
 80088be:	e010      	b.n	80088e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088c0:	4b1d      	ldr	r3, [pc, #116]	; (8008938 <UART_SetConfig+0x454>)
 80088c2:	61fb      	str	r3, [r7, #28]
        break;
 80088c4:	e00d      	b.n	80088e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c6:	f7fd fc1f 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 80088ca:	61f8      	str	r0, [r7, #28]
        break;
 80088cc:	e009      	b.n	80088e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088d2:	61fb      	str	r3, [r7, #28]
        break;
 80088d4:	e005      	b.n	80088e2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80088e0:	bf00      	nop
    }

    if (pclk != 0U)
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d019      	beq.n	800891c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	085a      	lsrs	r2, r3, #1
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	441a      	add	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b0f      	cmp	r3, #15
 8008900:	d909      	bls.n	8008916 <UART_SetConfig+0x432>
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008908:	d205      	bcs.n	8008916 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	b29a      	uxth	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	60da      	str	r2, [r3, #12]
 8008914:	e002      	b.n	800891c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008928:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800892c:	4618      	mov	r0, r3
 800892e:	3728      	adds	r7, #40	; 0x28
 8008930:	46bd      	mov	sp, r7
 8008932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008936:	bf00      	nop
 8008938:	00f42400 	.word	0x00f42400

0800893c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	f003 0304 	and.w	r3, r3, #4
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00a      	beq.n	80089aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	f003 0308 	and.w	r3, r3, #8
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	f003 0310 	and.w	r3, r3, #16
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00a      	beq.n	80089ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01a      	beq.n	8008a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a3a:	d10a      	bne.n	8008a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	605a      	str	r2, [r3, #4]
  }
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af02      	add	r7, sp, #8
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a90:	f7fa fe24 	bl	80036dc <HAL_GetTick>
 8008a94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d10e      	bne.n	8008ac2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f82d 	bl	8008b12 <UART_WaitOnFlagUntilTimeout>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e023      	b.n	8008b0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d10e      	bne.n	8008aee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f817 	bl	8008b12 <UART_WaitOnFlagUntilTimeout>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e00d      	b.n	8008b0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b09c      	sub	sp, #112	; 0x70
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b22:	e0a5      	b.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2a:	f000 80a1 	beq.w	8008c70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2e:	f7fa fdd5 	bl	80036dc <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d302      	bcc.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d13e      	bne.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b58:	667b      	str	r3, [r7, #100]	; 0x64
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e6      	bne.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b88:	f023 0301 	bic.w	r3, r3, #1
 8008b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3308      	adds	r3, #8
 8008b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b96:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b9e:	e841 2300 	strex	r3, r2, [r1]
 8008ba2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1e5      	bne.n	8008b76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2220      	movs	r2, #32
 8008bae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e067      	b.n	8008c92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d04f      	beq.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bde:	d147      	bne.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008be8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c08:	637b      	str	r3, [r7, #52]	; 0x34
 8008c0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e6      	bne.n	8008bea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3308      	adds	r3, #8
 8008c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f023 0301 	bic.w	r3, r3, #1
 8008c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c3c:	623a      	str	r2, [r7, #32]
 8008c3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	69f9      	ldr	r1, [r7, #28]
 8008c42:	6a3a      	ldr	r2, [r7, #32]
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e5      	bne.n	8008c1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2220      	movs	r2, #32
 8008c54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e010      	b.n	8008c92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69da      	ldr	r2, [r3, #28]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	bf0c      	ite	eq
 8008c80:	2301      	moveq	r3, #1
 8008c82:	2300      	movne	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	f43f af4a 	beq.w	8008b24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3770      	adds	r7, #112	; 0x70
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b097      	sub	sp, #92	; 0x5c
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	88fa      	ldrh	r2, [r7, #6]
 8008cb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	88fa      	ldrh	r2, [r7, #6]
 8008cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cce:	d10e      	bne.n	8008cee <UART_Start_Receive_IT+0x52>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d105      	bne.n	8008ce4 <UART_Start_Receive_IT+0x48>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ce2:	e02d      	b.n	8008d40 <UART_Start_Receive_IT+0xa4>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	22ff      	movs	r2, #255	; 0xff
 8008ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cec:	e028      	b.n	8008d40 <UART_Start_Receive_IT+0xa4>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10d      	bne.n	8008d12 <UART_Start_Receive_IT+0x76>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d104      	bne.n	8008d08 <UART_Start_Receive_IT+0x6c>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	22ff      	movs	r2, #255	; 0xff
 8008d02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d06:	e01b      	b.n	8008d40 <UART_Start_Receive_IT+0xa4>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	227f      	movs	r2, #127	; 0x7f
 8008d0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d10:	e016      	b.n	8008d40 <UART_Start_Receive_IT+0xa4>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d1a:	d10d      	bne.n	8008d38 <UART_Start_Receive_IT+0x9c>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <UART_Start_Receive_IT+0x92>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	227f      	movs	r2, #127	; 0x7f
 8008d28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d2c:	e008      	b.n	8008d40 <UART_Start_Receive_IT+0xa4>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	223f      	movs	r2, #63	; 0x3f
 8008d32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d36:	e003      	b.n	8008d40 <UART_Start_Receive_IT+0xa4>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2222      	movs	r2, #34	; 0x22
 8008d4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3308      	adds	r3, #8
 8008d54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	f043 0301 	orr.w	r3, r3, #1
 8008d64:	657b      	str	r3, [r7, #84]	; 0x54
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e5      	bne.n	8008d4e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d8a:	d107      	bne.n	8008d9c <UART_Start_Receive_IT+0x100>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d103      	bne.n	8008d9c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4a24      	ldr	r2, [pc, #144]	; (8008e28 <UART_Start_Receive_IT+0x18c>)
 8008d98:	665a      	str	r2, [r3, #100]	; 0x64
 8008d9a:	e002      	b.n	8008da2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4a23      	ldr	r2, [pc, #140]	; (8008e2c <UART_Start_Receive_IT+0x190>)
 8008da0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d019      	beq.n	8008de6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e6      	bne.n	8008db2 <UART_Start_Receive_IT+0x116>
 8008de4:	e018      	b.n	8008e18 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	613b      	str	r3, [r7, #16]
   return(result);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f043 0320 	orr.w	r3, r3, #32
 8008dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e04:	623b      	str	r3, [r7, #32]
 8008e06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	69f9      	ldr	r1, [r7, #28]
 8008e0a:	6a3a      	ldr	r2, [r7, #32]
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e6      	bne.n	8008de6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	375c      	adds	r7, #92	; 0x5c
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	0800924f 	.word	0x0800924f
 8008e2c:	080090ef 	.word	0x080090ef

08008e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b095      	sub	sp, #84	; 0x54
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e56:	643b      	str	r3, [r7, #64]	; 0x40
 8008e58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e6      	bne.n	8008e38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e5      	bne.n	8008e6a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d118      	bne.n	8008ed8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f023 0310 	bic.w	r3, r3, #16
 8008eba:	647b      	str	r3, [r7, #68]	; 0x44
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec4:	61bb      	str	r3, [r7, #24]
 8008ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6979      	ldr	r1, [r7, #20]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2220      	movs	r2, #32
 8008edc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008eea:	bf00      	nop
 8008eec:	3754      	adds	r7, #84	; 0x54
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f7ff facf 	bl	80084b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f1a:	bf00      	nop
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b08f      	sub	sp, #60	; 0x3c
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f2e:	2b21      	cmp	r3, #33	; 0x21
 8008f30:	d14d      	bne.n	8008fce <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d132      	bne.n	8008fa4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f52:	637b      	str	r3, [r7, #52]	; 0x34
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f5e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e6      	bne.n	8008f3e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f84:	633b      	str	r3, [r7, #48]	; 0x30
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	61bb      	str	r3, [r7, #24]
 8008f90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	6979      	ldr	r1, [r7, #20]
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e6      	bne.n	8008f70 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008fa2:	e014      	b.n	8008fce <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa8:	781a      	ldrb	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	b292      	uxth	r2, r2
 8008fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008fce:	bf00      	nop
 8008fd0:	373c      	adds	r7, #60	; 0x3c
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b091      	sub	sp, #68	; 0x44
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fe6:	2b21      	cmp	r3, #33	; 0x21
 8008fe8:	d151      	bne.n	800908e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d132      	bne.n	800905c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	623b      	str	r3, [r7, #32]
   return(result);
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800900a:	63bb      	str	r3, [r7, #56]	; 0x38
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009014:	633b      	str	r3, [r7, #48]	; 0x30
 8009016:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800901a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e6      	bne.n	8008ff6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	60fb      	str	r3, [r7, #12]
   return(result);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903c:	637b      	str	r3, [r7, #52]	; 0x34
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009046:	61fb      	str	r3, [r7, #28]
 8009048:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	69b9      	ldr	r1, [r7, #24]
 800904c:	69fa      	ldr	r2, [r7, #28]
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	617b      	str	r3, [r7, #20]
   return(result);
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e6      	bne.n	8009028 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800905a:	e018      	b.n	800908e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009064:	881a      	ldrh	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800906e:	b292      	uxth	r2, r2
 8009070:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009076:	1c9a      	adds	r2, r3, #2
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009082:	b29b      	uxth	r3, r3
 8009084:	3b01      	subs	r3, #1
 8009086:	b29a      	uxth	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800908e:	bf00      	nop
 8009090:	3744      	adds	r7, #68	; 0x44
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b088      	sub	sp, #32
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b6:	61fb      	str	r3, [r7, #28]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	461a      	mov	r2, r3
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	61bb      	str	r3, [r7, #24]
 80090c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	6979      	ldr	r1, [r7, #20]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	e841 2300 	strex	r3, r2, [r1]
 80090cc:	613b      	str	r3, [r7, #16]
   return(result);
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e6      	bne.n	80090a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2220      	movs	r2, #32
 80090d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7f9 fc83 	bl	80029ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e6:	bf00      	nop
 80090e8:	3720      	adds	r7, #32
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b096      	sub	sp, #88	; 0x58
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009104:	2b22      	cmp	r3, #34	; 0x22
 8009106:	f040 8094 	bne.w	8009232 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009110:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009114:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009118:	b2d9      	uxtb	r1, r3
 800911a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800911e:	b2da      	uxtb	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009124:	400a      	ands	r2, r1
 8009126:	b2d2      	uxtb	r2, r2
 8009128:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800913a:	b29b      	uxth	r3, r3
 800913c:	3b01      	subs	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d179      	bne.n	8009246 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	e853 3f00 	ldrex	r3, [r3]
 800915e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009162:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009166:	653b      	str	r3, [r7, #80]	; 0x50
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	461a      	mov	r2, r3
 800916e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009170:	647b      	str	r3, [r7, #68]	; 0x44
 8009172:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800917e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e6      	bne.n	8009152 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3308      	adds	r3, #8
 800918a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	623b      	str	r3, [r7, #32]
   return(result);
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	f023 0301 	bic.w	r3, r3, #1
 800919a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3308      	adds	r3, #8
 80091a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091a4:	633a      	str	r2, [r7, #48]	; 0x30
 80091a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e5      	bne.n	8009184 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d12e      	bne.n	800922a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	e853 3f00 	ldrex	r3, [r3]
 80091de:	60fb      	str	r3, [r7, #12]
   return(result);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 0310 	bic.w	r3, r3, #16
 80091e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f0:	61fb      	str	r3, [r7, #28]
 80091f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f4:	69b9      	ldr	r1, [r7, #24]
 80091f6:	69fa      	ldr	r2, [r7, #28]
 80091f8:	e841 2300 	strex	r3, r2, [r1]
 80091fc:	617b      	str	r3, [r7, #20]
   return(result);
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1e6      	bne.n	80091d2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	2b10      	cmp	r3, #16
 8009210:	d103      	bne.n	800921a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2210      	movs	r2, #16
 8009218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7ff f952 	bl	80084cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009228:	e00d      	b.n	8009246 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7f9 f9a0 	bl	8002570 <HAL_UART_RxCpltCallback>
}
 8009230:	e009      	b.n	8009246 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	8b1b      	ldrh	r3, [r3, #24]
 8009238:	b29a      	uxth	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0208 	orr.w	r2, r2, #8
 8009242:	b292      	uxth	r2, r2
 8009244:	831a      	strh	r2, [r3, #24]
}
 8009246:	bf00      	nop
 8009248:	3758      	adds	r7, #88	; 0x58
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b096      	sub	sp, #88	; 0x58
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800925c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009264:	2b22      	cmp	r3, #34	; 0x22
 8009266:	f040 8094 	bne.w	8009392 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009270:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009278:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800927a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800927e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009282:	4013      	ands	r3, r2
 8009284:	b29a      	uxth	r2, r3
 8009286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009288:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928e:	1c9a      	adds	r2, r3, #2
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800929a:	b29b      	uxth	r3, r3
 800929c:	3b01      	subs	r3, #1
 800929e:	b29a      	uxth	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d179      	bne.n	80093a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ba:	e853 3f00 	ldrex	r3, [r3]
 80092be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	461a      	mov	r2, r3
 80092ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d0:	643b      	str	r3, [r7, #64]	; 0x40
 80092d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092d8:	e841 2300 	strex	r3, r2, [r1]
 80092dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1e6      	bne.n	80092b2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3308      	adds	r3, #8
 80092ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	f023 0301 	bic.w	r3, r3, #1
 80092fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3308      	adds	r3, #8
 8009302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800930a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800930c:	e841 2300 	strex	r3, r2, [r1]
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1e5      	bne.n	80092e4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2220      	movs	r2, #32
 800931c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009328:	2b01      	cmp	r3, #1
 800932a:	d12e      	bne.n	800938a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f023 0310 	bic.w	r3, r3, #16
 8009346:	647b      	str	r3, [r7, #68]	; 0x44
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009350:	61bb      	str	r3, [r7, #24]
 8009352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6979      	ldr	r1, [r7, #20]
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	613b      	str	r3, [r7, #16]
   return(result);
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e6      	bne.n	8009332 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	f003 0310 	and.w	r3, r3, #16
 800936e:	2b10      	cmp	r3, #16
 8009370:	d103      	bne.n	800937a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2210      	movs	r2, #16
 8009378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff f8a2 	bl	80084cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009388:	e00d      	b.n	80093a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7f9 f8f0 	bl	8002570 <HAL_UART_RxCpltCallback>
}
 8009390:	e009      	b.n	80093a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	8b1b      	ldrh	r3, [r3, #24]
 8009398:	b29a      	uxth	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0208 	orr.w	r2, r2, #8
 80093a2:	b292      	uxth	r2, r2
 80093a4:	831a      	strh	r2, [r3, #24]
}
 80093a6:	bf00      	nop
 80093a8:	3758      	adds	r7, #88	; 0x58
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b083      	sub	sp, #12
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093b6:	bf00      	nop
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
	...

080093c4 <__errno>:
 80093c4:	4b01      	ldr	r3, [pc, #4]	; (80093cc <__errno+0x8>)
 80093c6:	6818      	ldr	r0, [r3, #0]
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	200000ec 	.word	0x200000ec

080093d0 <__libc_init_array>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	4d0d      	ldr	r5, [pc, #52]	; (8009408 <__libc_init_array+0x38>)
 80093d4:	4c0d      	ldr	r4, [pc, #52]	; (800940c <__libc_init_array+0x3c>)
 80093d6:	1b64      	subs	r4, r4, r5
 80093d8:	10a4      	asrs	r4, r4, #2
 80093da:	2600      	movs	r6, #0
 80093dc:	42a6      	cmp	r6, r4
 80093de:	d109      	bne.n	80093f4 <__libc_init_array+0x24>
 80093e0:	4d0b      	ldr	r5, [pc, #44]	; (8009410 <__libc_init_array+0x40>)
 80093e2:	4c0c      	ldr	r4, [pc, #48]	; (8009414 <__libc_init_array+0x44>)
 80093e4:	f007 f826 	bl	8010434 <_init>
 80093e8:	1b64      	subs	r4, r4, r5
 80093ea:	10a4      	asrs	r4, r4, #2
 80093ec:	2600      	movs	r6, #0
 80093ee:	42a6      	cmp	r6, r4
 80093f0:	d105      	bne.n	80093fe <__libc_init_array+0x2e>
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f8:	4798      	blx	r3
 80093fa:	3601      	adds	r6, #1
 80093fc:	e7ee      	b.n	80093dc <__libc_init_array+0xc>
 80093fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009402:	4798      	blx	r3
 8009404:	3601      	adds	r6, #1
 8009406:	e7f2      	b.n	80093ee <__libc_init_array+0x1e>
 8009408:	08010c48 	.word	0x08010c48
 800940c:	08010c48 	.word	0x08010c48
 8009410:	08010c48 	.word	0x08010c48
 8009414:	08010c4c 	.word	0x08010c4c

08009418 <memset>:
 8009418:	4402      	add	r2, r0
 800941a:	4603      	mov	r3, r0
 800941c:	4293      	cmp	r3, r2
 800941e:	d100      	bne.n	8009422 <memset+0xa>
 8009420:	4770      	bx	lr
 8009422:	f803 1b01 	strb.w	r1, [r3], #1
 8009426:	e7f9      	b.n	800941c <memset+0x4>

08009428 <__cvt>:
 8009428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800942c:	ec55 4b10 	vmov	r4, r5, d0
 8009430:	2d00      	cmp	r5, #0
 8009432:	460e      	mov	r6, r1
 8009434:	4619      	mov	r1, r3
 8009436:	462b      	mov	r3, r5
 8009438:	bfbb      	ittet	lt
 800943a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800943e:	461d      	movlt	r5, r3
 8009440:	2300      	movge	r3, #0
 8009442:	232d      	movlt	r3, #45	; 0x2d
 8009444:	700b      	strb	r3, [r1, #0]
 8009446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009448:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800944c:	4691      	mov	r9, r2
 800944e:	f023 0820 	bic.w	r8, r3, #32
 8009452:	bfbc      	itt	lt
 8009454:	4622      	movlt	r2, r4
 8009456:	4614      	movlt	r4, r2
 8009458:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800945c:	d005      	beq.n	800946a <__cvt+0x42>
 800945e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009462:	d100      	bne.n	8009466 <__cvt+0x3e>
 8009464:	3601      	adds	r6, #1
 8009466:	2102      	movs	r1, #2
 8009468:	e000      	b.n	800946c <__cvt+0x44>
 800946a:	2103      	movs	r1, #3
 800946c:	ab03      	add	r3, sp, #12
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	ab02      	add	r3, sp, #8
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	ec45 4b10 	vmov	d0, r4, r5
 8009478:	4653      	mov	r3, sl
 800947a:	4632      	mov	r2, r6
 800947c:	f001 fe58 	bl	800b130 <_dtoa_r>
 8009480:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009484:	4607      	mov	r7, r0
 8009486:	d102      	bne.n	800948e <__cvt+0x66>
 8009488:	f019 0f01 	tst.w	r9, #1
 800948c:	d022      	beq.n	80094d4 <__cvt+0xac>
 800948e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009492:	eb07 0906 	add.w	r9, r7, r6
 8009496:	d110      	bne.n	80094ba <__cvt+0x92>
 8009498:	783b      	ldrb	r3, [r7, #0]
 800949a:	2b30      	cmp	r3, #48	; 0x30
 800949c:	d10a      	bne.n	80094b4 <__cvt+0x8c>
 800949e:	2200      	movs	r2, #0
 80094a0:	2300      	movs	r3, #0
 80094a2:	4620      	mov	r0, r4
 80094a4:	4629      	mov	r1, r5
 80094a6:	f7f7 fb0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80094aa:	b918      	cbnz	r0, 80094b4 <__cvt+0x8c>
 80094ac:	f1c6 0601 	rsb	r6, r6, #1
 80094b0:	f8ca 6000 	str.w	r6, [sl]
 80094b4:	f8da 3000 	ldr.w	r3, [sl]
 80094b8:	4499      	add	r9, r3
 80094ba:	2200      	movs	r2, #0
 80094bc:	2300      	movs	r3, #0
 80094be:	4620      	mov	r0, r4
 80094c0:	4629      	mov	r1, r5
 80094c2:	f7f7 fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 80094c6:	b108      	cbz	r0, 80094cc <__cvt+0xa4>
 80094c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80094cc:	2230      	movs	r2, #48	; 0x30
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	454b      	cmp	r3, r9
 80094d2:	d307      	bcc.n	80094e4 <__cvt+0xbc>
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094d8:	1bdb      	subs	r3, r3, r7
 80094da:	4638      	mov	r0, r7
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	b004      	add	sp, #16
 80094e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e4:	1c59      	adds	r1, r3, #1
 80094e6:	9103      	str	r1, [sp, #12]
 80094e8:	701a      	strb	r2, [r3, #0]
 80094ea:	e7f0      	b.n	80094ce <__cvt+0xa6>

080094ec <__exponent>:
 80094ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094ee:	4603      	mov	r3, r0
 80094f0:	2900      	cmp	r1, #0
 80094f2:	bfb8      	it	lt
 80094f4:	4249      	neglt	r1, r1
 80094f6:	f803 2b02 	strb.w	r2, [r3], #2
 80094fa:	bfb4      	ite	lt
 80094fc:	222d      	movlt	r2, #45	; 0x2d
 80094fe:	222b      	movge	r2, #43	; 0x2b
 8009500:	2909      	cmp	r1, #9
 8009502:	7042      	strb	r2, [r0, #1]
 8009504:	dd2a      	ble.n	800955c <__exponent+0x70>
 8009506:	f10d 0407 	add.w	r4, sp, #7
 800950a:	46a4      	mov	ip, r4
 800950c:	270a      	movs	r7, #10
 800950e:	46a6      	mov	lr, r4
 8009510:	460a      	mov	r2, r1
 8009512:	fb91 f6f7 	sdiv	r6, r1, r7
 8009516:	fb07 1516 	mls	r5, r7, r6, r1
 800951a:	3530      	adds	r5, #48	; 0x30
 800951c:	2a63      	cmp	r2, #99	; 0x63
 800951e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009522:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009526:	4631      	mov	r1, r6
 8009528:	dcf1      	bgt.n	800950e <__exponent+0x22>
 800952a:	3130      	adds	r1, #48	; 0x30
 800952c:	f1ae 0502 	sub.w	r5, lr, #2
 8009530:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009534:	1c44      	adds	r4, r0, #1
 8009536:	4629      	mov	r1, r5
 8009538:	4561      	cmp	r1, ip
 800953a:	d30a      	bcc.n	8009552 <__exponent+0x66>
 800953c:	f10d 0209 	add.w	r2, sp, #9
 8009540:	eba2 020e 	sub.w	r2, r2, lr
 8009544:	4565      	cmp	r5, ip
 8009546:	bf88      	it	hi
 8009548:	2200      	movhi	r2, #0
 800954a:	4413      	add	r3, r2
 800954c:	1a18      	subs	r0, r3, r0
 800954e:	b003      	add	sp, #12
 8009550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009556:	f804 2f01 	strb.w	r2, [r4, #1]!
 800955a:	e7ed      	b.n	8009538 <__exponent+0x4c>
 800955c:	2330      	movs	r3, #48	; 0x30
 800955e:	3130      	adds	r1, #48	; 0x30
 8009560:	7083      	strb	r3, [r0, #2]
 8009562:	70c1      	strb	r1, [r0, #3]
 8009564:	1d03      	adds	r3, r0, #4
 8009566:	e7f1      	b.n	800954c <__exponent+0x60>

08009568 <_printf_float>:
 8009568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	ed2d 8b02 	vpush	{d8}
 8009570:	b08d      	sub	sp, #52	; 0x34
 8009572:	460c      	mov	r4, r1
 8009574:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009578:	4616      	mov	r6, r2
 800957a:	461f      	mov	r7, r3
 800957c:	4605      	mov	r5, r0
 800957e:	f002 ff47 	bl	800c410 <_localeconv_r>
 8009582:	f8d0 a000 	ldr.w	sl, [r0]
 8009586:	4650      	mov	r0, sl
 8009588:	f7f6 fe22 	bl	80001d0 <strlen>
 800958c:	2300      	movs	r3, #0
 800958e:	930a      	str	r3, [sp, #40]	; 0x28
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	f8d8 3000 	ldr.w	r3, [r8]
 8009598:	f894 b018 	ldrb.w	fp, [r4, #24]
 800959c:	3307      	adds	r3, #7
 800959e:	f023 0307 	bic.w	r3, r3, #7
 80095a2:	f103 0208 	add.w	r2, r3, #8
 80095a6:	f8c8 2000 	str.w	r2, [r8]
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80095b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80095b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095ba:	9307      	str	r3, [sp, #28]
 80095bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80095c0:	ee08 0a10 	vmov	s16, r0
 80095c4:	4b9f      	ldr	r3, [pc, #636]	; (8009844 <_printf_float+0x2dc>)
 80095c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095ca:	f04f 32ff 	mov.w	r2, #4294967295
 80095ce:	f7f7 faad 	bl	8000b2c <__aeabi_dcmpun>
 80095d2:	bb88      	cbnz	r0, 8009638 <_printf_float+0xd0>
 80095d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095d8:	4b9a      	ldr	r3, [pc, #616]	; (8009844 <_printf_float+0x2dc>)
 80095da:	f04f 32ff 	mov.w	r2, #4294967295
 80095de:	f7f7 fa87 	bl	8000af0 <__aeabi_dcmple>
 80095e2:	bb48      	cbnz	r0, 8009638 <_printf_float+0xd0>
 80095e4:	2200      	movs	r2, #0
 80095e6:	2300      	movs	r3, #0
 80095e8:	4640      	mov	r0, r8
 80095ea:	4649      	mov	r1, r9
 80095ec:	f7f7 fa76 	bl	8000adc <__aeabi_dcmplt>
 80095f0:	b110      	cbz	r0, 80095f8 <_printf_float+0x90>
 80095f2:	232d      	movs	r3, #45	; 0x2d
 80095f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f8:	4b93      	ldr	r3, [pc, #588]	; (8009848 <_printf_float+0x2e0>)
 80095fa:	4894      	ldr	r0, [pc, #592]	; (800984c <_printf_float+0x2e4>)
 80095fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009600:	bf94      	ite	ls
 8009602:	4698      	movls	r8, r3
 8009604:	4680      	movhi	r8, r0
 8009606:	2303      	movs	r3, #3
 8009608:	6123      	str	r3, [r4, #16]
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	f023 0204 	bic.w	r2, r3, #4
 8009610:	6022      	str	r2, [r4, #0]
 8009612:	f04f 0900 	mov.w	r9, #0
 8009616:	9700      	str	r7, [sp, #0]
 8009618:	4633      	mov	r3, r6
 800961a:	aa0b      	add	r2, sp, #44	; 0x2c
 800961c:	4621      	mov	r1, r4
 800961e:	4628      	mov	r0, r5
 8009620:	f000 f9d8 	bl	80099d4 <_printf_common>
 8009624:	3001      	adds	r0, #1
 8009626:	f040 8090 	bne.w	800974a <_printf_float+0x1e2>
 800962a:	f04f 30ff 	mov.w	r0, #4294967295
 800962e:	b00d      	add	sp, #52	; 0x34
 8009630:	ecbd 8b02 	vpop	{d8}
 8009634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009638:	4642      	mov	r2, r8
 800963a:	464b      	mov	r3, r9
 800963c:	4640      	mov	r0, r8
 800963e:	4649      	mov	r1, r9
 8009640:	f7f7 fa74 	bl	8000b2c <__aeabi_dcmpun>
 8009644:	b140      	cbz	r0, 8009658 <_printf_float+0xf0>
 8009646:	464b      	mov	r3, r9
 8009648:	2b00      	cmp	r3, #0
 800964a:	bfbc      	itt	lt
 800964c:	232d      	movlt	r3, #45	; 0x2d
 800964e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009652:	487f      	ldr	r0, [pc, #508]	; (8009850 <_printf_float+0x2e8>)
 8009654:	4b7f      	ldr	r3, [pc, #508]	; (8009854 <_printf_float+0x2ec>)
 8009656:	e7d1      	b.n	80095fc <_printf_float+0x94>
 8009658:	6863      	ldr	r3, [r4, #4]
 800965a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800965e:	9206      	str	r2, [sp, #24]
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	d13f      	bne.n	80096e4 <_printf_float+0x17c>
 8009664:	2306      	movs	r3, #6
 8009666:	6063      	str	r3, [r4, #4]
 8009668:	9b05      	ldr	r3, [sp, #20]
 800966a:	6861      	ldr	r1, [r4, #4]
 800966c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009670:	2300      	movs	r3, #0
 8009672:	9303      	str	r3, [sp, #12]
 8009674:	ab0a      	add	r3, sp, #40	; 0x28
 8009676:	e9cd b301 	strd	fp, r3, [sp, #4]
 800967a:	ab09      	add	r3, sp, #36	; 0x24
 800967c:	ec49 8b10 	vmov	d0, r8, r9
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	6022      	str	r2, [r4, #0]
 8009684:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009688:	4628      	mov	r0, r5
 800968a:	f7ff fecd 	bl	8009428 <__cvt>
 800968e:	9b06      	ldr	r3, [sp, #24]
 8009690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009692:	2b47      	cmp	r3, #71	; 0x47
 8009694:	4680      	mov	r8, r0
 8009696:	d108      	bne.n	80096aa <_printf_float+0x142>
 8009698:	1cc8      	adds	r0, r1, #3
 800969a:	db02      	blt.n	80096a2 <_printf_float+0x13a>
 800969c:	6863      	ldr	r3, [r4, #4]
 800969e:	4299      	cmp	r1, r3
 80096a0:	dd41      	ble.n	8009726 <_printf_float+0x1be>
 80096a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80096a6:	fa5f fb8b 	uxtb.w	fp, fp
 80096aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096ae:	d820      	bhi.n	80096f2 <_printf_float+0x18a>
 80096b0:	3901      	subs	r1, #1
 80096b2:	465a      	mov	r2, fp
 80096b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096b8:	9109      	str	r1, [sp, #36]	; 0x24
 80096ba:	f7ff ff17 	bl	80094ec <__exponent>
 80096be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096c0:	1813      	adds	r3, r2, r0
 80096c2:	2a01      	cmp	r2, #1
 80096c4:	4681      	mov	r9, r0
 80096c6:	6123      	str	r3, [r4, #16]
 80096c8:	dc02      	bgt.n	80096d0 <_printf_float+0x168>
 80096ca:	6822      	ldr	r2, [r4, #0]
 80096cc:	07d2      	lsls	r2, r2, #31
 80096ce:	d501      	bpl.n	80096d4 <_printf_float+0x16c>
 80096d0:	3301      	adds	r3, #1
 80096d2:	6123      	str	r3, [r4, #16]
 80096d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d09c      	beq.n	8009616 <_printf_float+0xae>
 80096dc:	232d      	movs	r3, #45	; 0x2d
 80096de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e2:	e798      	b.n	8009616 <_printf_float+0xae>
 80096e4:	9a06      	ldr	r2, [sp, #24]
 80096e6:	2a47      	cmp	r2, #71	; 0x47
 80096e8:	d1be      	bne.n	8009668 <_printf_float+0x100>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1bc      	bne.n	8009668 <_printf_float+0x100>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e7b9      	b.n	8009666 <_printf_float+0xfe>
 80096f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096f6:	d118      	bne.n	800972a <_printf_float+0x1c2>
 80096f8:	2900      	cmp	r1, #0
 80096fa:	6863      	ldr	r3, [r4, #4]
 80096fc:	dd0b      	ble.n	8009716 <_printf_float+0x1ae>
 80096fe:	6121      	str	r1, [r4, #16]
 8009700:	b913      	cbnz	r3, 8009708 <_printf_float+0x1a0>
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	07d0      	lsls	r0, r2, #31
 8009706:	d502      	bpl.n	800970e <_printf_float+0x1a6>
 8009708:	3301      	adds	r3, #1
 800970a:	440b      	add	r3, r1
 800970c:	6123      	str	r3, [r4, #16]
 800970e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009710:	f04f 0900 	mov.w	r9, #0
 8009714:	e7de      	b.n	80096d4 <_printf_float+0x16c>
 8009716:	b913      	cbnz	r3, 800971e <_printf_float+0x1b6>
 8009718:	6822      	ldr	r2, [r4, #0]
 800971a:	07d2      	lsls	r2, r2, #31
 800971c:	d501      	bpl.n	8009722 <_printf_float+0x1ba>
 800971e:	3302      	adds	r3, #2
 8009720:	e7f4      	b.n	800970c <_printf_float+0x1a4>
 8009722:	2301      	movs	r3, #1
 8009724:	e7f2      	b.n	800970c <_printf_float+0x1a4>
 8009726:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800972a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800972c:	4299      	cmp	r1, r3
 800972e:	db05      	blt.n	800973c <_printf_float+0x1d4>
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	6121      	str	r1, [r4, #16]
 8009734:	07d8      	lsls	r0, r3, #31
 8009736:	d5ea      	bpl.n	800970e <_printf_float+0x1a6>
 8009738:	1c4b      	adds	r3, r1, #1
 800973a:	e7e7      	b.n	800970c <_printf_float+0x1a4>
 800973c:	2900      	cmp	r1, #0
 800973e:	bfd4      	ite	le
 8009740:	f1c1 0202 	rsble	r2, r1, #2
 8009744:	2201      	movgt	r2, #1
 8009746:	4413      	add	r3, r2
 8009748:	e7e0      	b.n	800970c <_printf_float+0x1a4>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	055a      	lsls	r2, r3, #21
 800974e:	d407      	bmi.n	8009760 <_printf_float+0x1f8>
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	4642      	mov	r2, r8
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	d12c      	bne.n	80097b8 <_printf_float+0x250>
 800975e:	e764      	b.n	800962a <_printf_float+0xc2>
 8009760:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009764:	f240 80e0 	bls.w	8009928 <_printf_float+0x3c0>
 8009768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800976c:	2200      	movs	r2, #0
 800976e:	2300      	movs	r3, #0
 8009770:	f7f7 f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009774:	2800      	cmp	r0, #0
 8009776:	d034      	beq.n	80097e2 <_printf_float+0x27a>
 8009778:	4a37      	ldr	r2, [pc, #220]	; (8009858 <_printf_float+0x2f0>)
 800977a:	2301      	movs	r3, #1
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f af51 	beq.w	800962a <_printf_float+0xc2>
 8009788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800978c:	429a      	cmp	r2, r3
 800978e:	db02      	blt.n	8009796 <_printf_float+0x22e>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	07d8      	lsls	r0, r3, #31
 8009794:	d510      	bpl.n	80097b8 <_printf_float+0x250>
 8009796:	ee18 3a10 	vmov	r3, s16
 800979a:	4652      	mov	r2, sl
 800979c:	4631      	mov	r1, r6
 800979e:	4628      	mov	r0, r5
 80097a0:	47b8      	blx	r7
 80097a2:	3001      	adds	r0, #1
 80097a4:	f43f af41 	beq.w	800962a <_printf_float+0xc2>
 80097a8:	f04f 0800 	mov.w	r8, #0
 80097ac:	f104 091a 	add.w	r9, r4, #26
 80097b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b2:	3b01      	subs	r3, #1
 80097b4:	4543      	cmp	r3, r8
 80097b6:	dc09      	bgt.n	80097cc <_printf_float+0x264>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	079b      	lsls	r3, r3, #30
 80097bc:	f100 8105 	bmi.w	80099ca <_printf_float+0x462>
 80097c0:	68e0      	ldr	r0, [r4, #12]
 80097c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c4:	4298      	cmp	r0, r3
 80097c6:	bfb8      	it	lt
 80097c8:	4618      	movlt	r0, r3
 80097ca:	e730      	b.n	800962e <_printf_float+0xc6>
 80097cc:	2301      	movs	r3, #1
 80097ce:	464a      	mov	r2, r9
 80097d0:	4631      	mov	r1, r6
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b8      	blx	r7
 80097d6:	3001      	adds	r0, #1
 80097d8:	f43f af27 	beq.w	800962a <_printf_float+0xc2>
 80097dc:	f108 0801 	add.w	r8, r8, #1
 80097e0:	e7e6      	b.n	80097b0 <_printf_float+0x248>
 80097e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dc39      	bgt.n	800985c <_printf_float+0x2f4>
 80097e8:	4a1b      	ldr	r2, [pc, #108]	; (8009858 <_printf_float+0x2f0>)
 80097ea:	2301      	movs	r3, #1
 80097ec:	4631      	mov	r1, r6
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b8      	blx	r7
 80097f2:	3001      	adds	r0, #1
 80097f4:	f43f af19 	beq.w	800962a <_printf_float+0xc2>
 80097f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097fc:	4313      	orrs	r3, r2
 80097fe:	d102      	bne.n	8009806 <_printf_float+0x29e>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	07d9      	lsls	r1, r3, #31
 8009804:	d5d8      	bpl.n	80097b8 <_printf_float+0x250>
 8009806:	ee18 3a10 	vmov	r3, s16
 800980a:	4652      	mov	r2, sl
 800980c:	4631      	mov	r1, r6
 800980e:	4628      	mov	r0, r5
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	f43f af09 	beq.w	800962a <_printf_float+0xc2>
 8009818:	f04f 0900 	mov.w	r9, #0
 800981c:	f104 0a1a 	add.w	sl, r4, #26
 8009820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009822:	425b      	negs	r3, r3
 8009824:	454b      	cmp	r3, r9
 8009826:	dc01      	bgt.n	800982c <_printf_float+0x2c4>
 8009828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982a:	e792      	b.n	8009752 <_printf_float+0x1ea>
 800982c:	2301      	movs	r3, #1
 800982e:	4652      	mov	r2, sl
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	47b8      	blx	r7
 8009836:	3001      	adds	r0, #1
 8009838:	f43f aef7 	beq.w	800962a <_printf_float+0xc2>
 800983c:	f109 0901 	add.w	r9, r9, #1
 8009840:	e7ee      	b.n	8009820 <_printf_float+0x2b8>
 8009842:	bf00      	nop
 8009844:	7fefffff 	.word	0x7fefffff
 8009848:	080104bc 	.word	0x080104bc
 800984c:	080104c0 	.word	0x080104c0
 8009850:	080104c8 	.word	0x080104c8
 8009854:	080104c4 	.word	0x080104c4
 8009858:	080104cc 	.word	0x080104cc
 800985c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800985e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009860:	429a      	cmp	r2, r3
 8009862:	bfa8      	it	ge
 8009864:	461a      	movge	r2, r3
 8009866:	2a00      	cmp	r2, #0
 8009868:	4691      	mov	r9, r2
 800986a:	dc37      	bgt.n	80098dc <_printf_float+0x374>
 800986c:	f04f 0b00 	mov.w	fp, #0
 8009870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009874:	f104 021a 	add.w	r2, r4, #26
 8009878:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800987a:	9305      	str	r3, [sp, #20]
 800987c:	eba3 0309 	sub.w	r3, r3, r9
 8009880:	455b      	cmp	r3, fp
 8009882:	dc33      	bgt.n	80098ec <_printf_float+0x384>
 8009884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009888:	429a      	cmp	r2, r3
 800988a:	db3b      	blt.n	8009904 <_printf_float+0x39c>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	07da      	lsls	r2, r3, #31
 8009890:	d438      	bmi.n	8009904 <_printf_float+0x39c>
 8009892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009894:	9a05      	ldr	r2, [sp, #20]
 8009896:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009898:	1a9a      	subs	r2, r3, r2
 800989a:	eba3 0901 	sub.w	r9, r3, r1
 800989e:	4591      	cmp	r9, r2
 80098a0:	bfa8      	it	ge
 80098a2:	4691      	movge	r9, r2
 80098a4:	f1b9 0f00 	cmp.w	r9, #0
 80098a8:	dc35      	bgt.n	8009916 <_printf_float+0x3ae>
 80098aa:	f04f 0800 	mov.w	r8, #0
 80098ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098b2:	f104 0a1a 	add.w	sl, r4, #26
 80098b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098ba:	1a9b      	subs	r3, r3, r2
 80098bc:	eba3 0309 	sub.w	r3, r3, r9
 80098c0:	4543      	cmp	r3, r8
 80098c2:	f77f af79 	ble.w	80097b8 <_printf_float+0x250>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4652      	mov	r2, sl
 80098ca:	4631      	mov	r1, r6
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b8      	blx	r7
 80098d0:	3001      	adds	r0, #1
 80098d2:	f43f aeaa 	beq.w	800962a <_printf_float+0xc2>
 80098d6:	f108 0801 	add.w	r8, r8, #1
 80098da:	e7ec      	b.n	80098b6 <_printf_float+0x34e>
 80098dc:	4613      	mov	r3, r2
 80098de:	4631      	mov	r1, r6
 80098e0:	4642      	mov	r2, r8
 80098e2:	4628      	mov	r0, r5
 80098e4:	47b8      	blx	r7
 80098e6:	3001      	adds	r0, #1
 80098e8:	d1c0      	bne.n	800986c <_printf_float+0x304>
 80098ea:	e69e      	b.n	800962a <_printf_float+0xc2>
 80098ec:	2301      	movs	r3, #1
 80098ee:	4631      	mov	r1, r6
 80098f0:	4628      	mov	r0, r5
 80098f2:	9205      	str	r2, [sp, #20]
 80098f4:	47b8      	blx	r7
 80098f6:	3001      	adds	r0, #1
 80098f8:	f43f ae97 	beq.w	800962a <_printf_float+0xc2>
 80098fc:	9a05      	ldr	r2, [sp, #20]
 80098fe:	f10b 0b01 	add.w	fp, fp, #1
 8009902:	e7b9      	b.n	8009878 <_printf_float+0x310>
 8009904:	ee18 3a10 	vmov	r3, s16
 8009908:	4652      	mov	r2, sl
 800990a:	4631      	mov	r1, r6
 800990c:	4628      	mov	r0, r5
 800990e:	47b8      	blx	r7
 8009910:	3001      	adds	r0, #1
 8009912:	d1be      	bne.n	8009892 <_printf_float+0x32a>
 8009914:	e689      	b.n	800962a <_printf_float+0xc2>
 8009916:	9a05      	ldr	r2, [sp, #20]
 8009918:	464b      	mov	r3, r9
 800991a:	4442      	add	r2, r8
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	47b8      	blx	r7
 8009922:	3001      	adds	r0, #1
 8009924:	d1c1      	bne.n	80098aa <_printf_float+0x342>
 8009926:	e680      	b.n	800962a <_printf_float+0xc2>
 8009928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800992a:	2a01      	cmp	r2, #1
 800992c:	dc01      	bgt.n	8009932 <_printf_float+0x3ca>
 800992e:	07db      	lsls	r3, r3, #31
 8009930:	d538      	bpl.n	80099a4 <_printf_float+0x43c>
 8009932:	2301      	movs	r3, #1
 8009934:	4642      	mov	r2, r8
 8009936:	4631      	mov	r1, r6
 8009938:	4628      	mov	r0, r5
 800993a:	47b8      	blx	r7
 800993c:	3001      	adds	r0, #1
 800993e:	f43f ae74 	beq.w	800962a <_printf_float+0xc2>
 8009942:	ee18 3a10 	vmov	r3, s16
 8009946:	4652      	mov	r2, sl
 8009948:	4631      	mov	r1, r6
 800994a:	4628      	mov	r0, r5
 800994c:	47b8      	blx	r7
 800994e:	3001      	adds	r0, #1
 8009950:	f43f ae6b 	beq.w	800962a <_printf_float+0xc2>
 8009954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009958:	2200      	movs	r2, #0
 800995a:	2300      	movs	r3, #0
 800995c:	f7f7 f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009960:	b9d8      	cbnz	r0, 800999a <_printf_float+0x432>
 8009962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009964:	f108 0201 	add.w	r2, r8, #1
 8009968:	3b01      	subs	r3, #1
 800996a:	4631      	mov	r1, r6
 800996c:	4628      	mov	r0, r5
 800996e:	47b8      	blx	r7
 8009970:	3001      	adds	r0, #1
 8009972:	d10e      	bne.n	8009992 <_printf_float+0x42a>
 8009974:	e659      	b.n	800962a <_printf_float+0xc2>
 8009976:	2301      	movs	r3, #1
 8009978:	4652      	mov	r2, sl
 800997a:	4631      	mov	r1, r6
 800997c:	4628      	mov	r0, r5
 800997e:	47b8      	blx	r7
 8009980:	3001      	adds	r0, #1
 8009982:	f43f ae52 	beq.w	800962a <_printf_float+0xc2>
 8009986:	f108 0801 	add.w	r8, r8, #1
 800998a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800998c:	3b01      	subs	r3, #1
 800998e:	4543      	cmp	r3, r8
 8009990:	dcf1      	bgt.n	8009976 <_printf_float+0x40e>
 8009992:	464b      	mov	r3, r9
 8009994:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009998:	e6dc      	b.n	8009754 <_printf_float+0x1ec>
 800999a:	f04f 0800 	mov.w	r8, #0
 800999e:	f104 0a1a 	add.w	sl, r4, #26
 80099a2:	e7f2      	b.n	800998a <_printf_float+0x422>
 80099a4:	2301      	movs	r3, #1
 80099a6:	4642      	mov	r2, r8
 80099a8:	e7df      	b.n	800996a <_printf_float+0x402>
 80099aa:	2301      	movs	r3, #1
 80099ac:	464a      	mov	r2, r9
 80099ae:	4631      	mov	r1, r6
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b8      	blx	r7
 80099b4:	3001      	adds	r0, #1
 80099b6:	f43f ae38 	beq.w	800962a <_printf_float+0xc2>
 80099ba:	f108 0801 	add.w	r8, r8, #1
 80099be:	68e3      	ldr	r3, [r4, #12]
 80099c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099c2:	1a5b      	subs	r3, r3, r1
 80099c4:	4543      	cmp	r3, r8
 80099c6:	dcf0      	bgt.n	80099aa <_printf_float+0x442>
 80099c8:	e6fa      	b.n	80097c0 <_printf_float+0x258>
 80099ca:	f04f 0800 	mov.w	r8, #0
 80099ce:	f104 0919 	add.w	r9, r4, #25
 80099d2:	e7f4      	b.n	80099be <_printf_float+0x456>

080099d4 <_printf_common>:
 80099d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d8:	4616      	mov	r6, r2
 80099da:	4699      	mov	r9, r3
 80099dc:	688a      	ldr	r2, [r1, #8]
 80099de:	690b      	ldr	r3, [r1, #16]
 80099e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099e4:	4293      	cmp	r3, r2
 80099e6:	bfb8      	it	lt
 80099e8:	4613      	movlt	r3, r2
 80099ea:	6033      	str	r3, [r6, #0]
 80099ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099f0:	4607      	mov	r7, r0
 80099f2:	460c      	mov	r4, r1
 80099f4:	b10a      	cbz	r2, 80099fa <_printf_common+0x26>
 80099f6:	3301      	adds	r3, #1
 80099f8:	6033      	str	r3, [r6, #0]
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	0699      	lsls	r1, r3, #26
 80099fe:	bf42      	ittt	mi
 8009a00:	6833      	ldrmi	r3, [r6, #0]
 8009a02:	3302      	addmi	r3, #2
 8009a04:	6033      	strmi	r3, [r6, #0]
 8009a06:	6825      	ldr	r5, [r4, #0]
 8009a08:	f015 0506 	ands.w	r5, r5, #6
 8009a0c:	d106      	bne.n	8009a1c <_printf_common+0x48>
 8009a0e:	f104 0a19 	add.w	sl, r4, #25
 8009a12:	68e3      	ldr	r3, [r4, #12]
 8009a14:	6832      	ldr	r2, [r6, #0]
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	42ab      	cmp	r3, r5
 8009a1a:	dc26      	bgt.n	8009a6a <_printf_common+0x96>
 8009a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a20:	1e13      	subs	r3, r2, #0
 8009a22:	6822      	ldr	r2, [r4, #0]
 8009a24:	bf18      	it	ne
 8009a26:	2301      	movne	r3, #1
 8009a28:	0692      	lsls	r2, r2, #26
 8009a2a:	d42b      	bmi.n	8009a84 <_printf_common+0xb0>
 8009a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a30:	4649      	mov	r1, r9
 8009a32:	4638      	mov	r0, r7
 8009a34:	47c0      	blx	r8
 8009a36:	3001      	adds	r0, #1
 8009a38:	d01e      	beq.n	8009a78 <_printf_common+0xa4>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	68e5      	ldr	r5, [r4, #12]
 8009a3e:	6832      	ldr	r2, [r6, #0]
 8009a40:	f003 0306 	and.w	r3, r3, #6
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	bf08      	it	eq
 8009a48:	1aad      	subeq	r5, r5, r2
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	6922      	ldr	r2, [r4, #16]
 8009a4e:	bf0c      	ite	eq
 8009a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a54:	2500      	movne	r5, #0
 8009a56:	4293      	cmp	r3, r2
 8009a58:	bfc4      	itt	gt
 8009a5a:	1a9b      	subgt	r3, r3, r2
 8009a5c:	18ed      	addgt	r5, r5, r3
 8009a5e:	2600      	movs	r6, #0
 8009a60:	341a      	adds	r4, #26
 8009a62:	42b5      	cmp	r5, r6
 8009a64:	d11a      	bne.n	8009a9c <_printf_common+0xc8>
 8009a66:	2000      	movs	r0, #0
 8009a68:	e008      	b.n	8009a7c <_printf_common+0xa8>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4652      	mov	r2, sl
 8009a6e:	4649      	mov	r1, r9
 8009a70:	4638      	mov	r0, r7
 8009a72:	47c0      	blx	r8
 8009a74:	3001      	adds	r0, #1
 8009a76:	d103      	bne.n	8009a80 <_printf_common+0xac>
 8009a78:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a80:	3501      	adds	r5, #1
 8009a82:	e7c6      	b.n	8009a12 <_printf_common+0x3e>
 8009a84:	18e1      	adds	r1, r4, r3
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	2030      	movs	r0, #48	; 0x30
 8009a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a8e:	4422      	add	r2, r4
 8009a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a98:	3302      	adds	r3, #2
 8009a9a:	e7c7      	b.n	8009a2c <_printf_common+0x58>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	47c0      	blx	r8
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	d0e6      	beq.n	8009a78 <_printf_common+0xa4>
 8009aaa:	3601      	adds	r6, #1
 8009aac:	e7d9      	b.n	8009a62 <_printf_common+0x8e>
	...

08009ab0 <_printf_i>:
 8009ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	7e0f      	ldrb	r7, [r1, #24]
 8009ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ab8:	2f78      	cmp	r7, #120	; 0x78
 8009aba:	4691      	mov	r9, r2
 8009abc:	4680      	mov	r8, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	469a      	mov	sl, r3
 8009ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ac6:	d807      	bhi.n	8009ad8 <_printf_i+0x28>
 8009ac8:	2f62      	cmp	r7, #98	; 0x62
 8009aca:	d80a      	bhi.n	8009ae2 <_printf_i+0x32>
 8009acc:	2f00      	cmp	r7, #0
 8009ace:	f000 80d8 	beq.w	8009c82 <_printf_i+0x1d2>
 8009ad2:	2f58      	cmp	r7, #88	; 0x58
 8009ad4:	f000 80a3 	beq.w	8009c1e <_printf_i+0x16e>
 8009ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ae0:	e03a      	b.n	8009b58 <_printf_i+0xa8>
 8009ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ae6:	2b15      	cmp	r3, #21
 8009ae8:	d8f6      	bhi.n	8009ad8 <_printf_i+0x28>
 8009aea:	a101      	add	r1, pc, #4	; (adr r1, 8009af0 <_printf_i+0x40>)
 8009aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009af0:	08009b49 	.word	0x08009b49
 8009af4:	08009b5d 	.word	0x08009b5d
 8009af8:	08009ad9 	.word	0x08009ad9
 8009afc:	08009ad9 	.word	0x08009ad9
 8009b00:	08009ad9 	.word	0x08009ad9
 8009b04:	08009ad9 	.word	0x08009ad9
 8009b08:	08009b5d 	.word	0x08009b5d
 8009b0c:	08009ad9 	.word	0x08009ad9
 8009b10:	08009ad9 	.word	0x08009ad9
 8009b14:	08009ad9 	.word	0x08009ad9
 8009b18:	08009ad9 	.word	0x08009ad9
 8009b1c:	08009c69 	.word	0x08009c69
 8009b20:	08009b8d 	.word	0x08009b8d
 8009b24:	08009c4b 	.word	0x08009c4b
 8009b28:	08009ad9 	.word	0x08009ad9
 8009b2c:	08009ad9 	.word	0x08009ad9
 8009b30:	08009c8b 	.word	0x08009c8b
 8009b34:	08009ad9 	.word	0x08009ad9
 8009b38:	08009b8d 	.word	0x08009b8d
 8009b3c:	08009ad9 	.word	0x08009ad9
 8009b40:	08009ad9 	.word	0x08009ad9
 8009b44:	08009c53 	.word	0x08009c53
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	1d1a      	adds	r2, r3, #4
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	602a      	str	r2, [r5, #0]
 8009b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e0a3      	b.n	8009ca4 <_printf_i+0x1f4>
 8009b5c:	6820      	ldr	r0, [r4, #0]
 8009b5e:	6829      	ldr	r1, [r5, #0]
 8009b60:	0606      	lsls	r6, r0, #24
 8009b62:	f101 0304 	add.w	r3, r1, #4
 8009b66:	d50a      	bpl.n	8009b7e <_printf_i+0xce>
 8009b68:	680e      	ldr	r6, [r1, #0]
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	2e00      	cmp	r6, #0
 8009b6e:	da03      	bge.n	8009b78 <_printf_i+0xc8>
 8009b70:	232d      	movs	r3, #45	; 0x2d
 8009b72:	4276      	negs	r6, r6
 8009b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b78:	485e      	ldr	r0, [pc, #376]	; (8009cf4 <_printf_i+0x244>)
 8009b7a:	230a      	movs	r3, #10
 8009b7c:	e019      	b.n	8009bb2 <_printf_i+0x102>
 8009b7e:	680e      	ldr	r6, [r1, #0]
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b86:	bf18      	it	ne
 8009b88:	b236      	sxthne	r6, r6
 8009b8a:	e7ef      	b.n	8009b6c <_printf_i+0xbc>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	6820      	ldr	r0, [r4, #0]
 8009b90:	1d19      	adds	r1, r3, #4
 8009b92:	6029      	str	r1, [r5, #0]
 8009b94:	0601      	lsls	r1, r0, #24
 8009b96:	d501      	bpl.n	8009b9c <_printf_i+0xec>
 8009b98:	681e      	ldr	r6, [r3, #0]
 8009b9a:	e002      	b.n	8009ba2 <_printf_i+0xf2>
 8009b9c:	0646      	lsls	r6, r0, #25
 8009b9e:	d5fb      	bpl.n	8009b98 <_printf_i+0xe8>
 8009ba0:	881e      	ldrh	r6, [r3, #0]
 8009ba2:	4854      	ldr	r0, [pc, #336]	; (8009cf4 <_printf_i+0x244>)
 8009ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ba6:	bf0c      	ite	eq
 8009ba8:	2308      	moveq	r3, #8
 8009baa:	230a      	movne	r3, #10
 8009bac:	2100      	movs	r1, #0
 8009bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bb2:	6865      	ldr	r5, [r4, #4]
 8009bb4:	60a5      	str	r5, [r4, #8]
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	bfa2      	ittt	ge
 8009bba:	6821      	ldrge	r1, [r4, #0]
 8009bbc:	f021 0104 	bicge.w	r1, r1, #4
 8009bc0:	6021      	strge	r1, [r4, #0]
 8009bc2:	b90e      	cbnz	r6, 8009bc8 <_printf_i+0x118>
 8009bc4:	2d00      	cmp	r5, #0
 8009bc6:	d04d      	beq.n	8009c64 <_printf_i+0x1b4>
 8009bc8:	4615      	mov	r5, r2
 8009bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bce:	fb03 6711 	mls	r7, r3, r1, r6
 8009bd2:	5dc7      	ldrb	r7, [r0, r7]
 8009bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bd8:	4637      	mov	r7, r6
 8009bda:	42bb      	cmp	r3, r7
 8009bdc:	460e      	mov	r6, r1
 8009bde:	d9f4      	bls.n	8009bca <_printf_i+0x11a>
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d10b      	bne.n	8009bfc <_printf_i+0x14c>
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	07de      	lsls	r6, r3, #31
 8009be8:	d508      	bpl.n	8009bfc <_printf_i+0x14c>
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	6861      	ldr	r1, [r4, #4]
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	bfde      	ittt	le
 8009bf2:	2330      	movle	r3, #48	; 0x30
 8009bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bfc:	1b52      	subs	r2, r2, r5
 8009bfe:	6122      	str	r2, [r4, #16]
 8009c00:	f8cd a000 	str.w	sl, [sp]
 8009c04:	464b      	mov	r3, r9
 8009c06:	aa03      	add	r2, sp, #12
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	f7ff fee2 	bl	80099d4 <_printf_common>
 8009c10:	3001      	adds	r0, #1
 8009c12:	d14c      	bne.n	8009cae <_printf_i+0x1fe>
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	b004      	add	sp, #16
 8009c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1e:	4835      	ldr	r0, [pc, #212]	; (8009cf4 <_printf_i+0x244>)
 8009c20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c24:	6829      	ldr	r1, [r5, #0]
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c2c:	6029      	str	r1, [r5, #0]
 8009c2e:	061d      	lsls	r5, r3, #24
 8009c30:	d514      	bpl.n	8009c5c <_printf_i+0x1ac>
 8009c32:	07df      	lsls	r7, r3, #31
 8009c34:	bf44      	itt	mi
 8009c36:	f043 0320 	orrmi.w	r3, r3, #32
 8009c3a:	6023      	strmi	r3, [r4, #0]
 8009c3c:	b91e      	cbnz	r6, 8009c46 <_printf_i+0x196>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	f023 0320 	bic.w	r3, r3, #32
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	2310      	movs	r3, #16
 8009c48:	e7b0      	b.n	8009bac <_printf_i+0xfc>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	f043 0320 	orr.w	r3, r3, #32
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	2378      	movs	r3, #120	; 0x78
 8009c54:	4828      	ldr	r0, [pc, #160]	; (8009cf8 <_printf_i+0x248>)
 8009c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c5a:	e7e3      	b.n	8009c24 <_printf_i+0x174>
 8009c5c:	0659      	lsls	r1, r3, #25
 8009c5e:	bf48      	it	mi
 8009c60:	b2b6      	uxthmi	r6, r6
 8009c62:	e7e6      	b.n	8009c32 <_printf_i+0x182>
 8009c64:	4615      	mov	r5, r2
 8009c66:	e7bb      	b.n	8009be0 <_printf_i+0x130>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	6826      	ldr	r6, [r4, #0]
 8009c6c:	6961      	ldr	r1, [r4, #20]
 8009c6e:	1d18      	adds	r0, r3, #4
 8009c70:	6028      	str	r0, [r5, #0]
 8009c72:	0635      	lsls	r5, r6, #24
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	d501      	bpl.n	8009c7c <_printf_i+0x1cc>
 8009c78:	6019      	str	r1, [r3, #0]
 8009c7a:	e002      	b.n	8009c82 <_printf_i+0x1d2>
 8009c7c:	0670      	lsls	r0, r6, #25
 8009c7e:	d5fb      	bpl.n	8009c78 <_printf_i+0x1c8>
 8009c80:	8019      	strh	r1, [r3, #0]
 8009c82:	2300      	movs	r3, #0
 8009c84:	6123      	str	r3, [r4, #16]
 8009c86:	4615      	mov	r5, r2
 8009c88:	e7ba      	b.n	8009c00 <_printf_i+0x150>
 8009c8a:	682b      	ldr	r3, [r5, #0]
 8009c8c:	1d1a      	adds	r2, r3, #4
 8009c8e:	602a      	str	r2, [r5, #0]
 8009c90:	681d      	ldr	r5, [r3, #0]
 8009c92:	6862      	ldr	r2, [r4, #4]
 8009c94:	2100      	movs	r1, #0
 8009c96:	4628      	mov	r0, r5
 8009c98:	f7f6 faa2 	bl	80001e0 <memchr>
 8009c9c:	b108      	cbz	r0, 8009ca2 <_printf_i+0x1f2>
 8009c9e:	1b40      	subs	r0, r0, r5
 8009ca0:	6060      	str	r0, [r4, #4]
 8009ca2:	6863      	ldr	r3, [r4, #4]
 8009ca4:	6123      	str	r3, [r4, #16]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cac:	e7a8      	b.n	8009c00 <_printf_i+0x150>
 8009cae:	6923      	ldr	r3, [r4, #16]
 8009cb0:	462a      	mov	r2, r5
 8009cb2:	4649      	mov	r1, r9
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	47d0      	blx	sl
 8009cb8:	3001      	adds	r0, #1
 8009cba:	d0ab      	beq.n	8009c14 <_printf_i+0x164>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	079b      	lsls	r3, r3, #30
 8009cc0:	d413      	bmi.n	8009cea <_printf_i+0x23a>
 8009cc2:	68e0      	ldr	r0, [r4, #12]
 8009cc4:	9b03      	ldr	r3, [sp, #12]
 8009cc6:	4298      	cmp	r0, r3
 8009cc8:	bfb8      	it	lt
 8009cca:	4618      	movlt	r0, r3
 8009ccc:	e7a4      	b.n	8009c18 <_printf_i+0x168>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	47d0      	blx	sl
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d09b      	beq.n	8009c14 <_printf_i+0x164>
 8009cdc:	3501      	adds	r5, #1
 8009cde:	68e3      	ldr	r3, [r4, #12]
 8009ce0:	9903      	ldr	r1, [sp, #12]
 8009ce2:	1a5b      	subs	r3, r3, r1
 8009ce4:	42ab      	cmp	r3, r5
 8009ce6:	dcf2      	bgt.n	8009cce <_printf_i+0x21e>
 8009ce8:	e7eb      	b.n	8009cc2 <_printf_i+0x212>
 8009cea:	2500      	movs	r5, #0
 8009cec:	f104 0619 	add.w	r6, r4, #25
 8009cf0:	e7f5      	b.n	8009cde <_printf_i+0x22e>
 8009cf2:	bf00      	nop
 8009cf4:	080104ce 	.word	0x080104ce
 8009cf8:	080104df 	.word	0x080104df

08009cfc <_scanf_float>:
 8009cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d00:	b087      	sub	sp, #28
 8009d02:	4617      	mov	r7, r2
 8009d04:	9303      	str	r3, [sp, #12]
 8009d06:	688b      	ldr	r3, [r1, #8]
 8009d08:	1e5a      	subs	r2, r3, #1
 8009d0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d0e:	bf83      	ittte	hi
 8009d10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009d14:	195b      	addhi	r3, r3, r5
 8009d16:	9302      	strhi	r3, [sp, #8]
 8009d18:	2300      	movls	r3, #0
 8009d1a:	bf86      	itte	hi
 8009d1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d20:	608b      	strhi	r3, [r1, #8]
 8009d22:	9302      	strls	r3, [sp, #8]
 8009d24:	680b      	ldr	r3, [r1, #0]
 8009d26:	468b      	mov	fp, r1
 8009d28:	2500      	movs	r5, #0
 8009d2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009d2e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009d32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009d36:	4680      	mov	r8, r0
 8009d38:	460c      	mov	r4, r1
 8009d3a:	465e      	mov	r6, fp
 8009d3c:	46aa      	mov	sl, r5
 8009d3e:	46a9      	mov	r9, r5
 8009d40:	9501      	str	r5, [sp, #4]
 8009d42:	68a2      	ldr	r2, [r4, #8]
 8009d44:	b152      	cbz	r2, 8009d5c <_scanf_float+0x60>
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b4e      	cmp	r3, #78	; 0x4e
 8009d4c:	d864      	bhi.n	8009e18 <_scanf_float+0x11c>
 8009d4e:	2b40      	cmp	r3, #64	; 0x40
 8009d50:	d83c      	bhi.n	8009dcc <_scanf_float+0xd0>
 8009d52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009d56:	b2c8      	uxtb	r0, r1
 8009d58:	280e      	cmp	r0, #14
 8009d5a:	d93a      	bls.n	8009dd2 <_scanf_float+0xd6>
 8009d5c:	f1b9 0f00 	cmp.w	r9, #0
 8009d60:	d003      	beq.n	8009d6a <_scanf_float+0x6e>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d6e:	f1ba 0f01 	cmp.w	sl, #1
 8009d72:	f200 8113 	bhi.w	8009f9c <_scanf_float+0x2a0>
 8009d76:	455e      	cmp	r6, fp
 8009d78:	f200 8105 	bhi.w	8009f86 <_scanf_float+0x28a>
 8009d7c:	2501      	movs	r5, #1
 8009d7e:	4628      	mov	r0, r5
 8009d80:	b007      	add	sp, #28
 8009d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009d8a:	2a0d      	cmp	r2, #13
 8009d8c:	d8e6      	bhi.n	8009d5c <_scanf_float+0x60>
 8009d8e:	a101      	add	r1, pc, #4	; (adr r1, 8009d94 <_scanf_float+0x98>)
 8009d90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d94:	08009ed3 	.word	0x08009ed3
 8009d98:	08009d5d 	.word	0x08009d5d
 8009d9c:	08009d5d 	.word	0x08009d5d
 8009da0:	08009d5d 	.word	0x08009d5d
 8009da4:	08009f33 	.word	0x08009f33
 8009da8:	08009f0b 	.word	0x08009f0b
 8009dac:	08009d5d 	.word	0x08009d5d
 8009db0:	08009d5d 	.word	0x08009d5d
 8009db4:	08009ee1 	.word	0x08009ee1
 8009db8:	08009d5d 	.word	0x08009d5d
 8009dbc:	08009d5d 	.word	0x08009d5d
 8009dc0:	08009d5d 	.word	0x08009d5d
 8009dc4:	08009d5d 	.word	0x08009d5d
 8009dc8:	08009e99 	.word	0x08009e99
 8009dcc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009dd0:	e7db      	b.n	8009d8a <_scanf_float+0x8e>
 8009dd2:	290e      	cmp	r1, #14
 8009dd4:	d8c2      	bhi.n	8009d5c <_scanf_float+0x60>
 8009dd6:	a001      	add	r0, pc, #4	; (adr r0, 8009ddc <_scanf_float+0xe0>)
 8009dd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009ddc:	08009e8b 	.word	0x08009e8b
 8009de0:	08009d5d 	.word	0x08009d5d
 8009de4:	08009e8b 	.word	0x08009e8b
 8009de8:	08009f1f 	.word	0x08009f1f
 8009dec:	08009d5d 	.word	0x08009d5d
 8009df0:	08009e39 	.word	0x08009e39
 8009df4:	08009e75 	.word	0x08009e75
 8009df8:	08009e75 	.word	0x08009e75
 8009dfc:	08009e75 	.word	0x08009e75
 8009e00:	08009e75 	.word	0x08009e75
 8009e04:	08009e75 	.word	0x08009e75
 8009e08:	08009e75 	.word	0x08009e75
 8009e0c:	08009e75 	.word	0x08009e75
 8009e10:	08009e75 	.word	0x08009e75
 8009e14:	08009e75 	.word	0x08009e75
 8009e18:	2b6e      	cmp	r3, #110	; 0x6e
 8009e1a:	d809      	bhi.n	8009e30 <_scanf_float+0x134>
 8009e1c:	2b60      	cmp	r3, #96	; 0x60
 8009e1e:	d8b2      	bhi.n	8009d86 <_scanf_float+0x8a>
 8009e20:	2b54      	cmp	r3, #84	; 0x54
 8009e22:	d077      	beq.n	8009f14 <_scanf_float+0x218>
 8009e24:	2b59      	cmp	r3, #89	; 0x59
 8009e26:	d199      	bne.n	8009d5c <_scanf_float+0x60>
 8009e28:	2d07      	cmp	r5, #7
 8009e2a:	d197      	bne.n	8009d5c <_scanf_float+0x60>
 8009e2c:	2508      	movs	r5, #8
 8009e2e:	e029      	b.n	8009e84 <_scanf_float+0x188>
 8009e30:	2b74      	cmp	r3, #116	; 0x74
 8009e32:	d06f      	beq.n	8009f14 <_scanf_float+0x218>
 8009e34:	2b79      	cmp	r3, #121	; 0x79
 8009e36:	e7f6      	b.n	8009e26 <_scanf_float+0x12a>
 8009e38:	6821      	ldr	r1, [r4, #0]
 8009e3a:	05c8      	lsls	r0, r1, #23
 8009e3c:	d51a      	bpl.n	8009e74 <_scanf_float+0x178>
 8009e3e:	9b02      	ldr	r3, [sp, #8]
 8009e40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009e44:	6021      	str	r1, [r4, #0]
 8009e46:	f109 0901 	add.w	r9, r9, #1
 8009e4a:	b11b      	cbz	r3, 8009e54 <_scanf_float+0x158>
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	3201      	adds	r2, #1
 8009e50:	9302      	str	r3, [sp, #8]
 8009e52:	60a2      	str	r2, [r4, #8]
 8009e54:	68a3      	ldr	r3, [r4, #8]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	60a3      	str	r3, [r4, #8]
 8009e5a:	6923      	ldr	r3, [r4, #16]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	6123      	str	r3, [r4, #16]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	607b      	str	r3, [r7, #4]
 8009e68:	f340 8084 	ble.w	8009f74 <_scanf_float+0x278>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	603b      	str	r3, [r7, #0]
 8009e72:	e766      	b.n	8009d42 <_scanf_float+0x46>
 8009e74:	eb1a 0f05 	cmn.w	sl, r5
 8009e78:	f47f af70 	bne.w	8009d5c <_scanf_float+0x60>
 8009e7c:	6822      	ldr	r2, [r4, #0]
 8009e7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009e82:	6022      	str	r2, [r4, #0]
 8009e84:	f806 3b01 	strb.w	r3, [r6], #1
 8009e88:	e7e4      	b.n	8009e54 <_scanf_float+0x158>
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	0610      	lsls	r0, r2, #24
 8009e8e:	f57f af65 	bpl.w	8009d5c <_scanf_float+0x60>
 8009e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e96:	e7f4      	b.n	8009e82 <_scanf_float+0x186>
 8009e98:	f1ba 0f00 	cmp.w	sl, #0
 8009e9c:	d10e      	bne.n	8009ebc <_scanf_float+0x1c0>
 8009e9e:	f1b9 0f00 	cmp.w	r9, #0
 8009ea2:	d10e      	bne.n	8009ec2 <_scanf_float+0x1c6>
 8009ea4:	6822      	ldr	r2, [r4, #0]
 8009ea6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009eaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009eae:	d108      	bne.n	8009ec2 <_scanf_float+0x1c6>
 8009eb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009eb4:	6022      	str	r2, [r4, #0]
 8009eb6:	f04f 0a01 	mov.w	sl, #1
 8009eba:	e7e3      	b.n	8009e84 <_scanf_float+0x188>
 8009ebc:	f1ba 0f02 	cmp.w	sl, #2
 8009ec0:	d055      	beq.n	8009f6e <_scanf_float+0x272>
 8009ec2:	2d01      	cmp	r5, #1
 8009ec4:	d002      	beq.n	8009ecc <_scanf_float+0x1d0>
 8009ec6:	2d04      	cmp	r5, #4
 8009ec8:	f47f af48 	bne.w	8009d5c <_scanf_float+0x60>
 8009ecc:	3501      	adds	r5, #1
 8009ece:	b2ed      	uxtb	r5, r5
 8009ed0:	e7d8      	b.n	8009e84 <_scanf_float+0x188>
 8009ed2:	f1ba 0f01 	cmp.w	sl, #1
 8009ed6:	f47f af41 	bne.w	8009d5c <_scanf_float+0x60>
 8009eda:	f04f 0a02 	mov.w	sl, #2
 8009ede:	e7d1      	b.n	8009e84 <_scanf_float+0x188>
 8009ee0:	b97d      	cbnz	r5, 8009f02 <_scanf_float+0x206>
 8009ee2:	f1b9 0f00 	cmp.w	r9, #0
 8009ee6:	f47f af3c 	bne.w	8009d62 <_scanf_float+0x66>
 8009eea:	6822      	ldr	r2, [r4, #0]
 8009eec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009ef0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009ef4:	f47f af39 	bne.w	8009d6a <_scanf_float+0x6e>
 8009ef8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009efc:	6022      	str	r2, [r4, #0]
 8009efe:	2501      	movs	r5, #1
 8009f00:	e7c0      	b.n	8009e84 <_scanf_float+0x188>
 8009f02:	2d03      	cmp	r5, #3
 8009f04:	d0e2      	beq.n	8009ecc <_scanf_float+0x1d0>
 8009f06:	2d05      	cmp	r5, #5
 8009f08:	e7de      	b.n	8009ec8 <_scanf_float+0x1cc>
 8009f0a:	2d02      	cmp	r5, #2
 8009f0c:	f47f af26 	bne.w	8009d5c <_scanf_float+0x60>
 8009f10:	2503      	movs	r5, #3
 8009f12:	e7b7      	b.n	8009e84 <_scanf_float+0x188>
 8009f14:	2d06      	cmp	r5, #6
 8009f16:	f47f af21 	bne.w	8009d5c <_scanf_float+0x60>
 8009f1a:	2507      	movs	r5, #7
 8009f1c:	e7b2      	b.n	8009e84 <_scanf_float+0x188>
 8009f1e:	6822      	ldr	r2, [r4, #0]
 8009f20:	0591      	lsls	r1, r2, #22
 8009f22:	f57f af1b 	bpl.w	8009d5c <_scanf_float+0x60>
 8009f26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009f2a:	6022      	str	r2, [r4, #0]
 8009f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f30:	e7a8      	b.n	8009e84 <_scanf_float+0x188>
 8009f32:	6822      	ldr	r2, [r4, #0]
 8009f34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009f38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009f3c:	d006      	beq.n	8009f4c <_scanf_float+0x250>
 8009f3e:	0550      	lsls	r0, r2, #21
 8009f40:	f57f af0c 	bpl.w	8009d5c <_scanf_float+0x60>
 8009f44:	f1b9 0f00 	cmp.w	r9, #0
 8009f48:	f43f af0f 	beq.w	8009d6a <_scanf_float+0x6e>
 8009f4c:	0591      	lsls	r1, r2, #22
 8009f4e:	bf58      	it	pl
 8009f50:	9901      	ldrpl	r1, [sp, #4]
 8009f52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f56:	bf58      	it	pl
 8009f58:	eba9 0101 	subpl.w	r1, r9, r1
 8009f5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009f60:	bf58      	it	pl
 8009f62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009f66:	6022      	str	r2, [r4, #0]
 8009f68:	f04f 0900 	mov.w	r9, #0
 8009f6c:	e78a      	b.n	8009e84 <_scanf_float+0x188>
 8009f6e:	f04f 0a03 	mov.w	sl, #3
 8009f72:	e787      	b.n	8009e84 <_scanf_float+0x188>
 8009f74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f78:	4639      	mov	r1, r7
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	4798      	blx	r3
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f43f aedf 	beq.w	8009d42 <_scanf_float+0x46>
 8009f84:	e6ea      	b.n	8009d5c <_scanf_float+0x60>
 8009f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f8e:	463a      	mov	r2, r7
 8009f90:	4640      	mov	r0, r8
 8009f92:	4798      	blx	r3
 8009f94:	6923      	ldr	r3, [r4, #16]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	6123      	str	r3, [r4, #16]
 8009f9a:	e6ec      	b.n	8009d76 <_scanf_float+0x7a>
 8009f9c:	1e6b      	subs	r3, r5, #1
 8009f9e:	2b06      	cmp	r3, #6
 8009fa0:	d825      	bhi.n	8009fee <_scanf_float+0x2f2>
 8009fa2:	2d02      	cmp	r5, #2
 8009fa4:	d836      	bhi.n	800a014 <_scanf_float+0x318>
 8009fa6:	455e      	cmp	r6, fp
 8009fa8:	f67f aee8 	bls.w	8009d7c <_scanf_float+0x80>
 8009fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fb4:	463a      	mov	r2, r7
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	4798      	blx	r3
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	e7f1      	b.n	8009fa6 <_scanf_float+0x2aa>
 8009fc2:	9802      	ldr	r0, [sp, #8]
 8009fc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009fcc:	9002      	str	r0, [sp, #8]
 8009fce:	463a      	mov	r2, r7
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	4798      	blx	r3
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	6123      	str	r3, [r4, #16]
 8009fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fde:	fa5f fa8a 	uxtb.w	sl, sl
 8009fe2:	f1ba 0f02 	cmp.w	sl, #2
 8009fe6:	d1ec      	bne.n	8009fc2 <_scanf_float+0x2c6>
 8009fe8:	3d03      	subs	r5, #3
 8009fea:	b2ed      	uxtb	r5, r5
 8009fec:	1b76      	subs	r6, r6, r5
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	05da      	lsls	r2, r3, #23
 8009ff2:	d52f      	bpl.n	800a054 <_scanf_float+0x358>
 8009ff4:	055b      	lsls	r3, r3, #21
 8009ff6:	d510      	bpl.n	800a01a <_scanf_float+0x31e>
 8009ff8:	455e      	cmp	r6, fp
 8009ffa:	f67f aebf 	bls.w	8009d7c <_scanf_float+0x80>
 8009ffe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a002:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a006:	463a      	mov	r2, r7
 800a008:	4640      	mov	r0, r8
 800a00a:	4798      	blx	r3
 800a00c:	6923      	ldr	r3, [r4, #16]
 800a00e:	3b01      	subs	r3, #1
 800a010:	6123      	str	r3, [r4, #16]
 800a012:	e7f1      	b.n	8009ff8 <_scanf_float+0x2fc>
 800a014:	46aa      	mov	sl, r5
 800a016:	9602      	str	r6, [sp, #8]
 800a018:	e7df      	b.n	8009fda <_scanf_float+0x2de>
 800a01a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a01e:	6923      	ldr	r3, [r4, #16]
 800a020:	2965      	cmp	r1, #101	; 0x65
 800a022:	f103 33ff 	add.w	r3, r3, #4294967295
 800a026:	f106 35ff 	add.w	r5, r6, #4294967295
 800a02a:	6123      	str	r3, [r4, #16]
 800a02c:	d00c      	beq.n	800a048 <_scanf_float+0x34c>
 800a02e:	2945      	cmp	r1, #69	; 0x45
 800a030:	d00a      	beq.n	800a048 <_scanf_float+0x34c>
 800a032:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a036:	463a      	mov	r2, r7
 800a038:	4640      	mov	r0, r8
 800a03a:	4798      	blx	r3
 800a03c:	6923      	ldr	r3, [r4, #16]
 800a03e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a042:	3b01      	subs	r3, #1
 800a044:	1eb5      	subs	r5, r6, #2
 800a046:	6123      	str	r3, [r4, #16]
 800a048:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a04c:	463a      	mov	r2, r7
 800a04e:	4640      	mov	r0, r8
 800a050:	4798      	blx	r3
 800a052:	462e      	mov	r6, r5
 800a054:	6825      	ldr	r5, [r4, #0]
 800a056:	f015 0510 	ands.w	r5, r5, #16
 800a05a:	d159      	bne.n	800a110 <_scanf_float+0x414>
 800a05c:	7035      	strb	r5, [r6, #0]
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a068:	d11b      	bne.n	800a0a2 <_scanf_float+0x3a6>
 800a06a:	9b01      	ldr	r3, [sp, #4]
 800a06c:	454b      	cmp	r3, r9
 800a06e:	eba3 0209 	sub.w	r2, r3, r9
 800a072:	d123      	bne.n	800a0bc <_scanf_float+0x3c0>
 800a074:	2200      	movs	r2, #0
 800a076:	4659      	mov	r1, fp
 800a078:	4640      	mov	r0, r8
 800a07a:	f000 febb 	bl	800adf4 <_strtod_r>
 800a07e:	6822      	ldr	r2, [r4, #0]
 800a080:	9b03      	ldr	r3, [sp, #12]
 800a082:	f012 0f02 	tst.w	r2, #2
 800a086:	ec57 6b10 	vmov	r6, r7, d0
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	d021      	beq.n	800a0d2 <_scanf_float+0x3d6>
 800a08e:	9903      	ldr	r1, [sp, #12]
 800a090:	1d1a      	adds	r2, r3, #4
 800a092:	600a      	str	r2, [r1, #0]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	e9c3 6700 	strd	r6, r7, [r3]
 800a09a:	68e3      	ldr	r3, [r4, #12]
 800a09c:	3301      	adds	r3, #1
 800a09e:	60e3      	str	r3, [r4, #12]
 800a0a0:	e66d      	b.n	8009d7e <_scanf_float+0x82>
 800a0a2:	9b04      	ldr	r3, [sp, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0e5      	beq.n	800a074 <_scanf_float+0x378>
 800a0a8:	9905      	ldr	r1, [sp, #20]
 800a0aa:	230a      	movs	r3, #10
 800a0ac:	462a      	mov	r2, r5
 800a0ae:	3101      	adds	r1, #1
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	f000 ff8f 	bl	800afd4 <_strtol_r>
 800a0b6:	9b04      	ldr	r3, [sp, #16]
 800a0b8:	9e05      	ldr	r6, [sp, #20]
 800a0ba:	1ac2      	subs	r2, r0, r3
 800a0bc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a0c0:	429e      	cmp	r6, r3
 800a0c2:	bf28      	it	cs
 800a0c4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a0c8:	4912      	ldr	r1, [pc, #72]	; (800a114 <_scanf_float+0x418>)
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f000 f82c 	bl	800a128 <siprintf>
 800a0d0:	e7d0      	b.n	800a074 <_scanf_float+0x378>
 800a0d2:	9903      	ldr	r1, [sp, #12]
 800a0d4:	f012 0f04 	tst.w	r2, #4
 800a0d8:	f103 0204 	add.w	r2, r3, #4
 800a0dc:	600a      	str	r2, [r1, #0]
 800a0de:	d1d9      	bne.n	800a094 <_scanf_float+0x398>
 800a0e0:	f8d3 8000 	ldr.w	r8, [r3]
 800a0e4:	ee10 2a10 	vmov	r2, s0
 800a0e8:	ee10 0a10 	vmov	r0, s0
 800a0ec:	463b      	mov	r3, r7
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	f7f6 fd1c 	bl	8000b2c <__aeabi_dcmpun>
 800a0f4:	b128      	cbz	r0, 800a102 <_scanf_float+0x406>
 800a0f6:	4808      	ldr	r0, [pc, #32]	; (800a118 <_scanf_float+0x41c>)
 800a0f8:	f000 f810 	bl	800a11c <nanf>
 800a0fc:	ed88 0a00 	vstr	s0, [r8]
 800a100:	e7cb      	b.n	800a09a <_scanf_float+0x39e>
 800a102:	4630      	mov	r0, r6
 800a104:	4639      	mov	r1, r7
 800a106:	f7f6 fd6f 	bl	8000be8 <__aeabi_d2f>
 800a10a:	f8c8 0000 	str.w	r0, [r8]
 800a10e:	e7c4      	b.n	800a09a <_scanf_float+0x39e>
 800a110:	2500      	movs	r5, #0
 800a112:	e634      	b.n	8009d7e <_scanf_float+0x82>
 800a114:	080104f0 	.word	0x080104f0
 800a118:	080105f7 	.word	0x080105f7

0800a11c <nanf>:
 800a11c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a124 <nanf+0x8>
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	7fc00000 	.word	0x7fc00000

0800a128 <siprintf>:
 800a128:	b40e      	push	{r1, r2, r3}
 800a12a:	b500      	push	{lr}
 800a12c:	b09c      	sub	sp, #112	; 0x70
 800a12e:	ab1d      	add	r3, sp, #116	; 0x74
 800a130:	9002      	str	r0, [sp, #8]
 800a132:	9006      	str	r0, [sp, #24]
 800a134:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a138:	4809      	ldr	r0, [pc, #36]	; (800a160 <siprintf+0x38>)
 800a13a:	9107      	str	r1, [sp, #28]
 800a13c:	9104      	str	r1, [sp, #16]
 800a13e:	4909      	ldr	r1, [pc, #36]	; (800a164 <siprintf+0x3c>)
 800a140:	f853 2b04 	ldr.w	r2, [r3], #4
 800a144:	9105      	str	r1, [sp, #20]
 800a146:	6800      	ldr	r0, [r0, #0]
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	a902      	add	r1, sp, #8
 800a14c:	f002 ffa0 	bl	800d090 <_svfiprintf_r>
 800a150:	9b02      	ldr	r3, [sp, #8]
 800a152:	2200      	movs	r2, #0
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	b01c      	add	sp, #112	; 0x70
 800a158:	f85d eb04 	ldr.w	lr, [sp], #4
 800a15c:	b003      	add	sp, #12
 800a15e:	4770      	bx	lr
 800a160:	200000ec 	.word	0x200000ec
 800a164:	ffff0208 	.word	0xffff0208

0800a168 <strcat>:
 800a168:	b510      	push	{r4, lr}
 800a16a:	4602      	mov	r2, r0
 800a16c:	7814      	ldrb	r4, [r2, #0]
 800a16e:	4613      	mov	r3, r2
 800a170:	3201      	adds	r2, #1
 800a172:	2c00      	cmp	r4, #0
 800a174:	d1fa      	bne.n	800a16c <strcat+0x4>
 800a176:	3b01      	subs	r3, #1
 800a178:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a17c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a180:	2a00      	cmp	r2, #0
 800a182:	d1f9      	bne.n	800a178 <strcat+0x10>
 800a184:	bd10      	pop	{r4, pc}

0800a186 <strncpy>:
 800a186:	b510      	push	{r4, lr}
 800a188:	3901      	subs	r1, #1
 800a18a:	4603      	mov	r3, r0
 800a18c:	b132      	cbz	r2, 800a19c <strncpy+0x16>
 800a18e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a192:	f803 4b01 	strb.w	r4, [r3], #1
 800a196:	3a01      	subs	r2, #1
 800a198:	2c00      	cmp	r4, #0
 800a19a:	d1f7      	bne.n	800a18c <strncpy+0x6>
 800a19c:	441a      	add	r2, r3
 800a19e:	2100      	movs	r1, #0
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d100      	bne.n	800a1a6 <strncpy+0x20>
 800a1a4:	bd10      	pop	{r4, pc}
 800a1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1aa:	e7f9      	b.n	800a1a0 <strncpy+0x1a>

0800a1ac <sulp>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	ec45 4b10 	vmov	d0, r4, r5
 800a1b6:	4616      	mov	r6, r2
 800a1b8:	f002 fcc8 	bl	800cb4c <__ulp>
 800a1bc:	ec51 0b10 	vmov	r0, r1, d0
 800a1c0:	b17e      	cbz	r6, 800a1e2 <sulp+0x36>
 800a1c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a1c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	dd09      	ble.n	800a1e2 <sulp+0x36>
 800a1ce:	051b      	lsls	r3, r3, #20
 800a1d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a1d4:	2400      	movs	r4, #0
 800a1d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a1da:	4622      	mov	r2, r4
 800a1dc:	462b      	mov	r3, r5
 800a1de:	f7f6 fa0b 	bl	80005f8 <__aeabi_dmul>
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}
 800a1e4:	0000      	movs	r0, r0
	...

0800a1e8 <_strtod_l>:
 800a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	ed2d 8b02 	vpush	{d8}
 800a1f0:	b09d      	sub	sp, #116	; 0x74
 800a1f2:	461f      	mov	r7, r3
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9318      	str	r3, [sp, #96]	; 0x60
 800a1f8:	4ba2      	ldr	r3, [pc, #648]	; (800a484 <_strtod_l+0x29c>)
 800a1fa:	9213      	str	r2, [sp, #76]	; 0x4c
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	9305      	str	r3, [sp, #20]
 800a200:	4604      	mov	r4, r0
 800a202:	4618      	mov	r0, r3
 800a204:	4688      	mov	r8, r1
 800a206:	f7f5 ffe3 	bl	80001d0 <strlen>
 800a20a:	f04f 0a00 	mov.w	sl, #0
 800a20e:	4605      	mov	r5, r0
 800a210:	f04f 0b00 	mov.w	fp, #0
 800a214:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	2a2b      	cmp	r2, #43	; 0x2b
 800a21e:	d04e      	beq.n	800a2be <_strtod_l+0xd6>
 800a220:	d83b      	bhi.n	800a29a <_strtod_l+0xb2>
 800a222:	2a0d      	cmp	r2, #13
 800a224:	d834      	bhi.n	800a290 <_strtod_l+0xa8>
 800a226:	2a08      	cmp	r2, #8
 800a228:	d834      	bhi.n	800a294 <_strtod_l+0xac>
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	d03e      	beq.n	800a2ac <_strtod_l+0xc4>
 800a22e:	2300      	movs	r3, #0
 800a230:	930a      	str	r3, [sp, #40]	; 0x28
 800a232:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a234:	7833      	ldrb	r3, [r6, #0]
 800a236:	2b30      	cmp	r3, #48	; 0x30
 800a238:	f040 80b0 	bne.w	800a39c <_strtod_l+0x1b4>
 800a23c:	7873      	ldrb	r3, [r6, #1]
 800a23e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a242:	2b58      	cmp	r3, #88	; 0x58
 800a244:	d168      	bne.n	800a318 <_strtod_l+0x130>
 800a246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	ab18      	add	r3, sp, #96	; 0x60
 800a24c:	9702      	str	r7, [sp, #8]
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	4a8d      	ldr	r2, [pc, #564]	; (800a488 <_strtod_l+0x2a0>)
 800a252:	ab19      	add	r3, sp, #100	; 0x64
 800a254:	a917      	add	r1, sp, #92	; 0x5c
 800a256:	4620      	mov	r0, r4
 800a258:	f001 fdd2 	bl	800be00 <__gethex>
 800a25c:	f010 0707 	ands.w	r7, r0, #7
 800a260:	4605      	mov	r5, r0
 800a262:	d005      	beq.n	800a270 <_strtod_l+0x88>
 800a264:	2f06      	cmp	r7, #6
 800a266:	d12c      	bne.n	800a2c2 <_strtod_l+0xda>
 800a268:	3601      	adds	r6, #1
 800a26a:	2300      	movs	r3, #0
 800a26c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a26e:	930a      	str	r3, [sp, #40]	; 0x28
 800a270:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a272:	2b00      	cmp	r3, #0
 800a274:	f040 8590 	bne.w	800ad98 <_strtod_l+0xbb0>
 800a278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27a:	b1eb      	cbz	r3, 800a2b8 <_strtod_l+0xd0>
 800a27c:	4652      	mov	r2, sl
 800a27e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a282:	ec43 2b10 	vmov	d0, r2, r3
 800a286:	b01d      	add	sp, #116	; 0x74
 800a288:	ecbd 8b02 	vpop	{d8}
 800a28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a290:	2a20      	cmp	r2, #32
 800a292:	d1cc      	bne.n	800a22e <_strtod_l+0x46>
 800a294:	3301      	adds	r3, #1
 800a296:	9317      	str	r3, [sp, #92]	; 0x5c
 800a298:	e7be      	b.n	800a218 <_strtod_l+0x30>
 800a29a:	2a2d      	cmp	r2, #45	; 0x2d
 800a29c:	d1c7      	bne.n	800a22e <_strtod_l+0x46>
 800a29e:	2201      	movs	r2, #1
 800a2a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a2a2:	1c5a      	adds	r2, r3, #1
 800a2a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a2a6:	785b      	ldrb	r3, [r3, #1]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1c2      	bne.n	800a232 <_strtod_l+0x4a>
 800a2ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f040 856e 	bne.w	800ad94 <_strtod_l+0xbac>
 800a2b8:	4652      	mov	r2, sl
 800a2ba:	465b      	mov	r3, fp
 800a2bc:	e7e1      	b.n	800a282 <_strtod_l+0x9a>
 800a2be:	2200      	movs	r2, #0
 800a2c0:	e7ee      	b.n	800a2a0 <_strtod_l+0xb8>
 800a2c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a2c4:	b13a      	cbz	r2, 800a2d6 <_strtod_l+0xee>
 800a2c6:	2135      	movs	r1, #53	; 0x35
 800a2c8:	a81a      	add	r0, sp, #104	; 0x68
 800a2ca:	f002 fd4a 	bl	800cd62 <__copybits>
 800a2ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f002 f909 	bl	800c4e8 <_Bfree>
 800a2d6:	3f01      	subs	r7, #1
 800a2d8:	2f04      	cmp	r7, #4
 800a2da:	d806      	bhi.n	800a2ea <_strtod_l+0x102>
 800a2dc:	e8df f007 	tbb	[pc, r7]
 800a2e0:	1714030a 	.word	0x1714030a
 800a2e4:	0a          	.byte	0x0a
 800a2e5:	00          	.byte	0x00
 800a2e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a2ea:	0728      	lsls	r0, r5, #28
 800a2ec:	d5c0      	bpl.n	800a270 <_strtod_l+0x88>
 800a2ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a2f2:	e7bd      	b.n	800a270 <_strtod_l+0x88>
 800a2f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a2f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a302:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a306:	e7f0      	b.n	800a2ea <_strtod_l+0x102>
 800a308:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a48c <_strtod_l+0x2a4>
 800a30c:	e7ed      	b.n	800a2ea <_strtod_l+0x102>
 800a30e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a312:	f04f 3aff 	mov.w	sl, #4294967295
 800a316:	e7e8      	b.n	800a2ea <_strtod_l+0x102>
 800a318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a31e:	785b      	ldrb	r3, [r3, #1]
 800a320:	2b30      	cmp	r3, #48	; 0x30
 800a322:	d0f9      	beq.n	800a318 <_strtod_l+0x130>
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0a3      	beq.n	800a270 <_strtod_l+0x88>
 800a328:	2301      	movs	r3, #1
 800a32a:	f04f 0900 	mov.w	r9, #0
 800a32e:	9304      	str	r3, [sp, #16]
 800a330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a332:	9308      	str	r3, [sp, #32]
 800a334:	f8cd 901c 	str.w	r9, [sp, #28]
 800a338:	464f      	mov	r7, r9
 800a33a:	220a      	movs	r2, #10
 800a33c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a33e:	7806      	ldrb	r6, [r0, #0]
 800a340:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a344:	b2d9      	uxtb	r1, r3
 800a346:	2909      	cmp	r1, #9
 800a348:	d92a      	bls.n	800a3a0 <_strtod_l+0x1b8>
 800a34a:	9905      	ldr	r1, [sp, #20]
 800a34c:	462a      	mov	r2, r5
 800a34e:	f003 f913 	bl	800d578 <strncmp>
 800a352:	b398      	cbz	r0, 800a3bc <_strtod_l+0x1d4>
 800a354:	2000      	movs	r0, #0
 800a356:	4632      	mov	r2, r6
 800a358:	463d      	mov	r5, r7
 800a35a:	9005      	str	r0, [sp, #20]
 800a35c:	4603      	mov	r3, r0
 800a35e:	2a65      	cmp	r2, #101	; 0x65
 800a360:	d001      	beq.n	800a366 <_strtod_l+0x17e>
 800a362:	2a45      	cmp	r2, #69	; 0x45
 800a364:	d118      	bne.n	800a398 <_strtod_l+0x1b0>
 800a366:	b91d      	cbnz	r5, 800a370 <_strtod_l+0x188>
 800a368:	9a04      	ldr	r2, [sp, #16]
 800a36a:	4302      	orrs	r2, r0
 800a36c:	d09e      	beq.n	800a2ac <_strtod_l+0xc4>
 800a36e:	2500      	movs	r5, #0
 800a370:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a374:	f108 0201 	add.w	r2, r8, #1
 800a378:	9217      	str	r2, [sp, #92]	; 0x5c
 800a37a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a37e:	2a2b      	cmp	r2, #43	; 0x2b
 800a380:	d075      	beq.n	800a46e <_strtod_l+0x286>
 800a382:	2a2d      	cmp	r2, #45	; 0x2d
 800a384:	d07b      	beq.n	800a47e <_strtod_l+0x296>
 800a386:	f04f 0c00 	mov.w	ip, #0
 800a38a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a38e:	2909      	cmp	r1, #9
 800a390:	f240 8082 	bls.w	800a498 <_strtod_l+0x2b0>
 800a394:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a398:	2600      	movs	r6, #0
 800a39a:	e09d      	b.n	800a4d8 <_strtod_l+0x2f0>
 800a39c:	2300      	movs	r3, #0
 800a39e:	e7c4      	b.n	800a32a <_strtod_l+0x142>
 800a3a0:	2f08      	cmp	r7, #8
 800a3a2:	bfd8      	it	le
 800a3a4:	9907      	ldrle	r1, [sp, #28]
 800a3a6:	f100 0001 	add.w	r0, r0, #1
 800a3aa:	bfda      	itte	le
 800a3ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800a3b0:	9307      	strle	r3, [sp, #28]
 800a3b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a3b6:	3701      	adds	r7, #1
 800a3b8:	9017      	str	r0, [sp, #92]	; 0x5c
 800a3ba:	e7bf      	b.n	800a33c <_strtod_l+0x154>
 800a3bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3be:	195a      	adds	r2, r3, r5
 800a3c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a3c2:	5d5a      	ldrb	r2, [r3, r5]
 800a3c4:	2f00      	cmp	r7, #0
 800a3c6:	d037      	beq.n	800a438 <_strtod_l+0x250>
 800a3c8:	9005      	str	r0, [sp, #20]
 800a3ca:	463d      	mov	r5, r7
 800a3cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a3d0:	2b09      	cmp	r3, #9
 800a3d2:	d912      	bls.n	800a3fa <_strtod_l+0x212>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e7c2      	b.n	800a35e <_strtod_l+0x176>
 800a3d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3da:	1c5a      	adds	r2, r3, #1
 800a3dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a3de:	785a      	ldrb	r2, [r3, #1]
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	2a30      	cmp	r2, #48	; 0x30
 800a3e4:	d0f8      	beq.n	800a3d8 <_strtod_l+0x1f0>
 800a3e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a3ea:	2b08      	cmp	r3, #8
 800a3ec:	f200 84d9 	bhi.w	800ada2 <_strtod_l+0xbba>
 800a3f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3f2:	9005      	str	r0, [sp, #20]
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	9308      	str	r3, [sp, #32]
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	3a30      	subs	r2, #48	; 0x30
 800a3fc:	f100 0301 	add.w	r3, r0, #1
 800a400:	d014      	beq.n	800a42c <_strtod_l+0x244>
 800a402:	9905      	ldr	r1, [sp, #20]
 800a404:	4419      	add	r1, r3
 800a406:	9105      	str	r1, [sp, #20]
 800a408:	462b      	mov	r3, r5
 800a40a:	eb00 0e05 	add.w	lr, r0, r5
 800a40e:	210a      	movs	r1, #10
 800a410:	4573      	cmp	r3, lr
 800a412:	d113      	bne.n	800a43c <_strtod_l+0x254>
 800a414:	182b      	adds	r3, r5, r0
 800a416:	2b08      	cmp	r3, #8
 800a418:	f105 0501 	add.w	r5, r5, #1
 800a41c:	4405      	add	r5, r0
 800a41e:	dc1c      	bgt.n	800a45a <_strtod_l+0x272>
 800a420:	9907      	ldr	r1, [sp, #28]
 800a422:	230a      	movs	r3, #10
 800a424:	fb03 2301 	mla	r3, r3, r1, r2
 800a428:	9307      	str	r3, [sp, #28]
 800a42a:	2300      	movs	r3, #0
 800a42c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a42e:	1c51      	adds	r1, r2, #1
 800a430:	9117      	str	r1, [sp, #92]	; 0x5c
 800a432:	7852      	ldrb	r2, [r2, #1]
 800a434:	4618      	mov	r0, r3
 800a436:	e7c9      	b.n	800a3cc <_strtod_l+0x1e4>
 800a438:	4638      	mov	r0, r7
 800a43a:	e7d2      	b.n	800a3e2 <_strtod_l+0x1fa>
 800a43c:	2b08      	cmp	r3, #8
 800a43e:	dc04      	bgt.n	800a44a <_strtod_l+0x262>
 800a440:	9e07      	ldr	r6, [sp, #28]
 800a442:	434e      	muls	r6, r1
 800a444:	9607      	str	r6, [sp, #28]
 800a446:	3301      	adds	r3, #1
 800a448:	e7e2      	b.n	800a410 <_strtod_l+0x228>
 800a44a:	f103 0c01 	add.w	ip, r3, #1
 800a44e:	f1bc 0f10 	cmp.w	ip, #16
 800a452:	bfd8      	it	le
 800a454:	fb01 f909 	mulle.w	r9, r1, r9
 800a458:	e7f5      	b.n	800a446 <_strtod_l+0x25e>
 800a45a:	2d10      	cmp	r5, #16
 800a45c:	bfdc      	itt	le
 800a45e:	230a      	movle	r3, #10
 800a460:	fb03 2909 	mlale	r9, r3, r9, r2
 800a464:	e7e1      	b.n	800a42a <_strtod_l+0x242>
 800a466:	2300      	movs	r3, #0
 800a468:	9305      	str	r3, [sp, #20]
 800a46a:	2301      	movs	r3, #1
 800a46c:	e77c      	b.n	800a368 <_strtod_l+0x180>
 800a46e:	f04f 0c00 	mov.w	ip, #0
 800a472:	f108 0202 	add.w	r2, r8, #2
 800a476:	9217      	str	r2, [sp, #92]	; 0x5c
 800a478:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a47c:	e785      	b.n	800a38a <_strtod_l+0x1a2>
 800a47e:	f04f 0c01 	mov.w	ip, #1
 800a482:	e7f6      	b.n	800a472 <_strtod_l+0x28a>
 800a484:	080107d8 	.word	0x080107d8
 800a488:	080104f8 	.word	0x080104f8
 800a48c:	7ff00000 	.word	0x7ff00000
 800a490:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a492:	1c51      	adds	r1, r2, #1
 800a494:	9117      	str	r1, [sp, #92]	; 0x5c
 800a496:	7852      	ldrb	r2, [r2, #1]
 800a498:	2a30      	cmp	r2, #48	; 0x30
 800a49a:	d0f9      	beq.n	800a490 <_strtod_l+0x2a8>
 800a49c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a4a0:	2908      	cmp	r1, #8
 800a4a2:	f63f af79 	bhi.w	800a398 <_strtod_l+0x1b0>
 800a4a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a4aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4ac:	9206      	str	r2, [sp, #24]
 800a4ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4b0:	1c51      	adds	r1, r2, #1
 800a4b2:	9117      	str	r1, [sp, #92]	; 0x5c
 800a4b4:	7852      	ldrb	r2, [r2, #1]
 800a4b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a4ba:	2e09      	cmp	r6, #9
 800a4bc:	d937      	bls.n	800a52e <_strtod_l+0x346>
 800a4be:	9e06      	ldr	r6, [sp, #24]
 800a4c0:	1b89      	subs	r1, r1, r6
 800a4c2:	2908      	cmp	r1, #8
 800a4c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a4c8:	dc02      	bgt.n	800a4d0 <_strtod_l+0x2e8>
 800a4ca:	4576      	cmp	r6, lr
 800a4cc:	bfa8      	it	ge
 800a4ce:	4676      	movge	r6, lr
 800a4d0:	f1bc 0f00 	cmp.w	ip, #0
 800a4d4:	d000      	beq.n	800a4d8 <_strtod_l+0x2f0>
 800a4d6:	4276      	negs	r6, r6
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	d14d      	bne.n	800a578 <_strtod_l+0x390>
 800a4dc:	9904      	ldr	r1, [sp, #16]
 800a4de:	4301      	orrs	r1, r0
 800a4e0:	f47f aec6 	bne.w	800a270 <_strtod_l+0x88>
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f47f aee1 	bne.w	800a2ac <_strtod_l+0xc4>
 800a4ea:	2a69      	cmp	r2, #105	; 0x69
 800a4ec:	d027      	beq.n	800a53e <_strtod_l+0x356>
 800a4ee:	dc24      	bgt.n	800a53a <_strtod_l+0x352>
 800a4f0:	2a49      	cmp	r2, #73	; 0x49
 800a4f2:	d024      	beq.n	800a53e <_strtod_l+0x356>
 800a4f4:	2a4e      	cmp	r2, #78	; 0x4e
 800a4f6:	f47f aed9 	bne.w	800a2ac <_strtod_l+0xc4>
 800a4fa:	499f      	ldr	r1, [pc, #636]	; (800a778 <_strtod_l+0x590>)
 800a4fc:	a817      	add	r0, sp, #92	; 0x5c
 800a4fe:	f001 fed7 	bl	800c2b0 <__match>
 800a502:	2800      	cmp	r0, #0
 800a504:	f43f aed2 	beq.w	800a2ac <_strtod_l+0xc4>
 800a508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b28      	cmp	r3, #40	; 0x28
 800a50e:	d12d      	bne.n	800a56c <_strtod_l+0x384>
 800a510:	499a      	ldr	r1, [pc, #616]	; (800a77c <_strtod_l+0x594>)
 800a512:	aa1a      	add	r2, sp, #104	; 0x68
 800a514:	a817      	add	r0, sp, #92	; 0x5c
 800a516:	f001 fedf 	bl	800c2d8 <__hexnan>
 800a51a:	2805      	cmp	r0, #5
 800a51c:	d126      	bne.n	800a56c <_strtod_l+0x384>
 800a51e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a520:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a524:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a528:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a52c:	e6a0      	b.n	800a270 <_strtod_l+0x88>
 800a52e:	210a      	movs	r1, #10
 800a530:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a534:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a538:	e7b9      	b.n	800a4ae <_strtod_l+0x2c6>
 800a53a:	2a6e      	cmp	r2, #110	; 0x6e
 800a53c:	e7db      	b.n	800a4f6 <_strtod_l+0x30e>
 800a53e:	4990      	ldr	r1, [pc, #576]	; (800a780 <_strtod_l+0x598>)
 800a540:	a817      	add	r0, sp, #92	; 0x5c
 800a542:	f001 feb5 	bl	800c2b0 <__match>
 800a546:	2800      	cmp	r0, #0
 800a548:	f43f aeb0 	beq.w	800a2ac <_strtod_l+0xc4>
 800a54c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a54e:	498d      	ldr	r1, [pc, #564]	; (800a784 <_strtod_l+0x59c>)
 800a550:	3b01      	subs	r3, #1
 800a552:	a817      	add	r0, sp, #92	; 0x5c
 800a554:	9317      	str	r3, [sp, #92]	; 0x5c
 800a556:	f001 feab 	bl	800c2b0 <__match>
 800a55a:	b910      	cbnz	r0, 800a562 <_strtod_l+0x37a>
 800a55c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a55e:	3301      	adds	r3, #1
 800a560:	9317      	str	r3, [sp, #92]	; 0x5c
 800a562:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a794 <_strtod_l+0x5ac>
 800a566:	f04f 0a00 	mov.w	sl, #0
 800a56a:	e681      	b.n	800a270 <_strtod_l+0x88>
 800a56c:	4886      	ldr	r0, [pc, #536]	; (800a788 <_strtod_l+0x5a0>)
 800a56e:	f002 ffeb 	bl	800d548 <nan>
 800a572:	ec5b ab10 	vmov	sl, fp, d0
 800a576:	e67b      	b.n	800a270 <_strtod_l+0x88>
 800a578:	9b05      	ldr	r3, [sp, #20]
 800a57a:	9807      	ldr	r0, [sp, #28]
 800a57c:	1af3      	subs	r3, r6, r3
 800a57e:	2f00      	cmp	r7, #0
 800a580:	bf08      	it	eq
 800a582:	462f      	moveq	r7, r5
 800a584:	2d10      	cmp	r5, #16
 800a586:	9306      	str	r3, [sp, #24]
 800a588:	46a8      	mov	r8, r5
 800a58a:	bfa8      	it	ge
 800a58c:	f04f 0810 	movge.w	r8, #16
 800a590:	f7f5 ffb8 	bl	8000504 <__aeabi_ui2d>
 800a594:	2d09      	cmp	r5, #9
 800a596:	4682      	mov	sl, r0
 800a598:	468b      	mov	fp, r1
 800a59a:	dd13      	ble.n	800a5c4 <_strtod_l+0x3dc>
 800a59c:	4b7b      	ldr	r3, [pc, #492]	; (800a78c <_strtod_l+0x5a4>)
 800a59e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a5a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a5a6:	f7f6 f827 	bl	80005f8 <__aeabi_dmul>
 800a5aa:	4682      	mov	sl, r0
 800a5ac:	4648      	mov	r0, r9
 800a5ae:	468b      	mov	fp, r1
 800a5b0:	f7f5 ffa8 	bl	8000504 <__aeabi_ui2d>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4650      	mov	r0, sl
 800a5ba:	4659      	mov	r1, fp
 800a5bc:	f7f5 fe66 	bl	800028c <__adddf3>
 800a5c0:	4682      	mov	sl, r0
 800a5c2:	468b      	mov	fp, r1
 800a5c4:	2d0f      	cmp	r5, #15
 800a5c6:	dc38      	bgt.n	800a63a <_strtod_l+0x452>
 800a5c8:	9b06      	ldr	r3, [sp, #24]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f43f ae50 	beq.w	800a270 <_strtod_l+0x88>
 800a5d0:	dd24      	ble.n	800a61c <_strtod_l+0x434>
 800a5d2:	2b16      	cmp	r3, #22
 800a5d4:	dc0b      	bgt.n	800a5ee <_strtod_l+0x406>
 800a5d6:	496d      	ldr	r1, [pc, #436]	; (800a78c <_strtod_l+0x5a4>)
 800a5d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5e0:	4652      	mov	r2, sl
 800a5e2:	465b      	mov	r3, fp
 800a5e4:	f7f6 f808 	bl	80005f8 <__aeabi_dmul>
 800a5e8:	4682      	mov	sl, r0
 800a5ea:	468b      	mov	fp, r1
 800a5ec:	e640      	b.n	800a270 <_strtod_l+0x88>
 800a5ee:	9a06      	ldr	r2, [sp, #24]
 800a5f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	db20      	blt.n	800a63a <_strtod_l+0x452>
 800a5f8:	4c64      	ldr	r4, [pc, #400]	; (800a78c <_strtod_l+0x5a4>)
 800a5fa:	f1c5 050f 	rsb	r5, r5, #15
 800a5fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a602:	4652      	mov	r2, sl
 800a604:	465b      	mov	r3, fp
 800a606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a60a:	f7f5 fff5 	bl	80005f8 <__aeabi_dmul>
 800a60e:	9b06      	ldr	r3, [sp, #24]
 800a610:	1b5d      	subs	r5, r3, r5
 800a612:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a616:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a61a:	e7e3      	b.n	800a5e4 <_strtod_l+0x3fc>
 800a61c:	9b06      	ldr	r3, [sp, #24]
 800a61e:	3316      	adds	r3, #22
 800a620:	db0b      	blt.n	800a63a <_strtod_l+0x452>
 800a622:	9b05      	ldr	r3, [sp, #20]
 800a624:	1b9e      	subs	r6, r3, r6
 800a626:	4b59      	ldr	r3, [pc, #356]	; (800a78c <_strtod_l+0x5a4>)
 800a628:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a62c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a630:	4650      	mov	r0, sl
 800a632:	4659      	mov	r1, fp
 800a634:	f7f6 f90a 	bl	800084c <__aeabi_ddiv>
 800a638:	e7d6      	b.n	800a5e8 <_strtod_l+0x400>
 800a63a:	9b06      	ldr	r3, [sp, #24]
 800a63c:	eba5 0808 	sub.w	r8, r5, r8
 800a640:	4498      	add	r8, r3
 800a642:	f1b8 0f00 	cmp.w	r8, #0
 800a646:	dd74      	ble.n	800a732 <_strtod_l+0x54a>
 800a648:	f018 030f 	ands.w	r3, r8, #15
 800a64c:	d00a      	beq.n	800a664 <_strtod_l+0x47c>
 800a64e:	494f      	ldr	r1, [pc, #316]	; (800a78c <_strtod_l+0x5a4>)
 800a650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a654:	4652      	mov	r2, sl
 800a656:	465b      	mov	r3, fp
 800a658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a65c:	f7f5 ffcc 	bl	80005f8 <__aeabi_dmul>
 800a660:	4682      	mov	sl, r0
 800a662:	468b      	mov	fp, r1
 800a664:	f038 080f 	bics.w	r8, r8, #15
 800a668:	d04f      	beq.n	800a70a <_strtod_l+0x522>
 800a66a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a66e:	dd22      	ble.n	800a6b6 <_strtod_l+0x4ce>
 800a670:	2500      	movs	r5, #0
 800a672:	462e      	mov	r6, r5
 800a674:	9507      	str	r5, [sp, #28]
 800a676:	9505      	str	r5, [sp, #20]
 800a678:	2322      	movs	r3, #34	; 0x22
 800a67a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a794 <_strtod_l+0x5ac>
 800a67e:	6023      	str	r3, [r4, #0]
 800a680:	f04f 0a00 	mov.w	sl, #0
 800a684:	9b07      	ldr	r3, [sp, #28]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f43f adf2 	beq.w	800a270 <_strtod_l+0x88>
 800a68c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a68e:	4620      	mov	r0, r4
 800a690:	f001 ff2a 	bl	800c4e8 <_Bfree>
 800a694:	9905      	ldr	r1, [sp, #20]
 800a696:	4620      	mov	r0, r4
 800a698:	f001 ff26 	bl	800c4e8 <_Bfree>
 800a69c:	4631      	mov	r1, r6
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f001 ff22 	bl	800c4e8 <_Bfree>
 800a6a4:	9907      	ldr	r1, [sp, #28]
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f001 ff1e 	bl	800c4e8 <_Bfree>
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f001 ff1a 	bl	800c4e8 <_Bfree>
 800a6b4:	e5dc      	b.n	800a270 <_strtod_l+0x88>
 800a6b6:	4b36      	ldr	r3, [pc, #216]	; (800a790 <_strtod_l+0x5a8>)
 800a6b8:	9304      	str	r3, [sp, #16]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a6c0:	4650      	mov	r0, sl
 800a6c2:	4659      	mov	r1, fp
 800a6c4:	4699      	mov	r9, r3
 800a6c6:	f1b8 0f01 	cmp.w	r8, #1
 800a6ca:	dc21      	bgt.n	800a710 <_strtod_l+0x528>
 800a6cc:	b10b      	cbz	r3, 800a6d2 <_strtod_l+0x4ea>
 800a6ce:	4682      	mov	sl, r0
 800a6d0:	468b      	mov	fp, r1
 800a6d2:	4b2f      	ldr	r3, [pc, #188]	; (800a790 <_strtod_l+0x5a8>)
 800a6d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a6d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a6dc:	4652      	mov	r2, sl
 800a6de:	465b      	mov	r3, fp
 800a6e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a6e4:	f7f5 ff88 	bl	80005f8 <__aeabi_dmul>
 800a6e8:	4b2a      	ldr	r3, [pc, #168]	; (800a794 <_strtod_l+0x5ac>)
 800a6ea:	460a      	mov	r2, r1
 800a6ec:	400b      	ands	r3, r1
 800a6ee:	492a      	ldr	r1, [pc, #168]	; (800a798 <_strtod_l+0x5b0>)
 800a6f0:	428b      	cmp	r3, r1
 800a6f2:	4682      	mov	sl, r0
 800a6f4:	d8bc      	bhi.n	800a670 <_strtod_l+0x488>
 800a6f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a6fa:	428b      	cmp	r3, r1
 800a6fc:	bf86      	itte	hi
 800a6fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a79c <_strtod_l+0x5b4>
 800a702:	f04f 3aff 	movhi.w	sl, #4294967295
 800a706:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a70a:	2300      	movs	r3, #0
 800a70c:	9304      	str	r3, [sp, #16]
 800a70e:	e084      	b.n	800a81a <_strtod_l+0x632>
 800a710:	f018 0f01 	tst.w	r8, #1
 800a714:	d005      	beq.n	800a722 <_strtod_l+0x53a>
 800a716:	9b04      	ldr	r3, [sp, #16]
 800a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71c:	f7f5 ff6c 	bl	80005f8 <__aeabi_dmul>
 800a720:	2301      	movs	r3, #1
 800a722:	9a04      	ldr	r2, [sp, #16]
 800a724:	3208      	adds	r2, #8
 800a726:	f109 0901 	add.w	r9, r9, #1
 800a72a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a72e:	9204      	str	r2, [sp, #16]
 800a730:	e7c9      	b.n	800a6c6 <_strtod_l+0x4de>
 800a732:	d0ea      	beq.n	800a70a <_strtod_l+0x522>
 800a734:	f1c8 0800 	rsb	r8, r8, #0
 800a738:	f018 020f 	ands.w	r2, r8, #15
 800a73c:	d00a      	beq.n	800a754 <_strtod_l+0x56c>
 800a73e:	4b13      	ldr	r3, [pc, #76]	; (800a78c <_strtod_l+0x5a4>)
 800a740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a744:	4650      	mov	r0, sl
 800a746:	4659      	mov	r1, fp
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	f7f6 f87e 	bl	800084c <__aeabi_ddiv>
 800a750:	4682      	mov	sl, r0
 800a752:	468b      	mov	fp, r1
 800a754:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a758:	d0d7      	beq.n	800a70a <_strtod_l+0x522>
 800a75a:	f1b8 0f1f 	cmp.w	r8, #31
 800a75e:	dd1f      	ble.n	800a7a0 <_strtod_l+0x5b8>
 800a760:	2500      	movs	r5, #0
 800a762:	462e      	mov	r6, r5
 800a764:	9507      	str	r5, [sp, #28]
 800a766:	9505      	str	r5, [sp, #20]
 800a768:	2322      	movs	r3, #34	; 0x22
 800a76a:	f04f 0a00 	mov.w	sl, #0
 800a76e:	f04f 0b00 	mov.w	fp, #0
 800a772:	6023      	str	r3, [r4, #0]
 800a774:	e786      	b.n	800a684 <_strtod_l+0x49c>
 800a776:	bf00      	nop
 800a778:	080104c9 	.word	0x080104c9
 800a77c:	0801050c 	.word	0x0801050c
 800a780:	080104c1 	.word	0x080104c1
 800a784:	080106fc 	.word	0x080106fc
 800a788:	080105f7 	.word	0x080105f7
 800a78c:	08010870 	.word	0x08010870
 800a790:	08010848 	.word	0x08010848
 800a794:	7ff00000 	.word	0x7ff00000
 800a798:	7ca00000 	.word	0x7ca00000
 800a79c:	7fefffff 	.word	0x7fefffff
 800a7a0:	f018 0310 	ands.w	r3, r8, #16
 800a7a4:	bf18      	it	ne
 800a7a6:	236a      	movne	r3, #106	; 0x6a
 800a7a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ab58 <_strtod_l+0x970>
 800a7ac:	9304      	str	r3, [sp, #16]
 800a7ae:	4650      	mov	r0, sl
 800a7b0:	4659      	mov	r1, fp
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f018 0f01 	tst.w	r8, #1
 800a7b8:	d004      	beq.n	800a7c4 <_strtod_l+0x5dc>
 800a7ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a7be:	f7f5 ff1b 	bl	80005f8 <__aeabi_dmul>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a7c8:	f109 0908 	add.w	r9, r9, #8
 800a7cc:	d1f2      	bne.n	800a7b4 <_strtod_l+0x5cc>
 800a7ce:	b10b      	cbz	r3, 800a7d4 <_strtod_l+0x5ec>
 800a7d0:	4682      	mov	sl, r0
 800a7d2:	468b      	mov	fp, r1
 800a7d4:	9b04      	ldr	r3, [sp, #16]
 800a7d6:	b1c3      	cbz	r3, 800a80a <_strtod_l+0x622>
 800a7d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a7dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	4659      	mov	r1, fp
 800a7e4:	dd11      	ble.n	800a80a <_strtod_l+0x622>
 800a7e6:	2b1f      	cmp	r3, #31
 800a7e8:	f340 8124 	ble.w	800aa34 <_strtod_l+0x84c>
 800a7ec:	2b34      	cmp	r3, #52	; 0x34
 800a7ee:	bfde      	ittt	le
 800a7f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a7f4:	f04f 33ff 	movle.w	r3, #4294967295
 800a7f8:	fa03 f202 	lslle.w	r2, r3, r2
 800a7fc:	f04f 0a00 	mov.w	sl, #0
 800a800:	bfcc      	ite	gt
 800a802:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a806:	ea02 0b01 	andle.w	fp, r2, r1
 800a80a:	2200      	movs	r2, #0
 800a80c:	2300      	movs	r3, #0
 800a80e:	4650      	mov	r0, sl
 800a810:	4659      	mov	r1, fp
 800a812:	f7f6 f959 	bl	8000ac8 <__aeabi_dcmpeq>
 800a816:	2800      	cmp	r0, #0
 800a818:	d1a2      	bne.n	800a760 <_strtod_l+0x578>
 800a81a:	9b07      	ldr	r3, [sp, #28]
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	9908      	ldr	r1, [sp, #32]
 800a820:	462b      	mov	r3, r5
 800a822:	463a      	mov	r2, r7
 800a824:	4620      	mov	r0, r4
 800a826:	f001 fec7 	bl	800c5b8 <__s2b>
 800a82a:	9007      	str	r0, [sp, #28]
 800a82c:	2800      	cmp	r0, #0
 800a82e:	f43f af1f 	beq.w	800a670 <_strtod_l+0x488>
 800a832:	9b05      	ldr	r3, [sp, #20]
 800a834:	1b9e      	subs	r6, r3, r6
 800a836:	9b06      	ldr	r3, [sp, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	bfb4      	ite	lt
 800a83c:	4633      	movlt	r3, r6
 800a83e:	2300      	movge	r3, #0
 800a840:	930c      	str	r3, [sp, #48]	; 0x30
 800a842:	9b06      	ldr	r3, [sp, #24]
 800a844:	2500      	movs	r5, #0
 800a846:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a84a:	9312      	str	r3, [sp, #72]	; 0x48
 800a84c:	462e      	mov	r6, r5
 800a84e:	9b07      	ldr	r3, [sp, #28]
 800a850:	4620      	mov	r0, r4
 800a852:	6859      	ldr	r1, [r3, #4]
 800a854:	f001 fe08 	bl	800c468 <_Balloc>
 800a858:	9005      	str	r0, [sp, #20]
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f43f af0c 	beq.w	800a678 <_strtod_l+0x490>
 800a860:	9b07      	ldr	r3, [sp, #28]
 800a862:	691a      	ldr	r2, [r3, #16]
 800a864:	3202      	adds	r2, #2
 800a866:	f103 010c 	add.w	r1, r3, #12
 800a86a:	0092      	lsls	r2, r2, #2
 800a86c:	300c      	adds	r0, #12
 800a86e:	f001 fded 	bl	800c44c <memcpy>
 800a872:	ec4b ab10 	vmov	d0, sl, fp
 800a876:	aa1a      	add	r2, sp, #104	; 0x68
 800a878:	a919      	add	r1, sp, #100	; 0x64
 800a87a:	4620      	mov	r0, r4
 800a87c:	f002 f9e2 	bl	800cc44 <__d2b>
 800a880:	ec4b ab18 	vmov	d8, sl, fp
 800a884:	9018      	str	r0, [sp, #96]	; 0x60
 800a886:	2800      	cmp	r0, #0
 800a888:	f43f aef6 	beq.w	800a678 <_strtod_l+0x490>
 800a88c:	2101      	movs	r1, #1
 800a88e:	4620      	mov	r0, r4
 800a890:	f001 ff2c 	bl	800c6ec <__i2b>
 800a894:	4606      	mov	r6, r0
 800a896:	2800      	cmp	r0, #0
 800a898:	f43f aeee 	beq.w	800a678 <_strtod_l+0x490>
 800a89c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a89e:	9904      	ldr	r1, [sp, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	bfab      	itete	ge
 800a8a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a8a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a8a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a8aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a8ae:	bfac      	ite	ge
 800a8b0:	eb03 0902 	addge.w	r9, r3, r2
 800a8b4:	1ad7      	sublt	r7, r2, r3
 800a8b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a8b8:	eba3 0801 	sub.w	r8, r3, r1
 800a8bc:	4490      	add	r8, r2
 800a8be:	4ba1      	ldr	r3, [pc, #644]	; (800ab44 <_strtod_l+0x95c>)
 800a8c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a8c4:	4598      	cmp	r8, r3
 800a8c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a8ca:	f280 80c7 	bge.w	800aa5c <_strtod_l+0x874>
 800a8ce:	eba3 0308 	sub.w	r3, r3, r8
 800a8d2:	2b1f      	cmp	r3, #31
 800a8d4:	eba2 0203 	sub.w	r2, r2, r3
 800a8d8:	f04f 0101 	mov.w	r1, #1
 800a8dc:	f300 80b1 	bgt.w	800aa42 <_strtod_l+0x85a>
 800a8e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a8e4:	930d      	str	r3, [sp, #52]	; 0x34
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	9308      	str	r3, [sp, #32]
 800a8ea:	eb09 0802 	add.w	r8, r9, r2
 800a8ee:	9b04      	ldr	r3, [sp, #16]
 800a8f0:	45c1      	cmp	r9, r8
 800a8f2:	4417      	add	r7, r2
 800a8f4:	441f      	add	r7, r3
 800a8f6:	464b      	mov	r3, r9
 800a8f8:	bfa8      	it	ge
 800a8fa:	4643      	movge	r3, r8
 800a8fc:	42bb      	cmp	r3, r7
 800a8fe:	bfa8      	it	ge
 800a900:	463b      	movge	r3, r7
 800a902:	2b00      	cmp	r3, #0
 800a904:	bfc2      	ittt	gt
 800a906:	eba8 0803 	subgt.w	r8, r8, r3
 800a90a:	1aff      	subgt	r7, r7, r3
 800a90c:	eba9 0903 	subgt.w	r9, r9, r3
 800a910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a912:	2b00      	cmp	r3, #0
 800a914:	dd17      	ble.n	800a946 <_strtod_l+0x75e>
 800a916:	4631      	mov	r1, r6
 800a918:	461a      	mov	r2, r3
 800a91a:	4620      	mov	r0, r4
 800a91c:	f001 ffa6 	bl	800c86c <__pow5mult>
 800a920:	4606      	mov	r6, r0
 800a922:	2800      	cmp	r0, #0
 800a924:	f43f aea8 	beq.w	800a678 <_strtod_l+0x490>
 800a928:	4601      	mov	r1, r0
 800a92a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a92c:	4620      	mov	r0, r4
 800a92e:	f001 fef3 	bl	800c718 <__multiply>
 800a932:	900b      	str	r0, [sp, #44]	; 0x2c
 800a934:	2800      	cmp	r0, #0
 800a936:	f43f ae9f 	beq.w	800a678 <_strtod_l+0x490>
 800a93a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a93c:	4620      	mov	r0, r4
 800a93e:	f001 fdd3 	bl	800c4e8 <_Bfree>
 800a942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a944:	9318      	str	r3, [sp, #96]	; 0x60
 800a946:	f1b8 0f00 	cmp.w	r8, #0
 800a94a:	f300 808c 	bgt.w	800aa66 <_strtod_l+0x87e>
 800a94e:	9b06      	ldr	r3, [sp, #24]
 800a950:	2b00      	cmp	r3, #0
 800a952:	dd08      	ble.n	800a966 <_strtod_l+0x77e>
 800a954:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a956:	9905      	ldr	r1, [sp, #20]
 800a958:	4620      	mov	r0, r4
 800a95a:	f001 ff87 	bl	800c86c <__pow5mult>
 800a95e:	9005      	str	r0, [sp, #20]
 800a960:	2800      	cmp	r0, #0
 800a962:	f43f ae89 	beq.w	800a678 <_strtod_l+0x490>
 800a966:	2f00      	cmp	r7, #0
 800a968:	dd08      	ble.n	800a97c <_strtod_l+0x794>
 800a96a:	9905      	ldr	r1, [sp, #20]
 800a96c:	463a      	mov	r2, r7
 800a96e:	4620      	mov	r0, r4
 800a970:	f001 ffd6 	bl	800c920 <__lshift>
 800a974:	9005      	str	r0, [sp, #20]
 800a976:	2800      	cmp	r0, #0
 800a978:	f43f ae7e 	beq.w	800a678 <_strtod_l+0x490>
 800a97c:	f1b9 0f00 	cmp.w	r9, #0
 800a980:	dd08      	ble.n	800a994 <_strtod_l+0x7ac>
 800a982:	4631      	mov	r1, r6
 800a984:	464a      	mov	r2, r9
 800a986:	4620      	mov	r0, r4
 800a988:	f001 ffca 	bl	800c920 <__lshift>
 800a98c:	4606      	mov	r6, r0
 800a98e:	2800      	cmp	r0, #0
 800a990:	f43f ae72 	beq.w	800a678 <_strtod_l+0x490>
 800a994:	9a05      	ldr	r2, [sp, #20]
 800a996:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a998:	4620      	mov	r0, r4
 800a99a:	f002 f84d 	bl	800ca38 <__mdiff>
 800a99e:	4605      	mov	r5, r0
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	f43f ae69 	beq.w	800a678 <_strtod_l+0x490>
 800a9a6:	68c3      	ldr	r3, [r0, #12]
 800a9a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60c3      	str	r3, [r0, #12]
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	f002 f826 	bl	800ca00 <__mcmp>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	da60      	bge.n	800aa7a <_strtod_l+0x892>
 800a9b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ba:	ea53 030a 	orrs.w	r3, r3, sl
 800a9be:	f040 8082 	bne.w	800aac6 <_strtod_l+0x8de>
 800a9c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d17d      	bne.n	800aac6 <_strtod_l+0x8de>
 800a9ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a9ce:	0d1b      	lsrs	r3, r3, #20
 800a9d0:	051b      	lsls	r3, r3, #20
 800a9d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a9d6:	d976      	bls.n	800aac6 <_strtod_l+0x8de>
 800a9d8:	696b      	ldr	r3, [r5, #20]
 800a9da:	b913      	cbnz	r3, 800a9e2 <_strtod_l+0x7fa>
 800a9dc:	692b      	ldr	r3, [r5, #16]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	dd71      	ble.n	800aac6 <_strtod_l+0x8de>
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f001 ff9a 	bl	800c920 <__lshift>
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	f002 f806 	bl	800ca00 <__mcmp>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	dd66      	ble.n	800aac6 <_strtod_l+0x8de>
 800a9f8:	9904      	ldr	r1, [sp, #16]
 800a9fa:	4a53      	ldr	r2, [pc, #332]	; (800ab48 <_strtod_l+0x960>)
 800a9fc:	465b      	mov	r3, fp
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	f000 8081 	beq.w	800ab06 <_strtod_l+0x91e>
 800aa04:	ea02 010b 	and.w	r1, r2, fp
 800aa08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa0c:	dc7b      	bgt.n	800ab06 <_strtod_l+0x91e>
 800aa0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa12:	f77f aea9 	ble.w	800a768 <_strtod_l+0x580>
 800aa16:	4b4d      	ldr	r3, [pc, #308]	; (800ab4c <_strtod_l+0x964>)
 800aa18:	4650      	mov	r0, sl
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f7f5 fdeb 	bl	80005f8 <__aeabi_dmul>
 800aa22:	460b      	mov	r3, r1
 800aa24:	4303      	orrs	r3, r0
 800aa26:	bf08      	it	eq
 800aa28:	2322      	moveq	r3, #34	; 0x22
 800aa2a:	4682      	mov	sl, r0
 800aa2c:	468b      	mov	fp, r1
 800aa2e:	bf08      	it	eq
 800aa30:	6023      	streq	r3, [r4, #0]
 800aa32:	e62b      	b.n	800a68c <_strtod_l+0x4a4>
 800aa34:	f04f 32ff 	mov.w	r2, #4294967295
 800aa38:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3c:	ea03 0a0a 	and.w	sl, r3, sl
 800aa40:	e6e3      	b.n	800a80a <_strtod_l+0x622>
 800aa42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aa46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aa4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aa4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aa52:	fa01 f308 	lsl.w	r3, r1, r8
 800aa56:	9308      	str	r3, [sp, #32]
 800aa58:	910d      	str	r1, [sp, #52]	; 0x34
 800aa5a:	e746      	b.n	800a8ea <_strtod_l+0x702>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9308      	str	r3, [sp, #32]
 800aa60:	2301      	movs	r3, #1
 800aa62:	930d      	str	r3, [sp, #52]	; 0x34
 800aa64:	e741      	b.n	800a8ea <_strtod_l+0x702>
 800aa66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa68:	4642      	mov	r2, r8
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f001 ff58 	bl	800c920 <__lshift>
 800aa70:	9018      	str	r0, [sp, #96]	; 0x60
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f47f af6b 	bne.w	800a94e <_strtod_l+0x766>
 800aa78:	e5fe      	b.n	800a678 <_strtod_l+0x490>
 800aa7a:	465f      	mov	r7, fp
 800aa7c:	d16e      	bne.n	800ab5c <_strtod_l+0x974>
 800aa7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa84:	b342      	cbz	r2, 800aad8 <_strtod_l+0x8f0>
 800aa86:	4a32      	ldr	r2, [pc, #200]	; (800ab50 <_strtod_l+0x968>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d128      	bne.n	800aade <_strtod_l+0x8f6>
 800aa8c:	9b04      	ldr	r3, [sp, #16]
 800aa8e:	4651      	mov	r1, sl
 800aa90:	b1eb      	cbz	r3, 800aace <_strtod_l+0x8e6>
 800aa92:	4b2d      	ldr	r3, [pc, #180]	; (800ab48 <_strtod_l+0x960>)
 800aa94:	403b      	ands	r3, r7
 800aa96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa9a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa9e:	d819      	bhi.n	800aad4 <_strtod_l+0x8ec>
 800aaa0:	0d1b      	lsrs	r3, r3, #20
 800aaa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aaa6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaaa:	4299      	cmp	r1, r3
 800aaac:	d117      	bne.n	800aade <_strtod_l+0x8f6>
 800aaae:	4b29      	ldr	r3, [pc, #164]	; (800ab54 <_strtod_l+0x96c>)
 800aab0:	429f      	cmp	r7, r3
 800aab2:	d102      	bne.n	800aaba <_strtod_l+0x8d2>
 800aab4:	3101      	adds	r1, #1
 800aab6:	f43f addf 	beq.w	800a678 <_strtod_l+0x490>
 800aaba:	4b23      	ldr	r3, [pc, #140]	; (800ab48 <_strtod_l+0x960>)
 800aabc:	403b      	ands	r3, r7
 800aabe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800aac2:	f04f 0a00 	mov.w	sl, #0
 800aac6:	9b04      	ldr	r3, [sp, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1a4      	bne.n	800aa16 <_strtod_l+0x82e>
 800aacc:	e5de      	b.n	800a68c <_strtod_l+0x4a4>
 800aace:	f04f 33ff 	mov.w	r3, #4294967295
 800aad2:	e7ea      	b.n	800aaaa <_strtod_l+0x8c2>
 800aad4:	4613      	mov	r3, r2
 800aad6:	e7e8      	b.n	800aaaa <_strtod_l+0x8c2>
 800aad8:	ea53 030a 	orrs.w	r3, r3, sl
 800aadc:	d08c      	beq.n	800a9f8 <_strtod_l+0x810>
 800aade:	9b08      	ldr	r3, [sp, #32]
 800aae0:	b1db      	cbz	r3, 800ab1a <_strtod_l+0x932>
 800aae2:	423b      	tst	r3, r7
 800aae4:	d0ef      	beq.n	800aac6 <_strtod_l+0x8de>
 800aae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aae8:	9a04      	ldr	r2, [sp, #16]
 800aaea:	4650      	mov	r0, sl
 800aaec:	4659      	mov	r1, fp
 800aaee:	b1c3      	cbz	r3, 800ab22 <_strtod_l+0x93a>
 800aaf0:	f7ff fb5c 	bl	800a1ac <sulp>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	ec51 0b18 	vmov	r0, r1, d8
 800aafc:	f7f5 fbc6 	bl	800028c <__adddf3>
 800ab00:	4682      	mov	sl, r0
 800ab02:	468b      	mov	fp, r1
 800ab04:	e7df      	b.n	800aac6 <_strtod_l+0x8de>
 800ab06:	4013      	ands	r3, r2
 800ab08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ab0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ab10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ab14:	f04f 3aff 	mov.w	sl, #4294967295
 800ab18:	e7d5      	b.n	800aac6 <_strtod_l+0x8de>
 800ab1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab1c:	ea13 0f0a 	tst.w	r3, sl
 800ab20:	e7e0      	b.n	800aae4 <_strtod_l+0x8fc>
 800ab22:	f7ff fb43 	bl	800a1ac <sulp>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	ec51 0b18 	vmov	r0, r1, d8
 800ab2e:	f7f5 fbab 	bl	8000288 <__aeabi_dsub>
 800ab32:	2200      	movs	r2, #0
 800ab34:	2300      	movs	r3, #0
 800ab36:	4682      	mov	sl, r0
 800ab38:	468b      	mov	fp, r1
 800ab3a:	f7f5 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d0c1      	beq.n	800aac6 <_strtod_l+0x8de>
 800ab42:	e611      	b.n	800a768 <_strtod_l+0x580>
 800ab44:	fffffc02 	.word	0xfffffc02
 800ab48:	7ff00000 	.word	0x7ff00000
 800ab4c:	39500000 	.word	0x39500000
 800ab50:	000fffff 	.word	0x000fffff
 800ab54:	7fefffff 	.word	0x7fefffff
 800ab58:	08010520 	.word	0x08010520
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f002 f8cc 	bl	800ccfc <__ratio>
 800ab64:	ec59 8b10 	vmov	r8, r9, d0
 800ab68:	ee10 0a10 	vmov	r0, s0
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab72:	4649      	mov	r1, r9
 800ab74:	f7f5 ffbc 	bl	8000af0 <__aeabi_dcmple>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d07a      	beq.n	800ac72 <_strtod_l+0xa8a>
 800ab7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d04a      	beq.n	800ac18 <_strtod_l+0xa30>
 800ab82:	4b95      	ldr	r3, [pc, #596]	; (800add8 <_strtod_l+0xbf0>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800add8 <_strtod_l+0xbf0>
 800ab8e:	f04f 0800 	mov.w	r8, #0
 800ab92:	4b92      	ldr	r3, [pc, #584]	; (800addc <_strtod_l+0xbf4>)
 800ab94:	403b      	ands	r3, r7
 800ab96:	930d      	str	r3, [sp, #52]	; 0x34
 800ab98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab9a:	4b91      	ldr	r3, [pc, #580]	; (800ade0 <_strtod_l+0xbf8>)
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	f040 80b0 	bne.w	800ad02 <_strtod_l+0xb1a>
 800aba2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aba6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800abaa:	ec4b ab10 	vmov	d0, sl, fp
 800abae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abb2:	f001 ffcb 	bl	800cb4c <__ulp>
 800abb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abba:	ec53 2b10 	vmov	r2, r3, d0
 800abbe:	f7f5 fd1b 	bl	80005f8 <__aeabi_dmul>
 800abc2:	4652      	mov	r2, sl
 800abc4:	465b      	mov	r3, fp
 800abc6:	f7f5 fb61 	bl	800028c <__adddf3>
 800abca:	460b      	mov	r3, r1
 800abcc:	4983      	ldr	r1, [pc, #524]	; (800addc <_strtod_l+0xbf4>)
 800abce:	4a85      	ldr	r2, [pc, #532]	; (800ade4 <_strtod_l+0xbfc>)
 800abd0:	4019      	ands	r1, r3
 800abd2:	4291      	cmp	r1, r2
 800abd4:	4682      	mov	sl, r0
 800abd6:	d960      	bls.n	800ac9a <_strtod_l+0xab2>
 800abd8:	ee18 3a90 	vmov	r3, s17
 800abdc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d104      	bne.n	800abee <_strtod_l+0xa06>
 800abe4:	ee18 3a10 	vmov	r3, s16
 800abe8:	3301      	adds	r3, #1
 800abea:	f43f ad45 	beq.w	800a678 <_strtod_l+0x490>
 800abee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800adf0 <_strtod_l+0xc08>
 800abf2:	f04f 3aff 	mov.w	sl, #4294967295
 800abf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800abf8:	4620      	mov	r0, r4
 800abfa:	f001 fc75 	bl	800c4e8 <_Bfree>
 800abfe:	9905      	ldr	r1, [sp, #20]
 800ac00:	4620      	mov	r0, r4
 800ac02:	f001 fc71 	bl	800c4e8 <_Bfree>
 800ac06:	4631      	mov	r1, r6
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f001 fc6d 	bl	800c4e8 <_Bfree>
 800ac0e:	4629      	mov	r1, r5
 800ac10:	4620      	mov	r0, r4
 800ac12:	f001 fc69 	bl	800c4e8 <_Bfree>
 800ac16:	e61a      	b.n	800a84e <_strtod_l+0x666>
 800ac18:	f1ba 0f00 	cmp.w	sl, #0
 800ac1c:	d11b      	bne.n	800ac56 <_strtod_l+0xa6e>
 800ac1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac22:	b9f3      	cbnz	r3, 800ac62 <_strtod_l+0xa7a>
 800ac24:	4b6c      	ldr	r3, [pc, #432]	; (800add8 <_strtod_l+0xbf0>)
 800ac26:	2200      	movs	r2, #0
 800ac28:	4640      	mov	r0, r8
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	f7f5 ff56 	bl	8000adc <__aeabi_dcmplt>
 800ac30:	b9d0      	cbnz	r0, 800ac68 <_strtod_l+0xa80>
 800ac32:	4640      	mov	r0, r8
 800ac34:	4649      	mov	r1, r9
 800ac36:	4b6c      	ldr	r3, [pc, #432]	; (800ade8 <_strtod_l+0xc00>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f7f5 fcdd 	bl	80005f8 <__aeabi_dmul>
 800ac3e:	4680      	mov	r8, r0
 800ac40:	4689      	mov	r9, r1
 800ac42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ac46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ac4a:	9315      	str	r3, [sp, #84]	; 0x54
 800ac4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ac50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac54:	e79d      	b.n	800ab92 <_strtod_l+0x9aa>
 800ac56:	f1ba 0f01 	cmp.w	sl, #1
 800ac5a:	d102      	bne.n	800ac62 <_strtod_l+0xa7a>
 800ac5c:	2f00      	cmp	r7, #0
 800ac5e:	f43f ad83 	beq.w	800a768 <_strtod_l+0x580>
 800ac62:	4b62      	ldr	r3, [pc, #392]	; (800adec <_strtod_l+0xc04>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	e78e      	b.n	800ab86 <_strtod_l+0x99e>
 800ac68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ade8 <_strtod_l+0xc00>
 800ac6c:	f04f 0800 	mov.w	r8, #0
 800ac70:	e7e7      	b.n	800ac42 <_strtod_l+0xa5a>
 800ac72:	4b5d      	ldr	r3, [pc, #372]	; (800ade8 <_strtod_l+0xc00>)
 800ac74:	4640      	mov	r0, r8
 800ac76:	4649      	mov	r1, r9
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f7f5 fcbd 	bl	80005f8 <__aeabi_dmul>
 800ac7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac80:	4680      	mov	r8, r0
 800ac82:	4689      	mov	r9, r1
 800ac84:	b933      	cbnz	r3, 800ac94 <_strtod_l+0xaac>
 800ac86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac8a:	900e      	str	r0, [sp, #56]	; 0x38
 800ac8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ac92:	e7dd      	b.n	800ac50 <_strtod_l+0xa68>
 800ac94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ac98:	e7f9      	b.n	800ac8e <_strtod_l+0xaa6>
 800ac9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ac9e:	9b04      	ldr	r3, [sp, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1a8      	bne.n	800abf6 <_strtod_l+0xa0e>
 800aca4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acaa:	0d1b      	lsrs	r3, r3, #20
 800acac:	051b      	lsls	r3, r3, #20
 800acae:	429a      	cmp	r2, r3
 800acb0:	d1a1      	bne.n	800abf6 <_strtod_l+0xa0e>
 800acb2:	4640      	mov	r0, r8
 800acb4:	4649      	mov	r1, r9
 800acb6:	f7f5 ffff 	bl	8000cb8 <__aeabi_d2lz>
 800acba:	f7f5 fc6f 	bl	800059c <__aeabi_l2d>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4640      	mov	r0, r8
 800acc4:	4649      	mov	r1, r9
 800acc6:	f7f5 fadf 	bl	8000288 <__aeabi_dsub>
 800acca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800accc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acd0:	ea43 030a 	orr.w	r3, r3, sl
 800acd4:	4313      	orrs	r3, r2
 800acd6:	4680      	mov	r8, r0
 800acd8:	4689      	mov	r9, r1
 800acda:	d055      	beq.n	800ad88 <_strtod_l+0xba0>
 800acdc:	a336      	add	r3, pc, #216	; (adr r3, 800adb8 <_strtod_l+0xbd0>)
 800acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace2:	f7f5 fefb 	bl	8000adc <__aeabi_dcmplt>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f47f acd0 	bne.w	800a68c <_strtod_l+0x4a4>
 800acec:	a334      	add	r3, pc, #208	; (adr r3, 800adc0 <_strtod_l+0xbd8>)
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	4640      	mov	r0, r8
 800acf4:	4649      	mov	r1, r9
 800acf6:	f7f5 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	f43f af7b 	beq.w	800abf6 <_strtod_l+0xa0e>
 800ad00:	e4c4      	b.n	800a68c <_strtod_l+0x4a4>
 800ad02:	9b04      	ldr	r3, [sp, #16]
 800ad04:	b333      	cbz	r3, 800ad54 <_strtod_l+0xb6c>
 800ad06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad0c:	d822      	bhi.n	800ad54 <_strtod_l+0xb6c>
 800ad0e:	a32e      	add	r3, pc, #184	; (adr r3, 800adc8 <_strtod_l+0xbe0>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	4640      	mov	r0, r8
 800ad16:	4649      	mov	r1, r9
 800ad18:	f7f5 feea 	bl	8000af0 <__aeabi_dcmple>
 800ad1c:	b1a0      	cbz	r0, 800ad48 <_strtod_l+0xb60>
 800ad1e:	4649      	mov	r1, r9
 800ad20:	4640      	mov	r0, r8
 800ad22:	f7f5 ff41 	bl	8000ba8 <__aeabi_d2uiz>
 800ad26:	2801      	cmp	r0, #1
 800ad28:	bf38      	it	cc
 800ad2a:	2001      	movcc	r0, #1
 800ad2c:	f7f5 fbea 	bl	8000504 <__aeabi_ui2d>
 800ad30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad32:	4680      	mov	r8, r0
 800ad34:	4689      	mov	r9, r1
 800ad36:	bb23      	cbnz	r3, 800ad82 <_strtod_l+0xb9a>
 800ad38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad3c:	9010      	str	r0, [sp, #64]	; 0x40
 800ad3e:	9311      	str	r3, [sp, #68]	; 0x44
 800ad40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	9309      	str	r3, [sp, #36]	; 0x24
 800ad54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad58:	eeb0 0a48 	vmov.f32	s0, s16
 800ad5c:	eef0 0a68 	vmov.f32	s1, s17
 800ad60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad64:	f001 fef2 	bl	800cb4c <__ulp>
 800ad68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad6c:	ec53 2b10 	vmov	r2, r3, d0
 800ad70:	f7f5 fc42 	bl	80005f8 <__aeabi_dmul>
 800ad74:	ec53 2b18 	vmov	r2, r3, d8
 800ad78:	f7f5 fa88 	bl	800028c <__adddf3>
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	468b      	mov	fp, r1
 800ad80:	e78d      	b.n	800ac9e <_strtod_l+0xab6>
 800ad82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ad86:	e7db      	b.n	800ad40 <_strtod_l+0xb58>
 800ad88:	a311      	add	r3, pc, #68	; (adr r3, 800add0 <_strtod_l+0xbe8>)
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	f7f5 fea5 	bl	8000adc <__aeabi_dcmplt>
 800ad92:	e7b2      	b.n	800acfa <_strtod_l+0xb12>
 800ad94:	2300      	movs	r3, #0
 800ad96:	930a      	str	r3, [sp, #40]	; 0x28
 800ad98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad9c:	6013      	str	r3, [r2, #0]
 800ad9e:	f7ff ba6b 	b.w	800a278 <_strtod_l+0x90>
 800ada2:	2a65      	cmp	r2, #101	; 0x65
 800ada4:	f43f ab5f 	beq.w	800a466 <_strtod_l+0x27e>
 800ada8:	2a45      	cmp	r2, #69	; 0x45
 800adaa:	f43f ab5c 	beq.w	800a466 <_strtod_l+0x27e>
 800adae:	2301      	movs	r3, #1
 800adb0:	f7ff bb94 	b.w	800a4dc <_strtod_l+0x2f4>
 800adb4:	f3af 8000 	nop.w
 800adb8:	94a03595 	.word	0x94a03595
 800adbc:	3fdfffff 	.word	0x3fdfffff
 800adc0:	35afe535 	.word	0x35afe535
 800adc4:	3fe00000 	.word	0x3fe00000
 800adc8:	ffc00000 	.word	0xffc00000
 800adcc:	41dfffff 	.word	0x41dfffff
 800add0:	94a03595 	.word	0x94a03595
 800add4:	3fcfffff 	.word	0x3fcfffff
 800add8:	3ff00000 	.word	0x3ff00000
 800addc:	7ff00000 	.word	0x7ff00000
 800ade0:	7fe00000 	.word	0x7fe00000
 800ade4:	7c9fffff 	.word	0x7c9fffff
 800ade8:	3fe00000 	.word	0x3fe00000
 800adec:	bff00000 	.word	0xbff00000
 800adf0:	7fefffff 	.word	0x7fefffff

0800adf4 <_strtod_r>:
 800adf4:	4b01      	ldr	r3, [pc, #4]	; (800adfc <_strtod_r+0x8>)
 800adf6:	f7ff b9f7 	b.w	800a1e8 <_strtod_l>
 800adfa:	bf00      	nop
 800adfc:	20000154 	.word	0x20000154

0800ae00 <strtod>:
 800ae00:	460a      	mov	r2, r1
 800ae02:	4601      	mov	r1, r0
 800ae04:	4802      	ldr	r0, [pc, #8]	; (800ae10 <strtod+0x10>)
 800ae06:	4b03      	ldr	r3, [pc, #12]	; (800ae14 <strtod+0x14>)
 800ae08:	6800      	ldr	r0, [r0, #0]
 800ae0a:	f7ff b9ed 	b.w	800a1e8 <_strtod_l>
 800ae0e:	bf00      	nop
 800ae10:	200000ec 	.word	0x200000ec
 800ae14:	20000154 	.word	0x20000154

0800ae18 <strtok>:
 800ae18:	4b16      	ldr	r3, [pc, #88]	; (800ae74 <strtok+0x5c>)
 800ae1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae1c:	681e      	ldr	r6, [r3, #0]
 800ae1e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ae20:	4605      	mov	r5, r0
 800ae22:	b9fc      	cbnz	r4, 800ae64 <strtok+0x4c>
 800ae24:	2050      	movs	r0, #80	; 0x50
 800ae26:	9101      	str	r1, [sp, #4]
 800ae28:	f001 faf6 	bl	800c418 <malloc>
 800ae2c:	9901      	ldr	r1, [sp, #4]
 800ae2e:	65b0      	str	r0, [r6, #88]	; 0x58
 800ae30:	4602      	mov	r2, r0
 800ae32:	b920      	cbnz	r0, 800ae3e <strtok+0x26>
 800ae34:	4b10      	ldr	r3, [pc, #64]	; (800ae78 <strtok+0x60>)
 800ae36:	4811      	ldr	r0, [pc, #68]	; (800ae7c <strtok+0x64>)
 800ae38:	2157      	movs	r1, #87	; 0x57
 800ae3a:	f000 f8cd 	bl	800afd8 <__assert_func>
 800ae3e:	e9c0 4400 	strd	r4, r4, [r0]
 800ae42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ae46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ae4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ae4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ae52:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ae56:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ae5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ae5e:	6184      	str	r4, [r0, #24]
 800ae60:	7704      	strb	r4, [r0, #28]
 800ae62:	6244      	str	r4, [r0, #36]	; 0x24
 800ae64:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ae66:	2301      	movs	r3, #1
 800ae68:	4628      	mov	r0, r5
 800ae6a:	b002      	add	sp, #8
 800ae6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae70:	f000 b806 	b.w	800ae80 <__strtok_r>
 800ae74:	200000ec 	.word	0x200000ec
 800ae78:	08010548 	.word	0x08010548
 800ae7c:	0801055f 	.word	0x0801055f

0800ae80 <__strtok_r>:
 800ae80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae82:	b908      	cbnz	r0, 800ae88 <__strtok_r+0x8>
 800ae84:	6810      	ldr	r0, [r2, #0]
 800ae86:	b188      	cbz	r0, 800aeac <__strtok_r+0x2c>
 800ae88:	4604      	mov	r4, r0
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ae90:	460f      	mov	r7, r1
 800ae92:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ae96:	b91e      	cbnz	r6, 800aea0 <__strtok_r+0x20>
 800ae98:	b965      	cbnz	r5, 800aeb4 <__strtok_r+0x34>
 800ae9a:	6015      	str	r5, [r2, #0]
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	e005      	b.n	800aeac <__strtok_r+0x2c>
 800aea0:	42b5      	cmp	r5, r6
 800aea2:	d1f6      	bne.n	800ae92 <__strtok_r+0x12>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1f0      	bne.n	800ae8a <__strtok_r+0xa>
 800aea8:	6014      	str	r4, [r2, #0]
 800aeaa:	7003      	strb	r3, [r0, #0]
 800aeac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeae:	461c      	mov	r4, r3
 800aeb0:	e00c      	b.n	800aecc <__strtok_r+0x4c>
 800aeb2:	b915      	cbnz	r5, 800aeba <__strtok_r+0x3a>
 800aeb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aeb8:	460e      	mov	r6, r1
 800aeba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aebe:	42ab      	cmp	r3, r5
 800aec0:	d1f7      	bne.n	800aeb2 <__strtok_r+0x32>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0f3      	beq.n	800aeae <__strtok_r+0x2e>
 800aec6:	2300      	movs	r3, #0
 800aec8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aecc:	6014      	str	r4, [r2, #0]
 800aece:	e7ed      	b.n	800aeac <__strtok_r+0x2c>

0800aed0 <_strtol_l.constprop.0>:
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed6:	d001      	beq.n	800aedc <_strtol_l.constprop.0+0xc>
 800aed8:	2b24      	cmp	r3, #36	; 0x24
 800aeda:	d906      	bls.n	800aeea <_strtol_l.constprop.0+0x1a>
 800aedc:	f7fe fa72 	bl	80093c4 <__errno>
 800aee0:	2316      	movs	r3, #22
 800aee2:	6003      	str	r3, [r0, #0]
 800aee4:	2000      	movs	r0, #0
 800aee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800afd0 <_strtol_l.constprop.0+0x100>
 800aeee:	460d      	mov	r5, r1
 800aef0:	462e      	mov	r6, r5
 800aef2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aef6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800aefa:	f017 0708 	ands.w	r7, r7, #8
 800aefe:	d1f7      	bne.n	800aef0 <_strtol_l.constprop.0+0x20>
 800af00:	2c2d      	cmp	r4, #45	; 0x2d
 800af02:	d132      	bne.n	800af6a <_strtol_l.constprop.0+0x9a>
 800af04:	782c      	ldrb	r4, [r5, #0]
 800af06:	2701      	movs	r7, #1
 800af08:	1cb5      	adds	r5, r6, #2
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d05b      	beq.n	800afc6 <_strtol_l.constprop.0+0xf6>
 800af0e:	2b10      	cmp	r3, #16
 800af10:	d109      	bne.n	800af26 <_strtol_l.constprop.0+0x56>
 800af12:	2c30      	cmp	r4, #48	; 0x30
 800af14:	d107      	bne.n	800af26 <_strtol_l.constprop.0+0x56>
 800af16:	782c      	ldrb	r4, [r5, #0]
 800af18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af1c:	2c58      	cmp	r4, #88	; 0x58
 800af1e:	d14d      	bne.n	800afbc <_strtol_l.constprop.0+0xec>
 800af20:	786c      	ldrb	r4, [r5, #1]
 800af22:	2310      	movs	r3, #16
 800af24:	3502      	adds	r5, #2
 800af26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800af2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800af2e:	f04f 0c00 	mov.w	ip, #0
 800af32:	fbb8 f9f3 	udiv	r9, r8, r3
 800af36:	4666      	mov	r6, ip
 800af38:	fb03 8a19 	mls	sl, r3, r9, r8
 800af3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800af40:	f1be 0f09 	cmp.w	lr, #9
 800af44:	d816      	bhi.n	800af74 <_strtol_l.constprop.0+0xa4>
 800af46:	4674      	mov	r4, lr
 800af48:	42a3      	cmp	r3, r4
 800af4a:	dd24      	ble.n	800af96 <_strtol_l.constprop.0+0xc6>
 800af4c:	f1bc 0f00 	cmp.w	ip, #0
 800af50:	db1e      	blt.n	800af90 <_strtol_l.constprop.0+0xc0>
 800af52:	45b1      	cmp	r9, r6
 800af54:	d31c      	bcc.n	800af90 <_strtol_l.constprop.0+0xc0>
 800af56:	d101      	bne.n	800af5c <_strtol_l.constprop.0+0x8c>
 800af58:	45a2      	cmp	sl, r4
 800af5a:	db19      	blt.n	800af90 <_strtol_l.constprop.0+0xc0>
 800af5c:	fb06 4603 	mla	r6, r6, r3, r4
 800af60:	f04f 0c01 	mov.w	ip, #1
 800af64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af68:	e7e8      	b.n	800af3c <_strtol_l.constprop.0+0x6c>
 800af6a:	2c2b      	cmp	r4, #43	; 0x2b
 800af6c:	bf04      	itt	eq
 800af6e:	782c      	ldrbeq	r4, [r5, #0]
 800af70:	1cb5      	addeq	r5, r6, #2
 800af72:	e7ca      	b.n	800af0a <_strtol_l.constprop.0+0x3a>
 800af74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800af78:	f1be 0f19 	cmp.w	lr, #25
 800af7c:	d801      	bhi.n	800af82 <_strtol_l.constprop.0+0xb2>
 800af7e:	3c37      	subs	r4, #55	; 0x37
 800af80:	e7e2      	b.n	800af48 <_strtol_l.constprop.0+0x78>
 800af82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800af86:	f1be 0f19 	cmp.w	lr, #25
 800af8a:	d804      	bhi.n	800af96 <_strtol_l.constprop.0+0xc6>
 800af8c:	3c57      	subs	r4, #87	; 0x57
 800af8e:	e7db      	b.n	800af48 <_strtol_l.constprop.0+0x78>
 800af90:	f04f 3cff 	mov.w	ip, #4294967295
 800af94:	e7e6      	b.n	800af64 <_strtol_l.constprop.0+0x94>
 800af96:	f1bc 0f00 	cmp.w	ip, #0
 800af9a:	da05      	bge.n	800afa8 <_strtol_l.constprop.0+0xd8>
 800af9c:	2322      	movs	r3, #34	; 0x22
 800af9e:	6003      	str	r3, [r0, #0]
 800afa0:	4646      	mov	r6, r8
 800afa2:	b942      	cbnz	r2, 800afb6 <_strtol_l.constprop.0+0xe6>
 800afa4:	4630      	mov	r0, r6
 800afa6:	e79e      	b.n	800aee6 <_strtol_l.constprop.0+0x16>
 800afa8:	b107      	cbz	r7, 800afac <_strtol_l.constprop.0+0xdc>
 800afaa:	4276      	negs	r6, r6
 800afac:	2a00      	cmp	r2, #0
 800afae:	d0f9      	beq.n	800afa4 <_strtol_l.constprop.0+0xd4>
 800afb0:	f1bc 0f00 	cmp.w	ip, #0
 800afb4:	d000      	beq.n	800afb8 <_strtol_l.constprop.0+0xe8>
 800afb6:	1e69      	subs	r1, r5, #1
 800afb8:	6011      	str	r1, [r2, #0]
 800afba:	e7f3      	b.n	800afa4 <_strtol_l.constprop.0+0xd4>
 800afbc:	2430      	movs	r4, #48	; 0x30
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1b1      	bne.n	800af26 <_strtol_l.constprop.0+0x56>
 800afc2:	2308      	movs	r3, #8
 800afc4:	e7af      	b.n	800af26 <_strtol_l.constprop.0+0x56>
 800afc6:	2c30      	cmp	r4, #48	; 0x30
 800afc8:	d0a5      	beq.n	800af16 <_strtol_l.constprop.0+0x46>
 800afca:	230a      	movs	r3, #10
 800afcc:	e7ab      	b.n	800af26 <_strtol_l.constprop.0+0x56>
 800afce:	bf00      	nop
 800afd0:	080105f9 	.word	0x080105f9

0800afd4 <_strtol_r>:
 800afd4:	f7ff bf7c 	b.w	800aed0 <_strtol_l.constprop.0>

0800afd8 <__assert_func>:
 800afd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afda:	4614      	mov	r4, r2
 800afdc:	461a      	mov	r2, r3
 800afde:	4b09      	ldr	r3, [pc, #36]	; (800b004 <__assert_func+0x2c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4605      	mov	r5, r0
 800afe4:	68d8      	ldr	r0, [r3, #12]
 800afe6:	b14c      	cbz	r4, 800affc <__assert_func+0x24>
 800afe8:	4b07      	ldr	r3, [pc, #28]	; (800b008 <__assert_func+0x30>)
 800afea:	9100      	str	r1, [sp, #0]
 800afec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aff0:	4906      	ldr	r1, [pc, #24]	; (800b00c <__assert_func+0x34>)
 800aff2:	462b      	mov	r3, r5
 800aff4:	f000 fe8a 	bl	800bd0c <fiprintf>
 800aff8:	f002 fba0 	bl	800d73c <abort>
 800affc:	4b04      	ldr	r3, [pc, #16]	; (800b010 <__assert_func+0x38>)
 800affe:	461c      	mov	r4, r3
 800b000:	e7f3      	b.n	800afea <__assert_func+0x12>
 800b002:	bf00      	nop
 800b004:	200000ec 	.word	0x200000ec
 800b008:	080105bc 	.word	0x080105bc
 800b00c:	080105c9 	.word	0x080105c9
 800b010:	080105f7 	.word	0x080105f7

0800b014 <quorem>:
 800b014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b018:	6903      	ldr	r3, [r0, #16]
 800b01a:	690c      	ldr	r4, [r1, #16]
 800b01c:	42a3      	cmp	r3, r4
 800b01e:	4607      	mov	r7, r0
 800b020:	f2c0 8081 	blt.w	800b126 <quorem+0x112>
 800b024:	3c01      	subs	r4, #1
 800b026:	f101 0814 	add.w	r8, r1, #20
 800b02a:	f100 0514 	add.w	r5, r0, #20
 800b02e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b032:	9301      	str	r3, [sp, #4]
 800b034:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b038:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b03c:	3301      	adds	r3, #1
 800b03e:	429a      	cmp	r2, r3
 800b040:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b044:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b048:	fbb2 f6f3 	udiv	r6, r2, r3
 800b04c:	d331      	bcc.n	800b0b2 <quorem+0x9e>
 800b04e:	f04f 0e00 	mov.w	lr, #0
 800b052:	4640      	mov	r0, r8
 800b054:	46ac      	mov	ip, r5
 800b056:	46f2      	mov	sl, lr
 800b058:	f850 2b04 	ldr.w	r2, [r0], #4
 800b05c:	b293      	uxth	r3, r2
 800b05e:	fb06 e303 	mla	r3, r6, r3, lr
 800b062:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b066:	b29b      	uxth	r3, r3
 800b068:	ebaa 0303 	sub.w	r3, sl, r3
 800b06c:	f8dc a000 	ldr.w	sl, [ip]
 800b070:	0c12      	lsrs	r2, r2, #16
 800b072:	fa13 f38a 	uxtah	r3, r3, sl
 800b076:	fb06 e202 	mla	r2, r6, r2, lr
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	9b00      	ldr	r3, [sp, #0]
 800b07e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b082:	b292      	uxth	r2, r2
 800b084:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b08c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b090:	4581      	cmp	r9, r0
 800b092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b096:	f84c 3b04 	str.w	r3, [ip], #4
 800b09a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b09e:	d2db      	bcs.n	800b058 <quorem+0x44>
 800b0a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b0a4:	b92b      	cbnz	r3, 800b0b2 <quorem+0x9e>
 800b0a6:	9b01      	ldr	r3, [sp, #4]
 800b0a8:	3b04      	subs	r3, #4
 800b0aa:	429d      	cmp	r5, r3
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	d32e      	bcc.n	800b10e <quorem+0xfa>
 800b0b0:	613c      	str	r4, [r7, #16]
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	f001 fca4 	bl	800ca00 <__mcmp>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	db24      	blt.n	800b106 <quorem+0xf2>
 800b0bc:	3601      	adds	r6, #1
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f04f 0c00 	mov.w	ip, #0
 800b0c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0c8:	f8d0 e000 	ldr.w	lr, [r0]
 800b0cc:	b293      	uxth	r3, r2
 800b0ce:	ebac 0303 	sub.w	r3, ip, r3
 800b0d2:	0c12      	lsrs	r2, r2, #16
 800b0d4:	fa13 f38e 	uxtah	r3, r3, lr
 800b0d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0e6:	45c1      	cmp	r9, r8
 800b0e8:	f840 3b04 	str.w	r3, [r0], #4
 800b0ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0f0:	d2e8      	bcs.n	800b0c4 <quorem+0xb0>
 800b0f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0fa:	b922      	cbnz	r2, 800b106 <quorem+0xf2>
 800b0fc:	3b04      	subs	r3, #4
 800b0fe:	429d      	cmp	r5, r3
 800b100:	461a      	mov	r2, r3
 800b102:	d30a      	bcc.n	800b11a <quorem+0x106>
 800b104:	613c      	str	r4, [r7, #16]
 800b106:	4630      	mov	r0, r6
 800b108:	b003      	add	sp, #12
 800b10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10e:	6812      	ldr	r2, [r2, #0]
 800b110:	3b04      	subs	r3, #4
 800b112:	2a00      	cmp	r2, #0
 800b114:	d1cc      	bne.n	800b0b0 <quorem+0x9c>
 800b116:	3c01      	subs	r4, #1
 800b118:	e7c7      	b.n	800b0aa <quorem+0x96>
 800b11a:	6812      	ldr	r2, [r2, #0]
 800b11c:	3b04      	subs	r3, #4
 800b11e:	2a00      	cmp	r2, #0
 800b120:	d1f0      	bne.n	800b104 <quorem+0xf0>
 800b122:	3c01      	subs	r4, #1
 800b124:	e7eb      	b.n	800b0fe <quorem+0xea>
 800b126:	2000      	movs	r0, #0
 800b128:	e7ee      	b.n	800b108 <quorem+0xf4>
 800b12a:	0000      	movs	r0, r0
 800b12c:	0000      	movs	r0, r0
	...

0800b130 <_dtoa_r>:
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	ed2d 8b04 	vpush	{d8-d9}
 800b138:	ec57 6b10 	vmov	r6, r7, d0
 800b13c:	b093      	sub	sp, #76	; 0x4c
 800b13e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b140:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b144:	9106      	str	r1, [sp, #24]
 800b146:	ee10 aa10 	vmov	sl, s0
 800b14a:	4604      	mov	r4, r0
 800b14c:	9209      	str	r2, [sp, #36]	; 0x24
 800b14e:	930c      	str	r3, [sp, #48]	; 0x30
 800b150:	46bb      	mov	fp, r7
 800b152:	b975      	cbnz	r5, 800b172 <_dtoa_r+0x42>
 800b154:	2010      	movs	r0, #16
 800b156:	f001 f95f 	bl	800c418 <malloc>
 800b15a:	4602      	mov	r2, r0
 800b15c:	6260      	str	r0, [r4, #36]	; 0x24
 800b15e:	b920      	cbnz	r0, 800b16a <_dtoa_r+0x3a>
 800b160:	4ba7      	ldr	r3, [pc, #668]	; (800b400 <_dtoa_r+0x2d0>)
 800b162:	21ea      	movs	r1, #234	; 0xea
 800b164:	48a7      	ldr	r0, [pc, #668]	; (800b404 <_dtoa_r+0x2d4>)
 800b166:	f7ff ff37 	bl	800afd8 <__assert_func>
 800b16a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b16e:	6005      	str	r5, [r0, #0]
 800b170:	60c5      	str	r5, [r0, #12]
 800b172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b174:	6819      	ldr	r1, [r3, #0]
 800b176:	b151      	cbz	r1, 800b18e <_dtoa_r+0x5e>
 800b178:	685a      	ldr	r2, [r3, #4]
 800b17a:	604a      	str	r2, [r1, #4]
 800b17c:	2301      	movs	r3, #1
 800b17e:	4093      	lsls	r3, r2
 800b180:	608b      	str	r3, [r1, #8]
 800b182:	4620      	mov	r0, r4
 800b184:	f001 f9b0 	bl	800c4e8 <_Bfree>
 800b188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b18a:	2200      	movs	r2, #0
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	1e3b      	subs	r3, r7, #0
 800b190:	bfaa      	itet	ge
 800b192:	2300      	movge	r3, #0
 800b194:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b198:	f8c8 3000 	strge.w	r3, [r8]
 800b19c:	4b9a      	ldr	r3, [pc, #616]	; (800b408 <_dtoa_r+0x2d8>)
 800b19e:	bfbc      	itt	lt
 800b1a0:	2201      	movlt	r2, #1
 800b1a2:	f8c8 2000 	strlt.w	r2, [r8]
 800b1a6:	ea33 030b 	bics.w	r3, r3, fp
 800b1aa:	d11b      	bne.n	800b1e4 <_dtoa_r+0xb4>
 800b1ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1b8:	4333      	orrs	r3, r6
 800b1ba:	f000 8592 	beq.w	800bce2 <_dtoa_r+0xbb2>
 800b1be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1c0:	b963      	cbnz	r3, 800b1dc <_dtoa_r+0xac>
 800b1c2:	4b92      	ldr	r3, [pc, #584]	; (800b40c <_dtoa_r+0x2dc>)
 800b1c4:	e022      	b.n	800b20c <_dtoa_r+0xdc>
 800b1c6:	4b92      	ldr	r3, [pc, #584]	; (800b410 <_dtoa_r+0x2e0>)
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1ce:	6013      	str	r3, [r2, #0]
 800b1d0:	9801      	ldr	r0, [sp, #4]
 800b1d2:	b013      	add	sp, #76	; 0x4c
 800b1d4:	ecbd 8b04 	vpop	{d8-d9}
 800b1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1dc:	4b8b      	ldr	r3, [pc, #556]	; (800b40c <_dtoa_r+0x2dc>)
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	3303      	adds	r3, #3
 800b1e2:	e7f3      	b.n	800b1cc <_dtoa_r+0x9c>
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	4659      	mov	r1, fp
 800b1ec:	f7f5 fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1f0:	ec4b ab19 	vmov	d9, sl, fp
 800b1f4:	4680      	mov	r8, r0
 800b1f6:	b158      	cbz	r0, 800b210 <_dtoa_r+0xe0>
 800b1f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b200:	2b00      	cmp	r3, #0
 800b202:	f000 856b 	beq.w	800bcdc <_dtoa_r+0xbac>
 800b206:	4883      	ldr	r0, [pc, #524]	; (800b414 <_dtoa_r+0x2e4>)
 800b208:	6018      	str	r0, [r3, #0]
 800b20a:	1e43      	subs	r3, r0, #1
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	e7df      	b.n	800b1d0 <_dtoa_r+0xa0>
 800b210:	ec4b ab10 	vmov	d0, sl, fp
 800b214:	aa10      	add	r2, sp, #64	; 0x40
 800b216:	a911      	add	r1, sp, #68	; 0x44
 800b218:	4620      	mov	r0, r4
 800b21a:	f001 fd13 	bl	800cc44 <__d2b>
 800b21e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b222:	ee08 0a10 	vmov	s16, r0
 800b226:	2d00      	cmp	r5, #0
 800b228:	f000 8084 	beq.w	800b334 <_dtoa_r+0x204>
 800b22c:	ee19 3a90 	vmov	r3, s19
 800b230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b234:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b238:	4656      	mov	r6, sl
 800b23a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b23e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b242:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b246:	4b74      	ldr	r3, [pc, #464]	; (800b418 <_dtoa_r+0x2e8>)
 800b248:	2200      	movs	r2, #0
 800b24a:	4630      	mov	r0, r6
 800b24c:	4639      	mov	r1, r7
 800b24e:	f7f5 f81b 	bl	8000288 <__aeabi_dsub>
 800b252:	a365      	add	r3, pc, #404	; (adr r3, 800b3e8 <_dtoa_r+0x2b8>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f7f5 f9ce 	bl	80005f8 <__aeabi_dmul>
 800b25c:	a364      	add	r3, pc, #400	; (adr r3, 800b3f0 <_dtoa_r+0x2c0>)
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	f7f5 f813 	bl	800028c <__adddf3>
 800b266:	4606      	mov	r6, r0
 800b268:	4628      	mov	r0, r5
 800b26a:	460f      	mov	r7, r1
 800b26c:	f7f5 f95a 	bl	8000524 <__aeabi_i2d>
 800b270:	a361      	add	r3, pc, #388	; (adr r3, 800b3f8 <_dtoa_r+0x2c8>)
 800b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b276:	f7f5 f9bf 	bl	80005f8 <__aeabi_dmul>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4630      	mov	r0, r6
 800b280:	4639      	mov	r1, r7
 800b282:	f7f5 f803 	bl	800028c <__adddf3>
 800b286:	4606      	mov	r6, r0
 800b288:	460f      	mov	r7, r1
 800b28a:	f7f5 fc65 	bl	8000b58 <__aeabi_d2iz>
 800b28e:	2200      	movs	r2, #0
 800b290:	9000      	str	r0, [sp, #0]
 800b292:	2300      	movs	r3, #0
 800b294:	4630      	mov	r0, r6
 800b296:	4639      	mov	r1, r7
 800b298:	f7f5 fc20 	bl	8000adc <__aeabi_dcmplt>
 800b29c:	b150      	cbz	r0, 800b2b4 <_dtoa_r+0x184>
 800b29e:	9800      	ldr	r0, [sp, #0]
 800b2a0:	f7f5 f940 	bl	8000524 <__aeabi_i2d>
 800b2a4:	4632      	mov	r2, r6
 800b2a6:	463b      	mov	r3, r7
 800b2a8:	f7f5 fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ac:	b910      	cbnz	r0, 800b2b4 <_dtoa_r+0x184>
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	9b00      	ldr	r3, [sp, #0]
 800b2b6:	2b16      	cmp	r3, #22
 800b2b8:	d85a      	bhi.n	800b370 <_dtoa_r+0x240>
 800b2ba:	9a00      	ldr	r2, [sp, #0]
 800b2bc:	4b57      	ldr	r3, [pc, #348]	; (800b41c <_dtoa_r+0x2ec>)
 800b2be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c6:	ec51 0b19 	vmov	r0, r1, d9
 800b2ca:	f7f5 fc07 	bl	8000adc <__aeabi_dcmplt>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d050      	beq.n	800b374 <_dtoa_r+0x244>
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	2300      	movs	r3, #0
 800b2da:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2de:	1b5d      	subs	r5, r3, r5
 800b2e0:	1e6b      	subs	r3, r5, #1
 800b2e2:	9305      	str	r3, [sp, #20]
 800b2e4:	bf45      	ittet	mi
 800b2e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b2ea:	9304      	strmi	r3, [sp, #16]
 800b2ec:	2300      	movpl	r3, #0
 800b2ee:	2300      	movmi	r3, #0
 800b2f0:	bf4c      	ite	mi
 800b2f2:	9305      	strmi	r3, [sp, #20]
 800b2f4:	9304      	strpl	r3, [sp, #16]
 800b2f6:	9b00      	ldr	r3, [sp, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	db3d      	blt.n	800b378 <_dtoa_r+0x248>
 800b2fc:	9b05      	ldr	r3, [sp, #20]
 800b2fe:	9a00      	ldr	r2, [sp, #0]
 800b300:	920a      	str	r2, [sp, #40]	; 0x28
 800b302:	4413      	add	r3, r2
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	2300      	movs	r3, #0
 800b308:	9307      	str	r3, [sp, #28]
 800b30a:	9b06      	ldr	r3, [sp, #24]
 800b30c:	2b09      	cmp	r3, #9
 800b30e:	f200 8089 	bhi.w	800b424 <_dtoa_r+0x2f4>
 800b312:	2b05      	cmp	r3, #5
 800b314:	bfc4      	itt	gt
 800b316:	3b04      	subgt	r3, #4
 800b318:	9306      	strgt	r3, [sp, #24]
 800b31a:	9b06      	ldr	r3, [sp, #24]
 800b31c:	f1a3 0302 	sub.w	r3, r3, #2
 800b320:	bfcc      	ite	gt
 800b322:	2500      	movgt	r5, #0
 800b324:	2501      	movle	r5, #1
 800b326:	2b03      	cmp	r3, #3
 800b328:	f200 8087 	bhi.w	800b43a <_dtoa_r+0x30a>
 800b32c:	e8df f003 	tbb	[pc, r3]
 800b330:	59383a2d 	.word	0x59383a2d
 800b334:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b338:	441d      	add	r5, r3
 800b33a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b33e:	2b20      	cmp	r3, #32
 800b340:	bfc1      	itttt	gt
 800b342:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b346:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b34a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b34e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b352:	bfda      	itte	le
 800b354:	f1c3 0320 	rsble	r3, r3, #32
 800b358:	fa06 f003 	lslle.w	r0, r6, r3
 800b35c:	4318      	orrgt	r0, r3
 800b35e:	f7f5 f8d1 	bl	8000504 <__aeabi_ui2d>
 800b362:	2301      	movs	r3, #1
 800b364:	4606      	mov	r6, r0
 800b366:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b36a:	3d01      	subs	r5, #1
 800b36c:	930e      	str	r3, [sp, #56]	; 0x38
 800b36e:	e76a      	b.n	800b246 <_dtoa_r+0x116>
 800b370:	2301      	movs	r3, #1
 800b372:	e7b2      	b.n	800b2da <_dtoa_r+0x1aa>
 800b374:	900b      	str	r0, [sp, #44]	; 0x2c
 800b376:	e7b1      	b.n	800b2dc <_dtoa_r+0x1ac>
 800b378:	9b04      	ldr	r3, [sp, #16]
 800b37a:	9a00      	ldr	r2, [sp, #0]
 800b37c:	1a9b      	subs	r3, r3, r2
 800b37e:	9304      	str	r3, [sp, #16]
 800b380:	4253      	negs	r3, r2
 800b382:	9307      	str	r3, [sp, #28]
 800b384:	2300      	movs	r3, #0
 800b386:	930a      	str	r3, [sp, #40]	; 0x28
 800b388:	e7bf      	b.n	800b30a <_dtoa_r+0x1da>
 800b38a:	2300      	movs	r3, #0
 800b38c:	9308      	str	r3, [sp, #32]
 800b38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	dc55      	bgt.n	800b440 <_dtoa_r+0x310>
 800b394:	2301      	movs	r3, #1
 800b396:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b39a:	461a      	mov	r2, r3
 800b39c:	9209      	str	r2, [sp, #36]	; 0x24
 800b39e:	e00c      	b.n	800b3ba <_dtoa_r+0x28a>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e7f3      	b.n	800b38c <_dtoa_r+0x25c>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3a8:	9308      	str	r3, [sp, #32]
 800b3aa:	9b00      	ldr	r3, [sp, #0]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	9302      	str	r3, [sp, #8]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	9303      	str	r3, [sp, #12]
 800b3b6:	bfb8      	it	lt
 800b3b8:	2301      	movlt	r3, #1
 800b3ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b3bc:	2200      	movs	r2, #0
 800b3be:	6042      	str	r2, [r0, #4]
 800b3c0:	2204      	movs	r2, #4
 800b3c2:	f102 0614 	add.w	r6, r2, #20
 800b3c6:	429e      	cmp	r6, r3
 800b3c8:	6841      	ldr	r1, [r0, #4]
 800b3ca:	d93d      	bls.n	800b448 <_dtoa_r+0x318>
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f001 f84b 	bl	800c468 <_Balloc>
 800b3d2:	9001      	str	r0, [sp, #4]
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d13b      	bne.n	800b450 <_dtoa_r+0x320>
 800b3d8:	4b11      	ldr	r3, [pc, #68]	; (800b420 <_dtoa_r+0x2f0>)
 800b3da:	4602      	mov	r2, r0
 800b3dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b3e0:	e6c0      	b.n	800b164 <_dtoa_r+0x34>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e7df      	b.n	800b3a6 <_dtoa_r+0x276>
 800b3e6:	bf00      	nop
 800b3e8:	636f4361 	.word	0x636f4361
 800b3ec:	3fd287a7 	.word	0x3fd287a7
 800b3f0:	8b60c8b3 	.word	0x8b60c8b3
 800b3f4:	3fc68a28 	.word	0x3fc68a28
 800b3f8:	509f79fb 	.word	0x509f79fb
 800b3fc:	3fd34413 	.word	0x3fd34413
 800b400:	08010548 	.word	0x08010548
 800b404:	08010706 	.word	0x08010706
 800b408:	7ff00000 	.word	0x7ff00000
 800b40c:	08010702 	.word	0x08010702
 800b410:	080106f9 	.word	0x080106f9
 800b414:	080104cd 	.word	0x080104cd
 800b418:	3ff80000 	.word	0x3ff80000
 800b41c:	08010870 	.word	0x08010870
 800b420:	08010761 	.word	0x08010761
 800b424:	2501      	movs	r5, #1
 800b426:	2300      	movs	r3, #0
 800b428:	9306      	str	r3, [sp, #24]
 800b42a:	9508      	str	r5, [sp, #32]
 800b42c:	f04f 33ff 	mov.w	r3, #4294967295
 800b430:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b434:	2200      	movs	r2, #0
 800b436:	2312      	movs	r3, #18
 800b438:	e7b0      	b.n	800b39c <_dtoa_r+0x26c>
 800b43a:	2301      	movs	r3, #1
 800b43c:	9308      	str	r3, [sp, #32]
 800b43e:	e7f5      	b.n	800b42c <_dtoa_r+0x2fc>
 800b440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b442:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b446:	e7b8      	b.n	800b3ba <_dtoa_r+0x28a>
 800b448:	3101      	adds	r1, #1
 800b44a:	6041      	str	r1, [r0, #4]
 800b44c:	0052      	lsls	r2, r2, #1
 800b44e:	e7b8      	b.n	800b3c2 <_dtoa_r+0x292>
 800b450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b452:	9a01      	ldr	r2, [sp, #4]
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	9b03      	ldr	r3, [sp, #12]
 800b458:	2b0e      	cmp	r3, #14
 800b45a:	f200 809d 	bhi.w	800b598 <_dtoa_r+0x468>
 800b45e:	2d00      	cmp	r5, #0
 800b460:	f000 809a 	beq.w	800b598 <_dtoa_r+0x468>
 800b464:	9b00      	ldr	r3, [sp, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	dd32      	ble.n	800b4d0 <_dtoa_r+0x3a0>
 800b46a:	4ab7      	ldr	r2, [pc, #732]	; (800b748 <_dtoa_r+0x618>)
 800b46c:	f003 030f 	and.w	r3, r3, #15
 800b470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b474:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b478:	9b00      	ldr	r3, [sp, #0]
 800b47a:	05d8      	lsls	r0, r3, #23
 800b47c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b480:	d516      	bpl.n	800b4b0 <_dtoa_r+0x380>
 800b482:	4bb2      	ldr	r3, [pc, #712]	; (800b74c <_dtoa_r+0x61c>)
 800b484:	ec51 0b19 	vmov	r0, r1, d9
 800b488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b48c:	f7f5 f9de 	bl	800084c <__aeabi_ddiv>
 800b490:	f007 070f 	and.w	r7, r7, #15
 800b494:	4682      	mov	sl, r0
 800b496:	468b      	mov	fp, r1
 800b498:	2503      	movs	r5, #3
 800b49a:	4eac      	ldr	r6, [pc, #688]	; (800b74c <_dtoa_r+0x61c>)
 800b49c:	b957      	cbnz	r7, 800b4b4 <_dtoa_r+0x384>
 800b49e:	4642      	mov	r2, r8
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	4650      	mov	r0, sl
 800b4a4:	4659      	mov	r1, fp
 800b4a6:	f7f5 f9d1 	bl	800084c <__aeabi_ddiv>
 800b4aa:	4682      	mov	sl, r0
 800b4ac:	468b      	mov	fp, r1
 800b4ae:	e028      	b.n	800b502 <_dtoa_r+0x3d2>
 800b4b0:	2502      	movs	r5, #2
 800b4b2:	e7f2      	b.n	800b49a <_dtoa_r+0x36a>
 800b4b4:	07f9      	lsls	r1, r7, #31
 800b4b6:	d508      	bpl.n	800b4ca <_dtoa_r+0x39a>
 800b4b8:	4640      	mov	r0, r8
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4c0:	f7f5 f89a 	bl	80005f8 <__aeabi_dmul>
 800b4c4:	3501      	adds	r5, #1
 800b4c6:	4680      	mov	r8, r0
 800b4c8:	4689      	mov	r9, r1
 800b4ca:	107f      	asrs	r7, r7, #1
 800b4cc:	3608      	adds	r6, #8
 800b4ce:	e7e5      	b.n	800b49c <_dtoa_r+0x36c>
 800b4d0:	f000 809b 	beq.w	800b60a <_dtoa_r+0x4da>
 800b4d4:	9b00      	ldr	r3, [sp, #0]
 800b4d6:	4f9d      	ldr	r7, [pc, #628]	; (800b74c <_dtoa_r+0x61c>)
 800b4d8:	425e      	negs	r6, r3
 800b4da:	4b9b      	ldr	r3, [pc, #620]	; (800b748 <_dtoa_r+0x618>)
 800b4dc:	f006 020f 	and.w	r2, r6, #15
 800b4e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	ec51 0b19 	vmov	r0, r1, d9
 800b4ec:	f7f5 f884 	bl	80005f8 <__aeabi_dmul>
 800b4f0:	1136      	asrs	r6, r6, #4
 800b4f2:	4682      	mov	sl, r0
 800b4f4:	468b      	mov	fp, r1
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	2502      	movs	r5, #2
 800b4fa:	2e00      	cmp	r6, #0
 800b4fc:	d17a      	bne.n	800b5f4 <_dtoa_r+0x4c4>
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1d3      	bne.n	800b4aa <_dtoa_r+0x37a>
 800b502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 8082 	beq.w	800b60e <_dtoa_r+0x4de>
 800b50a:	4b91      	ldr	r3, [pc, #580]	; (800b750 <_dtoa_r+0x620>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	4650      	mov	r0, sl
 800b510:	4659      	mov	r1, fp
 800b512:	f7f5 fae3 	bl	8000adc <__aeabi_dcmplt>
 800b516:	2800      	cmp	r0, #0
 800b518:	d079      	beq.n	800b60e <_dtoa_r+0x4de>
 800b51a:	9b03      	ldr	r3, [sp, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d076      	beq.n	800b60e <_dtoa_r+0x4de>
 800b520:	9b02      	ldr	r3, [sp, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	dd36      	ble.n	800b594 <_dtoa_r+0x464>
 800b526:	9b00      	ldr	r3, [sp, #0]
 800b528:	4650      	mov	r0, sl
 800b52a:	4659      	mov	r1, fp
 800b52c:	1e5f      	subs	r7, r3, #1
 800b52e:	2200      	movs	r2, #0
 800b530:	4b88      	ldr	r3, [pc, #544]	; (800b754 <_dtoa_r+0x624>)
 800b532:	f7f5 f861 	bl	80005f8 <__aeabi_dmul>
 800b536:	9e02      	ldr	r6, [sp, #8]
 800b538:	4682      	mov	sl, r0
 800b53a:	468b      	mov	fp, r1
 800b53c:	3501      	adds	r5, #1
 800b53e:	4628      	mov	r0, r5
 800b540:	f7f4 fff0 	bl	8000524 <__aeabi_i2d>
 800b544:	4652      	mov	r2, sl
 800b546:	465b      	mov	r3, fp
 800b548:	f7f5 f856 	bl	80005f8 <__aeabi_dmul>
 800b54c:	4b82      	ldr	r3, [pc, #520]	; (800b758 <_dtoa_r+0x628>)
 800b54e:	2200      	movs	r2, #0
 800b550:	f7f4 fe9c 	bl	800028c <__adddf3>
 800b554:	46d0      	mov	r8, sl
 800b556:	46d9      	mov	r9, fp
 800b558:	4682      	mov	sl, r0
 800b55a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b55e:	2e00      	cmp	r6, #0
 800b560:	d158      	bne.n	800b614 <_dtoa_r+0x4e4>
 800b562:	4b7e      	ldr	r3, [pc, #504]	; (800b75c <_dtoa_r+0x62c>)
 800b564:	2200      	movs	r2, #0
 800b566:	4640      	mov	r0, r8
 800b568:	4649      	mov	r1, r9
 800b56a:	f7f4 fe8d 	bl	8000288 <__aeabi_dsub>
 800b56e:	4652      	mov	r2, sl
 800b570:	465b      	mov	r3, fp
 800b572:	4680      	mov	r8, r0
 800b574:	4689      	mov	r9, r1
 800b576:	f7f5 facf 	bl	8000b18 <__aeabi_dcmpgt>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	f040 8295 	bne.w	800baaa <_dtoa_r+0x97a>
 800b580:	4652      	mov	r2, sl
 800b582:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b586:	4640      	mov	r0, r8
 800b588:	4649      	mov	r1, r9
 800b58a:	f7f5 faa7 	bl	8000adc <__aeabi_dcmplt>
 800b58e:	2800      	cmp	r0, #0
 800b590:	f040 8289 	bne.w	800baa6 <_dtoa_r+0x976>
 800b594:	ec5b ab19 	vmov	sl, fp, d9
 800b598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f2c0 8148 	blt.w	800b830 <_dtoa_r+0x700>
 800b5a0:	9a00      	ldr	r2, [sp, #0]
 800b5a2:	2a0e      	cmp	r2, #14
 800b5a4:	f300 8144 	bgt.w	800b830 <_dtoa_r+0x700>
 800b5a8:	4b67      	ldr	r3, [pc, #412]	; (800b748 <_dtoa_r+0x618>)
 800b5aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f280 80d5 	bge.w	800b764 <_dtoa_r+0x634>
 800b5ba:	9b03      	ldr	r3, [sp, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f300 80d1 	bgt.w	800b764 <_dtoa_r+0x634>
 800b5c2:	f040 826f 	bne.w	800baa4 <_dtoa_r+0x974>
 800b5c6:	4b65      	ldr	r3, [pc, #404]	; (800b75c <_dtoa_r+0x62c>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	4640      	mov	r0, r8
 800b5cc:	4649      	mov	r1, r9
 800b5ce:	f7f5 f813 	bl	80005f8 <__aeabi_dmul>
 800b5d2:	4652      	mov	r2, sl
 800b5d4:	465b      	mov	r3, fp
 800b5d6:	f7f5 fa95 	bl	8000b04 <__aeabi_dcmpge>
 800b5da:	9e03      	ldr	r6, [sp, #12]
 800b5dc:	4637      	mov	r7, r6
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	f040 8245 	bne.w	800ba6e <_dtoa_r+0x93e>
 800b5e4:	9d01      	ldr	r5, [sp, #4]
 800b5e6:	2331      	movs	r3, #49	; 0x31
 800b5e8:	f805 3b01 	strb.w	r3, [r5], #1
 800b5ec:	9b00      	ldr	r3, [sp, #0]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	e240      	b.n	800ba76 <_dtoa_r+0x946>
 800b5f4:	07f2      	lsls	r2, r6, #31
 800b5f6:	d505      	bpl.n	800b604 <_dtoa_r+0x4d4>
 800b5f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5fc:	f7f4 fffc 	bl	80005f8 <__aeabi_dmul>
 800b600:	3501      	adds	r5, #1
 800b602:	2301      	movs	r3, #1
 800b604:	1076      	asrs	r6, r6, #1
 800b606:	3708      	adds	r7, #8
 800b608:	e777      	b.n	800b4fa <_dtoa_r+0x3ca>
 800b60a:	2502      	movs	r5, #2
 800b60c:	e779      	b.n	800b502 <_dtoa_r+0x3d2>
 800b60e:	9f00      	ldr	r7, [sp, #0]
 800b610:	9e03      	ldr	r6, [sp, #12]
 800b612:	e794      	b.n	800b53e <_dtoa_r+0x40e>
 800b614:	9901      	ldr	r1, [sp, #4]
 800b616:	4b4c      	ldr	r3, [pc, #304]	; (800b748 <_dtoa_r+0x618>)
 800b618:	4431      	add	r1, r6
 800b61a:	910d      	str	r1, [sp, #52]	; 0x34
 800b61c:	9908      	ldr	r1, [sp, #32]
 800b61e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b622:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b626:	2900      	cmp	r1, #0
 800b628:	d043      	beq.n	800b6b2 <_dtoa_r+0x582>
 800b62a:	494d      	ldr	r1, [pc, #308]	; (800b760 <_dtoa_r+0x630>)
 800b62c:	2000      	movs	r0, #0
 800b62e:	f7f5 f90d 	bl	800084c <__aeabi_ddiv>
 800b632:	4652      	mov	r2, sl
 800b634:	465b      	mov	r3, fp
 800b636:	f7f4 fe27 	bl	8000288 <__aeabi_dsub>
 800b63a:	9d01      	ldr	r5, [sp, #4]
 800b63c:	4682      	mov	sl, r0
 800b63e:	468b      	mov	fp, r1
 800b640:	4649      	mov	r1, r9
 800b642:	4640      	mov	r0, r8
 800b644:	f7f5 fa88 	bl	8000b58 <__aeabi_d2iz>
 800b648:	4606      	mov	r6, r0
 800b64a:	f7f4 ff6b 	bl	8000524 <__aeabi_i2d>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	4640      	mov	r0, r8
 800b654:	4649      	mov	r1, r9
 800b656:	f7f4 fe17 	bl	8000288 <__aeabi_dsub>
 800b65a:	3630      	adds	r6, #48	; 0x30
 800b65c:	f805 6b01 	strb.w	r6, [r5], #1
 800b660:	4652      	mov	r2, sl
 800b662:	465b      	mov	r3, fp
 800b664:	4680      	mov	r8, r0
 800b666:	4689      	mov	r9, r1
 800b668:	f7f5 fa38 	bl	8000adc <__aeabi_dcmplt>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d163      	bne.n	800b738 <_dtoa_r+0x608>
 800b670:	4642      	mov	r2, r8
 800b672:	464b      	mov	r3, r9
 800b674:	4936      	ldr	r1, [pc, #216]	; (800b750 <_dtoa_r+0x620>)
 800b676:	2000      	movs	r0, #0
 800b678:	f7f4 fe06 	bl	8000288 <__aeabi_dsub>
 800b67c:	4652      	mov	r2, sl
 800b67e:	465b      	mov	r3, fp
 800b680:	f7f5 fa2c 	bl	8000adc <__aeabi_dcmplt>
 800b684:	2800      	cmp	r0, #0
 800b686:	f040 80b5 	bne.w	800b7f4 <_dtoa_r+0x6c4>
 800b68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b68c:	429d      	cmp	r5, r3
 800b68e:	d081      	beq.n	800b594 <_dtoa_r+0x464>
 800b690:	4b30      	ldr	r3, [pc, #192]	; (800b754 <_dtoa_r+0x624>)
 800b692:	2200      	movs	r2, #0
 800b694:	4650      	mov	r0, sl
 800b696:	4659      	mov	r1, fp
 800b698:	f7f4 ffae 	bl	80005f8 <__aeabi_dmul>
 800b69c:	4b2d      	ldr	r3, [pc, #180]	; (800b754 <_dtoa_r+0x624>)
 800b69e:	4682      	mov	sl, r0
 800b6a0:	468b      	mov	fp, r1
 800b6a2:	4640      	mov	r0, r8
 800b6a4:	4649      	mov	r1, r9
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f7f4 ffa6 	bl	80005f8 <__aeabi_dmul>
 800b6ac:	4680      	mov	r8, r0
 800b6ae:	4689      	mov	r9, r1
 800b6b0:	e7c6      	b.n	800b640 <_dtoa_r+0x510>
 800b6b2:	4650      	mov	r0, sl
 800b6b4:	4659      	mov	r1, fp
 800b6b6:	f7f4 ff9f 	bl	80005f8 <__aeabi_dmul>
 800b6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6bc:	9d01      	ldr	r5, [sp, #4]
 800b6be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6c0:	4682      	mov	sl, r0
 800b6c2:	468b      	mov	fp, r1
 800b6c4:	4649      	mov	r1, r9
 800b6c6:	4640      	mov	r0, r8
 800b6c8:	f7f5 fa46 	bl	8000b58 <__aeabi_d2iz>
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	f7f4 ff29 	bl	8000524 <__aeabi_i2d>
 800b6d2:	3630      	adds	r6, #48	; 0x30
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	4640      	mov	r0, r8
 800b6da:	4649      	mov	r1, r9
 800b6dc:	f7f4 fdd4 	bl	8000288 <__aeabi_dsub>
 800b6e0:	f805 6b01 	strb.w	r6, [r5], #1
 800b6e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6e6:	429d      	cmp	r5, r3
 800b6e8:	4680      	mov	r8, r0
 800b6ea:	4689      	mov	r9, r1
 800b6ec:	f04f 0200 	mov.w	r2, #0
 800b6f0:	d124      	bne.n	800b73c <_dtoa_r+0x60c>
 800b6f2:	4b1b      	ldr	r3, [pc, #108]	; (800b760 <_dtoa_r+0x630>)
 800b6f4:	4650      	mov	r0, sl
 800b6f6:	4659      	mov	r1, fp
 800b6f8:	f7f4 fdc8 	bl	800028c <__adddf3>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	4640      	mov	r0, r8
 800b702:	4649      	mov	r1, r9
 800b704:	f7f5 fa08 	bl	8000b18 <__aeabi_dcmpgt>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d173      	bne.n	800b7f4 <_dtoa_r+0x6c4>
 800b70c:	4652      	mov	r2, sl
 800b70e:	465b      	mov	r3, fp
 800b710:	4913      	ldr	r1, [pc, #76]	; (800b760 <_dtoa_r+0x630>)
 800b712:	2000      	movs	r0, #0
 800b714:	f7f4 fdb8 	bl	8000288 <__aeabi_dsub>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	4640      	mov	r0, r8
 800b71e:	4649      	mov	r1, r9
 800b720:	f7f5 f9dc 	bl	8000adc <__aeabi_dcmplt>
 800b724:	2800      	cmp	r0, #0
 800b726:	f43f af35 	beq.w	800b594 <_dtoa_r+0x464>
 800b72a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b72c:	1e6b      	subs	r3, r5, #1
 800b72e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b730:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b734:	2b30      	cmp	r3, #48	; 0x30
 800b736:	d0f8      	beq.n	800b72a <_dtoa_r+0x5fa>
 800b738:	9700      	str	r7, [sp, #0]
 800b73a:	e049      	b.n	800b7d0 <_dtoa_r+0x6a0>
 800b73c:	4b05      	ldr	r3, [pc, #20]	; (800b754 <_dtoa_r+0x624>)
 800b73e:	f7f4 ff5b 	bl	80005f8 <__aeabi_dmul>
 800b742:	4680      	mov	r8, r0
 800b744:	4689      	mov	r9, r1
 800b746:	e7bd      	b.n	800b6c4 <_dtoa_r+0x594>
 800b748:	08010870 	.word	0x08010870
 800b74c:	08010848 	.word	0x08010848
 800b750:	3ff00000 	.word	0x3ff00000
 800b754:	40240000 	.word	0x40240000
 800b758:	401c0000 	.word	0x401c0000
 800b75c:	40140000 	.word	0x40140000
 800b760:	3fe00000 	.word	0x3fe00000
 800b764:	9d01      	ldr	r5, [sp, #4]
 800b766:	4656      	mov	r6, sl
 800b768:	465f      	mov	r7, fp
 800b76a:	4642      	mov	r2, r8
 800b76c:	464b      	mov	r3, r9
 800b76e:	4630      	mov	r0, r6
 800b770:	4639      	mov	r1, r7
 800b772:	f7f5 f86b 	bl	800084c <__aeabi_ddiv>
 800b776:	f7f5 f9ef 	bl	8000b58 <__aeabi_d2iz>
 800b77a:	4682      	mov	sl, r0
 800b77c:	f7f4 fed2 	bl	8000524 <__aeabi_i2d>
 800b780:	4642      	mov	r2, r8
 800b782:	464b      	mov	r3, r9
 800b784:	f7f4 ff38 	bl	80005f8 <__aeabi_dmul>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	4630      	mov	r0, r6
 800b78e:	4639      	mov	r1, r7
 800b790:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b794:	f7f4 fd78 	bl	8000288 <__aeabi_dsub>
 800b798:	f805 6b01 	strb.w	r6, [r5], #1
 800b79c:	9e01      	ldr	r6, [sp, #4]
 800b79e:	9f03      	ldr	r7, [sp, #12]
 800b7a0:	1bae      	subs	r6, r5, r6
 800b7a2:	42b7      	cmp	r7, r6
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	d135      	bne.n	800b816 <_dtoa_r+0x6e6>
 800b7aa:	f7f4 fd6f 	bl	800028c <__adddf3>
 800b7ae:	4642      	mov	r2, r8
 800b7b0:	464b      	mov	r3, r9
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	460f      	mov	r7, r1
 800b7b6:	f7f5 f9af 	bl	8000b18 <__aeabi_dcmpgt>
 800b7ba:	b9d0      	cbnz	r0, 800b7f2 <_dtoa_r+0x6c2>
 800b7bc:	4642      	mov	r2, r8
 800b7be:	464b      	mov	r3, r9
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	f7f5 f980 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7c8:	b110      	cbz	r0, 800b7d0 <_dtoa_r+0x6a0>
 800b7ca:	f01a 0f01 	tst.w	sl, #1
 800b7ce:	d110      	bne.n	800b7f2 <_dtoa_r+0x6c2>
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	ee18 1a10 	vmov	r1, s16
 800b7d6:	f000 fe87 	bl	800c4e8 <_Bfree>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	9800      	ldr	r0, [sp, #0]
 800b7de:	702b      	strb	r3, [r5, #0]
 800b7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	6018      	str	r0, [r3, #0]
 800b7e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f43f acf1 	beq.w	800b1d0 <_dtoa_r+0xa0>
 800b7ee:	601d      	str	r5, [r3, #0]
 800b7f0:	e4ee      	b.n	800b1d0 <_dtoa_r+0xa0>
 800b7f2:	9f00      	ldr	r7, [sp, #0]
 800b7f4:	462b      	mov	r3, r5
 800b7f6:	461d      	mov	r5, r3
 800b7f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7fc:	2a39      	cmp	r2, #57	; 0x39
 800b7fe:	d106      	bne.n	800b80e <_dtoa_r+0x6de>
 800b800:	9a01      	ldr	r2, [sp, #4]
 800b802:	429a      	cmp	r2, r3
 800b804:	d1f7      	bne.n	800b7f6 <_dtoa_r+0x6c6>
 800b806:	9901      	ldr	r1, [sp, #4]
 800b808:	2230      	movs	r2, #48	; 0x30
 800b80a:	3701      	adds	r7, #1
 800b80c:	700a      	strb	r2, [r1, #0]
 800b80e:	781a      	ldrb	r2, [r3, #0]
 800b810:	3201      	adds	r2, #1
 800b812:	701a      	strb	r2, [r3, #0]
 800b814:	e790      	b.n	800b738 <_dtoa_r+0x608>
 800b816:	4ba6      	ldr	r3, [pc, #664]	; (800bab0 <_dtoa_r+0x980>)
 800b818:	2200      	movs	r2, #0
 800b81a:	f7f4 feed 	bl	80005f8 <__aeabi_dmul>
 800b81e:	2200      	movs	r2, #0
 800b820:	2300      	movs	r3, #0
 800b822:	4606      	mov	r6, r0
 800b824:	460f      	mov	r7, r1
 800b826:	f7f5 f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d09d      	beq.n	800b76a <_dtoa_r+0x63a>
 800b82e:	e7cf      	b.n	800b7d0 <_dtoa_r+0x6a0>
 800b830:	9a08      	ldr	r2, [sp, #32]
 800b832:	2a00      	cmp	r2, #0
 800b834:	f000 80d7 	beq.w	800b9e6 <_dtoa_r+0x8b6>
 800b838:	9a06      	ldr	r2, [sp, #24]
 800b83a:	2a01      	cmp	r2, #1
 800b83c:	f300 80ba 	bgt.w	800b9b4 <_dtoa_r+0x884>
 800b840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b842:	2a00      	cmp	r2, #0
 800b844:	f000 80b2 	beq.w	800b9ac <_dtoa_r+0x87c>
 800b848:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b84c:	9e07      	ldr	r6, [sp, #28]
 800b84e:	9d04      	ldr	r5, [sp, #16]
 800b850:	9a04      	ldr	r2, [sp, #16]
 800b852:	441a      	add	r2, r3
 800b854:	9204      	str	r2, [sp, #16]
 800b856:	9a05      	ldr	r2, [sp, #20]
 800b858:	2101      	movs	r1, #1
 800b85a:	441a      	add	r2, r3
 800b85c:	4620      	mov	r0, r4
 800b85e:	9205      	str	r2, [sp, #20]
 800b860:	f000 ff44 	bl	800c6ec <__i2b>
 800b864:	4607      	mov	r7, r0
 800b866:	2d00      	cmp	r5, #0
 800b868:	dd0c      	ble.n	800b884 <_dtoa_r+0x754>
 800b86a:	9b05      	ldr	r3, [sp, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	dd09      	ble.n	800b884 <_dtoa_r+0x754>
 800b870:	42ab      	cmp	r3, r5
 800b872:	9a04      	ldr	r2, [sp, #16]
 800b874:	bfa8      	it	ge
 800b876:	462b      	movge	r3, r5
 800b878:	1ad2      	subs	r2, r2, r3
 800b87a:	9204      	str	r2, [sp, #16]
 800b87c:	9a05      	ldr	r2, [sp, #20]
 800b87e:	1aed      	subs	r5, r5, r3
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	9305      	str	r3, [sp, #20]
 800b884:	9b07      	ldr	r3, [sp, #28]
 800b886:	b31b      	cbz	r3, 800b8d0 <_dtoa_r+0x7a0>
 800b888:	9b08      	ldr	r3, [sp, #32]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 80af 	beq.w	800b9ee <_dtoa_r+0x8be>
 800b890:	2e00      	cmp	r6, #0
 800b892:	dd13      	ble.n	800b8bc <_dtoa_r+0x78c>
 800b894:	4639      	mov	r1, r7
 800b896:	4632      	mov	r2, r6
 800b898:	4620      	mov	r0, r4
 800b89a:	f000 ffe7 	bl	800c86c <__pow5mult>
 800b89e:	ee18 2a10 	vmov	r2, s16
 800b8a2:	4601      	mov	r1, r0
 800b8a4:	4607      	mov	r7, r0
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 ff36 	bl	800c718 <__multiply>
 800b8ac:	ee18 1a10 	vmov	r1, s16
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 fe18 	bl	800c4e8 <_Bfree>
 800b8b8:	ee08 8a10 	vmov	s16, r8
 800b8bc:	9b07      	ldr	r3, [sp, #28]
 800b8be:	1b9a      	subs	r2, r3, r6
 800b8c0:	d006      	beq.n	800b8d0 <_dtoa_r+0x7a0>
 800b8c2:	ee18 1a10 	vmov	r1, s16
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 ffd0 	bl	800c86c <__pow5mult>
 800b8cc:	ee08 0a10 	vmov	s16, r0
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 ff0a 	bl	800c6ec <__i2b>
 800b8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	4606      	mov	r6, r0
 800b8de:	f340 8088 	ble.w	800b9f2 <_dtoa_r+0x8c2>
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	4601      	mov	r1, r0
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 ffc0 	bl	800c86c <__pow5mult>
 800b8ec:	9b06      	ldr	r3, [sp, #24]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	4606      	mov	r6, r0
 800b8f2:	f340 8081 	ble.w	800b9f8 <_dtoa_r+0x8c8>
 800b8f6:	f04f 0800 	mov.w	r8, #0
 800b8fa:	6933      	ldr	r3, [r6, #16]
 800b8fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b900:	6918      	ldr	r0, [r3, #16]
 800b902:	f000 fea3 	bl	800c64c <__hi0bits>
 800b906:	f1c0 0020 	rsb	r0, r0, #32
 800b90a:	9b05      	ldr	r3, [sp, #20]
 800b90c:	4418      	add	r0, r3
 800b90e:	f010 001f 	ands.w	r0, r0, #31
 800b912:	f000 8092 	beq.w	800ba3a <_dtoa_r+0x90a>
 800b916:	f1c0 0320 	rsb	r3, r0, #32
 800b91a:	2b04      	cmp	r3, #4
 800b91c:	f340 808a 	ble.w	800ba34 <_dtoa_r+0x904>
 800b920:	f1c0 001c 	rsb	r0, r0, #28
 800b924:	9b04      	ldr	r3, [sp, #16]
 800b926:	4403      	add	r3, r0
 800b928:	9304      	str	r3, [sp, #16]
 800b92a:	9b05      	ldr	r3, [sp, #20]
 800b92c:	4403      	add	r3, r0
 800b92e:	4405      	add	r5, r0
 800b930:	9305      	str	r3, [sp, #20]
 800b932:	9b04      	ldr	r3, [sp, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	dd07      	ble.n	800b948 <_dtoa_r+0x818>
 800b938:	ee18 1a10 	vmov	r1, s16
 800b93c:	461a      	mov	r2, r3
 800b93e:	4620      	mov	r0, r4
 800b940:	f000 ffee 	bl	800c920 <__lshift>
 800b944:	ee08 0a10 	vmov	s16, r0
 800b948:	9b05      	ldr	r3, [sp, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	dd05      	ble.n	800b95a <_dtoa_r+0x82a>
 800b94e:	4631      	mov	r1, r6
 800b950:	461a      	mov	r2, r3
 800b952:	4620      	mov	r0, r4
 800b954:	f000 ffe4 	bl	800c920 <__lshift>
 800b958:	4606      	mov	r6, r0
 800b95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d06e      	beq.n	800ba3e <_dtoa_r+0x90e>
 800b960:	ee18 0a10 	vmov	r0, s16
 800b964:	4631      	mov	r1, r6
 800b966:	f001 f84b 	bl	800ca00 <__mcmp>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	da67      	bge.n	800ba3e <_dtoa_r+0x90e>
 800b96e:	9b00      	ldr	r3, [sp, #0]
 800b970:	3b01      	subs	r3, #1
 800b972:	ee18 1a10 	vmov	r1, s16
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	220a      	movs	r2, #10
 800b97a:	2300      	movs	r3, #0
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fdd5 	bl	800c52c <__multadd>
 800b982:	9b08      	ldr	r3, [sp, #32]
 800b984:	ee08 0a10 	vmov	s16, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 81b1 	beq.w	800bcf0 <_dtoa_r+0xbc0>
 800b98e:	2300      	movs	r3, #0
 800b990:	4639      	mov	r1, r7
 800b992:	220a      	movs	r2, #10
 800b994:	4620      	mov	r0, r4
 800b996:	f000 fdc9 	bl	800c52c <__multadd>
 800b99a:	9b02      	ldr	r3, [sp, #8]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	4607      	mov	r7, r0
 800b9a0:	f300 808e 	bgt.w	800bac0 <_dtoa_r+0x990>
 800b9a4:	9b06      	ldr	r3, [sp, #24]
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	dc51      	bgt.n	800ba4e <_dtoa_r+0x91e>
 800b9aa:	e089      	b.n	800bac0 <_dtoa_r+0x990>
 800b9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9b2:	e74b      	b.n	800b84c <_dtoa_r+0x71c>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	1e5e      	subs	r6, r3, #1
 800b9b8:	9b07      	ldr	r3, [sp, #28]
 800b9ba:	42b3      	cmp	r3, r6
 800b9bc:	bfbf      	itttt	lt
 800b9be:	9b07      	ldrlt	r3, [sp, #28]
 800b9c0:	9607      	strlt	r6, [sp, #28]
 800b9c2:	1af2      	sublt	r2, r6, r3
 800b9c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b9c6:	bfb6      	itet	lt
 800b9c8:	189b      	addlt	r3, r3, r2
 800b9ca:	1b9e      	subge	r6, r3, r6
 800b9cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b9ce:	9b03      	ldr	r3, [sp, #12]
 800b9d0:	bfb8      	it	lt
 800b9d2:	2600      	movlt	r6, #0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	bfb7      	itett	lt
 800b9d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b9dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b9e0:	1a9d      	sublt	r5, r3, r2
 800b9e2:	2300      	movlt	r3, #0
 800b9e4:	e734      	b.n	800b850 <_dtoa_r+0x720>
 800b9e6:	9e07      	ldr	r6, [sp, #28]
 800b9e8:	9d04      	ldr	r5, [sp, #16]
 800b9ea:	9f08      	ldr	r7, [sp, #32]
 800b9ec:	e73b      	b.n	800b866 <_dtoa_r+0x736>
 800b9ee:	9a07      	ldr	r2, [sp, #28]
 800b9f0:	e767      	b.n	800b8c2 <_dtoa_r+0x792>
 800b9f2:	9b06      	ldr	r3, [sp, #24]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	dc18      	bgt.n	800ba2a <_dtoa_r+0x8fa>
 800b9f8:	f1ba 0f00 	cmp.w	sl, #0
 800b9fc:	d115      	bne.n	800ba2a <_dtoa_r+0x8fa>
 800b9fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba02:	b993      	cbnz	r3, 800ba2a <_dtoa_r+0x8fa>
 800ba04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba08:	0d1b      	lsrs	r3, r3, #20
 800ba0a:	051b      	lsls	r3, r3, #20
 800ba0c:	b183      	cbz	r3, 800ba30 <_dtoa_r+0x900>
 800ba0e:	9b04      	ldr	r3, [sp, #16]
 800ba10:	3301      	adds	r3, #1
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	9b05      	ldr	r3, [sp, #20]
 800ba16:	3301      	adds	r3, #1
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	f04f 0801 	mov.w	r8, #1
 800ba1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f47f af6a 	bne.w	800b8fa <_dtoa_r+0x7ca>
 800ba26:	2001      	movs	r0, #1
 800ba28:	e76f      	b.n	800b90a <_dtoa_r+0x7da>
 800ba2a:	f04f 0800 	mov.w	r8, #0
 800ba2e:	e7f6      	b.n	800ba1e <_dtoa_r+0x8ee>
 800ba30:	4698      	mov	r8, r3
 800ba32:	e7f4      	b.n	800ba1e <_dtoa_r+0x8ee>
 800ba34:	f43f af7d 	beq.w	800b932 <_dtoa_r+0x802>
 800ba38:	4618      	mov	r0, r3
 800ba3a:	301c      	adds	r0, #28
 800ba3c:	e772      	b.n	800b924 <_dtoa_r+0x7f4>
 800ba3e:	9b03      	ldr	r3, [sp, #12]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	dc37      	bgt.n	800bab4 <_dtoa_r+0x984>
 800ba44:	9b06      	ldr	r3, [sp, #24]
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	dd34      	ble.n	800bab4 <_dtoa_r+0x984>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	9302      	str	r3, [sp, #8]
 800ba4e:	9b02      	ldr	r3, [sp, #8]
 800ba50:	b96b      	cbnz	r3, 800ba6e <_dtoa_r+0x93e>
 800ba52:	4631      	mov	r1, r6
 800ba54:	2205      	movs	r2, #5
 800ba56:	4620      	mov	r0, r4
 800ba58:	f000 fd68 	bl	800c52c <__multadd>
 800ba5c:	4601      	mov	r1, r0
 800ba5e:	4606      	mov	r6, r0
 800ba60:	ee18 0a10 	vmov	r0, s16
 800ba64:	f000 ffcc 	bl	800ca00 <__mcmp>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	f73f adbb 	bgt.w	800b5e4 <_dtoa_r+0x4b4>
 800ba6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba70:	9d01      	ldr	r5, [sp, #4]
 800ba72:	43db      	mvns	r3, r3
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	f04f 0800 	mov.w	r8, #0
 800ba7a:	4631      	mov	r1, r6
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 fd33 	bl	800c4e8 <_Bfree>
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	f43f aea4 	beq.w	800b7d0 <_dtoa_r+0x6a0>
 800ba88:	f1b8 0f00 	cmp.w	r8, #0
 800ba8c:	d005      	beq.n	800ba9a <_dtoa_r+0x96a>
 800ba8e:	45b8      	cmp	r8, r7
 800ba90:	d003      	beq.n	800ba9a <_dtoa_r+0x96a>
 800ba92:	4641      	mov	r1, r8
 800ba94:	4620      	mov	r0, r4
 800ba96:	f000 fd27 	bl	800c4e8 <_Bfree>
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f000 fd23 	bl	800c4e8 <_Bfree>
 800baa2:	e695      	b.n	800b7d0 <_dtoa_r+0x6a0>
 800baa4:	2600      	movs	r6, #0
 800baa6:	4637      	mov	r7, r6
 800baa8:	e7e1      	b.n	800ba6e <_dtoa_r+0x93e>
 800baaa:	9700      	str	r7, [sp, #0]
 800baac:	4637      	mov	r7, r6
 800baae:	e599      	b.n	800b5e4 <_dtoa_r+0x4b4>
 800bab0:	40240000 	.word	0x40240000
 800bab4:	9b08      	ldr	r3, [sp, #32]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f000 80ca 	beq.w	800bc50 <_dtoa_r+0xb20>
 800babc:	9b03      	ldr	r3, [sp, #12]
 800babe:	9302      	str	r3, [sp, #8]
 800bac0:	2d00      	cmp	r5, #0
 800bac2:	dd05      	ble.n	800bad0 <_dtoa_r+0x9a0>
 800bac4:	4639      	mov	r1, r7
 800bac6:	462a      	mov	r2, r5
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 ff29 	bl	800c920 <__lshift>
 800bace:	4607      	mov	r7, r0
 800bad0:	f1b8 0f00 	cmp.w	r8, #0
 800bad4:	d05b      	beq.n	800bb8e <_dtoa_r+0xa5e>
 800bad6:	6879      	ldr	r1, [r7, #4]
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 fcc5 	bl	800c468 <_Balloc>
 800bade:	4605      	mov	r5, r0
 800bae0:	b928      	cbnz	r0, 800baee <_dtoa_r+0x9be>
 800bae2:	4b87      	ldr	r3, [pc, #540]	; (800bd00 <_dtoa_r+0xbd0>)
 800bae4:	4602      	mov	r2, r0
 800bae6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800baea:	f7ff bb3b 	b.w	800b164 <_dtoa_r+0x34>
 800baee:	693a      	ldr	r2, [r7, #16]
 800baf0:	3202      	adds	r2, #2
 800baf2:	0092      	lsls	r2, r2, #2
 800baf4:	f107 010c 	add.w	r1, r7, #12
 800baf8:	300c      	adds	r0, #12
 800bafa:	f000 fca7 	bl	800c44c <memcpy>
 800bafe:	2201      	movs	r2, #1
 800bb00:	4629      	mov	r1, r5
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 ff0c 	bl	800c920 <__lshift>
 800bb08:	9b01      	ldr	r3, [sp, #4]
 800bb0a:	f103 0901 	add.w	r9, r3, #1
 800bb0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bb12:	4413      	add	r3, r2
 800bb14:	9305      	str	r3, [sp, #20]
 800bb16:	f00a 0301 	and.w	r3, sl, #1
 800bb1a:	46b8      	mov	r8, r7
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	4607      	mov	r7, r0
 800bb20:	4631      	mov	r1, r6
 800bb22:	ee18 0a10 	vmov	r0, s16
 800bb26:	f7ff fa75 	bl	800b014 <quorem>
 800bb2a:	4641      	mov	r1, r8
 800bb2c:	9002      	str	r0, [sp, #8]
 800bb2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb32:	ee18 0a10 	vmov	r0, s16
 800bb36:	f000 ff63 	bl	800ca00 <__mcmp>
 800bb3a:	463a      	mov	r2, r7
 800bb3c:	9003      	str	r0, [sp, #12]
 800bb3e:	4631      	mov	r1, r6
 800bb40:	4620      	mov	r0, r4
 800bb42:	f000 ff79 	bl	800ca38 <__mdiff>
 800bb46:	68c2      	ldr	r2, [r0, #12]
 800bb48:	f109 3bff 	add.w	fp, r9, #4294967295
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	bb02      	cbnz	r2, 800bb92 <_dtoa_r+0xa62>
 800bb50:	4601      	mov	r1, r0
 800bb52:	ee18 0a10 	vmov	r0, s16
 800bb56:	f000 ff53 	bl	800ca00 <__mcmp>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	4620      	mov	r0, r4
 800bb60:	9207      	str	r2, [sp, #28]
 800bb62:	f000 fcc1 	bl	800c4e8 <_Bfree>
 800bb66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bb6a:	ea43 0102 	orr.w	r1, r3, r2
 800bb6e:	9b04      	ldr	r3, [sp, #16]
 800bb70:	430b      	orrs	r3, r1
 800bb72:	464d      	mov	r5, r9
 800bb74:	d10f      	bne.n	800bb96 <_dtoa_r+0xa66>
 800bb76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb7a:	d02a      	beq.n	800bbd2 <_dtoa_r+0xaa2>
 800bb7c:	9b03      	ldr	r3, [sp, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	dd02      	ble.n	800bb88 <_dtoa_r+0xa58>
 800bb82:	9b02      	ldr	r3, [sp, #8]
 800bb84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb88:	f88b a000 	strb.w	sl, [fp]
 800bb8c:	e775      	b.n	800ba7a <_dtoa_r+0x94a>
 800bb8e:	4638      	mov	r0, r7
 800bb90:	e7ba      	b.n	800bb08 <_dtoa_r+0x9d8>
 800bb92:	2201      	movs	r2, #1
 800bb94:	e7e2      	b.n	800bb5c <_dtoa_r+0xa2c>
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	db04      	blt.n	800bba6 <_dtoa_r+0xa76>
 800bb9c:	9906      	ldr	r1, [sp, #24]
 800bb9e:	430b      	orrs	r3, r1
 800bba0:	9904      	ldr	r1, [sp, #16]
 800bba2:	430b      	orrs	r3, r1
 800bba4:	d122      	bne.n	800bbec <_dtoa_r+0xabc>
 800bba6:	2a00      	cmp	r2, #0
 800bba8:	ddee      	ble.n	800bb88 <_dtoa_r+0xa58>
 800bbaa:	ee18 1a10 	vmov	r1, s16
 800bbae:	2201      	movs	r2, #1
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 feb5 	bl	800c920 <__lshift>
 800bbb6:	4631      	mov	r1, r6
 800bbb8:	ee08 0a10 	vmov	s16, r0
 800bbbc:	f000 ff20 	bl	800ca00 <__mcmp>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	dc03      	bgt.n	800bbcc <_dtoa_r+0xa9c>
 800bbc4:	d1e0      	bne.n	800bb88 <_dtoa_r+0xa58>
 800bbc6:	f01a 0f01 	tst.w	sl, #1
 800bbca:	d0dd      	beq.n	800bb88 <_dtoa_r+0xa58>
 800bbcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbd0:	d1d7      	bne.n	800bb82 <_dtoa_r+0xa52>
 800bbd2:	2339      	movs	r3, #57	; 0x39
 800bbd4:	f88b 3000 	strb.w	r3, [fp]
 800bbd8:	462b      	mov	r3, r5
 800bbda:	461d      	mov	r5, r3
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbe2:	2a39      	cmp	r2, #57	; 0x39
 800bbe4:	d071      	beq.n	800bcca <_dtoa_r+0xb9a>
 800bbe6:	3201      	adds	r2, #1
 800bbe8:	701a      	strb	r2, [r3, #0]
 800bbea:	e746      	b.n	800ba7a <_dtoa_r+0x94a>
 800bbec:	2a00      	cmp	r2, #0
 800bbee:	dd07      	ble.n	800bc00 <_dtoa_r+0xad0>
 800bbf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbf4:	d0ed      	beq.n	800bbd2 <_dtoa_r+0xaa2>
 800bbf6:	f10a 0301 	add.w	r3, sl, #1
 800bbfa:	f88b 3000 	strb.w	r3, [fp]
 800bbfe:	e73c      	b.n	800ba7a <_dtoa_r+0x94a>
 800bc00:	9b05      	ldr	r3, [sp, #20]
 800bc02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bc06:	4599      	cmp	r9, r3
 800bc08:	d047      	beq.n	800bc9a <_dtoa_r+0xb6a>
 800bc0a:	ee18 1a10 	vmov	r1, s16
 800bc0e:	2300      	movs	r3, #0
 800bc10:	220a      	movs	r2, #10
 800bc12:	4620      	mov	r0, r4
 800bc14:	f000 fc8a 	bl	800c52c <__multadd>
 800bc18:	45b8      	cmp	r8, r7
 800bc1a:	ee08 0a10 	vmov	s16, r0
 800bc1e:	f04f 0300 	mov.w	r3, #0
 800bc22:	f04f 020a 	mov.w	r2, #10
 800bc26:	4641      	mov	r1, r8
 800bc28:	4620      	mov	r0, r4
 800bc2a:	d106      	bne.n	800bc3a <_dtoa_r+0xb0a>
 800bc2c:	f000 fc7e 	bl	800c52c <__multadd>
 800bc30:	4680      	mov	r8, r0
 800bc32:	4607      	mov	r7, r0
 800bc34:	f109 0901 	add.w	r9, r9, #1
 800bc38:	e772      	b.n	800bb20 <_dtoa_r+0x9f0>
 800bc3a:	f000 fc77 	bl	800c52c <__multadd>
 800bc3e:	4639      	mov	r1, r7
 800bc40:	4680      	mov	r8, r0
 800bc42:	2300      	movs	r3, #0
 800bc44:	220a      	movs	r2, #10
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 fc70 	bl	800c52c <__multadd>
 800bc4c:	4607      	mov	r7, r0
 800bc4e:	e7f1      	b.n	800bc34 <_dtoa_r+0xb04>
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	9302      	str	r3, [sp, #8]
 800bc54:	9d01      	ldr	r5, [sp, #4]
 800bc56:	ee18 0a10 	vmov	r0, s16
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	f7ff f9da 	bl	800b014 <quorem>
 800bc60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc64:	9b01      	ldr	r3, [sp, #4]
 800bc66:	f805 ab01 	strb.w	sl, [r5], #1
 800bc6a:	1aea      	subs	r2, r5, r3
 800bc6c:	9b02      	ldr	r3, [sp, #8]
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	dd09      	ble.n	800bc86 <_dtoa_r+0xb56>
 800bc72:	ee18 1a10 	vmov	r1, s16
 800bc76:	2300      	movs	r3, #0
 800bc78:	220a      	movs	r2, #10
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f000 fc56 	bl	800c52c <__multadd>
 800bc80:	ee08 0a10 	vmov	s16, r0
 800bc84:	e7e7      	b.n	800bc56 <_dtoa_r+0xb26>
 800bc86:	9b02      	ldr	r3, [sp, #8]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	bfc8      	it	gt
 800bc8c:	461d      	movgt	r5, r3
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	bfd8      	it	le
 800bc92:	2501      	movle	r5, #1
 800bc94:	441d      	add	r5, r3
 800bc96:	f04f 0800 	mov.w	r8, #0
 800bc9a:	ee18 1a10 	vmov	r1, s16
 800bc9e:	2201      	movs	r2, #1
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 fe3d 	bl	800c920 <__lshift>
 800bca6:	4631      	mov	r1, r6
 800bca8:	ee08 0a10 	vmov	s16, r0
 800bcac:	f000 fea8 	bl	800ca00 <__mcmp>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	dc91      	bgt.n	800bbd8 <_dtoa_r+0xaa8>
 800bcb4:	d102      	bne.n	800bcbc <_dtoa_r+0xb8c>
 800bcb6:	f01a 0f01 	tst.w	sl, #1
 800bcba:	d18d      	bne.n	800bbd8 <_dtoa_r+0xaa8>
 800bcbc:	462b      	mov	r3, r5
 800bcbe:	461d      	mov	r5, r3
 800bcc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcc4:	2a30      	cmp	r2, #48	; 0x30
 800bcc6:	d0fa      	beq.n	800bcbe <_dtoa_r+0xb8e>
 800bcc8:	e6d7      	b.n	800ba7a <_dtoa_r+0x94a>
 800bcca:	9a01      	ldr	r2, [sp, #4]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d184      	bne.n	800bbda <_dtoa_r+0xaaa>
 800bcd0:	9b00      	ldr	r3, [sp, #0]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	2331      	movs	r3, #49	; 0x31
 800bcd8:	7013      	strb	r3, [r2, #0]
 800bcda:	e6ce      	b.n	800ba7a <_dtoa_r+0x94a>
 800bcdc:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <_dtoa_r+0xbd4>)
 800bcde:	f7ff ba95 	b.w	800b20c <_dtoa_r+0xdc>
 800bce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f47f aa6e 	bne.w	800b1c6 <_dtoa_r+0x96>
 800bcea:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <_dtoa_r+0xbd8>)
 800bcec:	f7ff ba8e 	b.w	800b20c <_dtoa_r+0xdc>
 800bcf0:	9b02      	ldr	r3, [sp, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	dcae      	bgt.n	800bc54 <_dtoa_r+0xb24>
 800bcf6:	9b06      	ldr	r3, [sp, #24]
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	f73f aea8 	bgt.w	800ba4e <_dtoa_r+0x91e>
 800bcfe:	e7a9      	b.n	800bc54 <_dtoa_r+0xb24>
 800bd00:	08010761 	.word	0x08010761
 800bd04:	080104cc 	.word	0x080104cc
 800bd08:	080106f9 	.word	0x080106f9

0800bd0c <fiprintf>:
 800bd0c:	b40e      	push	{r1, r2, r3}
 800bd0e:	b503      	push	{r0, r1, lr}
 800bd10:	4601      	mov	r1, r0
 800bd12:	ab03      	add	r3, sp, #12
 800bd14:	4805      	ldr	r0, [pc, #20]	; (800bd2c <fiprintf+0x20>)
 800bd16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd1a:	6800      	ldr	r0, [r0, #0]
 800bd1c:	9301      	str	r3, [sp, #4]
 800bd1e:	f001 fae1 	bl	800d2e4 <_vfiprintf_r>
 800bd22:	b002      	add	sp, #8
 800bd24:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd28:	b003      	add	sp, #12
 800bd2a:	4770      	bx	lr
 800bd2c:	200000ec 	.word	0x200000ec

0800bd30 <rshift>:
 800bd30:	6903      	ldr	r3, [r0, #16]
 800bd32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bd36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd3e:	f100 0414 	add.w	r4, r0, #20
 800bd42:	dd45      	ble.n	800bdd0 <rshift+0xa0>
 800bd44:	f011 011f 	ands.w	r1, r1, #31
 800bd48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd50:	d10c      	bne.n	800bd6c <rshift+0x3c>
 800bd52:	f100 0710 	add.w	r7, r0, #16
 800bd56:	4629      	mov	r1, r5
 800bd58:	42b1      	cmp	r1, r6
 800bd5a:	d334      	bcc.n	800bdc6 <rshift+0x96>
 800bd5c:	1a9b      	subs	r3, r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	1eea      	subs	r2, r5, #3
 800bd62:	4296      	cmp	r6, r2
 800bd64:	bf38      	it	cc
 800bd66:	2300      	movcc	r3, #0
 800bd68:	4423      	add	r3, r4
 800bd6a:	e015      	b.n	800bd98 <rshift+0x68>
 800bd6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bd70:	f1c1 0820 	rsb	r8, r1, #32
 800bd74:	40cf      	lsrs	r7, r1
 800bd76:	f105 0e04 	add.w	lr, r5, #4
 800bd7a:	46a1      	mov	r9, r4
 800bd7c:	4576      	cmp	r6, lr
 800bd7e:	46f4      	mov	ip, lr
 800bd80:	d815      	bhi.n	800bdae <rshift+0x7e>
 800bd82:	1a9a      	subs	r2, r3, r2
 800bd84:	0092      	lsls	r2, r2, #2
 800bd86:	3a04      	subs	r2, #4
 800bd88:	3501      	adds	r5, #1
 800bd8a:	42ae      	cmp	r6, r5
 800bd8c:	bf38      	it	cc
 800bd8e:	2200      	movcc	r2, #0
 800bd90:	18a3      	adds	r3, r4, r2
 800bd92:	50a7      	str	r7, [r4, r2]
 800bd94:	b107      	cbz	r7, 800bd98 <rshift+0x68>
 800bd96:	3304      	adds	r3, #4
 800bd98:	1b1a      	subs	r2, r3, r4
 800bd9a:	42a3      	cmp	r3, r4
 800bd9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bda0:	bf08      	it	eq
 800bda2:	2300      	moveq	r3, #0
 800bda4:	6102      	str	r2, [r0, #16]
 800bda6:	bf08      	it	eq
 800bda8:	6143      	streq	r3, [r0, #20]
 800bdaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdae:	f8dc c000 	ldr.w	ip, [ip]
 800bdb2:	fa0c fc08 	lsl.w	ip, ip, r8
 800bdb6:	ea4c 0707 	orr.w	r7, ip, r7
 800bdba:	f849 7b04 	str.w	r7, [r9], #4
 800bdbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bdc2:	40cf      	lsrs	r7, r1
 800bdc4:	e7da      	b.n	800bd7c <rshift+0x4c>
 800bdc6:	f851 cb04 	ldr.w	ip, [r1], #4
 800bdca:	f847 cf04 	str.w	ip, [r7, #4]!
 800bdce:	e7c3      	b.n	800bd58 <rshift+0x28>
 800bdd0:	4623      	mov	r3, r4
 800bdd2:	e7e1      	b.n	800bd98 <rshift+0x68>

0800bdd4 <__hexdig_fun>:
 800bdd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bdd8:	2b09      	cmp	r3, #9
 800bdda:	d802      	bhi.n	800bde2 <__hexdig_fun+0xe>
 800bddc:	3820      	subs	r0, #32
 800bdde:	b2c0      	uxtb	r0, r0
 800bde0:	4770      	bx	lr
 800bde2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bde6:	2b05      	cmp	r3, #5
 800bde8:	d801      	bhi.n	800bdee <__hexdig_fun+0x1a>
 800bdea:	3847      	subs	r0, #71	; 0x47
 800bdec:	e7f7      	b.n	800bdde <__hexdig_fun+0xa>
 800bdee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bdf2:	2b05      	cmp	r3, #5
 800bdf4:	d801      	bhi.n	800bdfa <__hexdig_fun+0x26>
 800bdf6:	3827      	subs	r0, #39	; 0x27
 800bdf8:	e7f1      	b.n	800bdde <__hexdig_fun+0xa>
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	4770      	bx	lr
	...

0800be00 <__gethex>:
 800be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	ed2d 8b02 	vpush	{d8}
 800be08:	b089      	sub	sp, #36	; 0x24
 800be0a:	ee08 0a10 	vmov	s16, r0
 800be0e:	9304      	str	r3, [sp, #16]
 800be10:	4bb4      	ldr	r3, [pc, #720]	; (800c0e4 <__gethex+0x2e4>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	4618      	mov	r0, r3
 800be18:	468b      	mov	fp, r1
 800be1a:	4690      	mov	r8, r2
 800be1c:	f7f4 f9d8 	bl	80001d0 <strlen>
 800be20:	9b01      	ldr	r3, [sp, #4]
 800be22:	f8db 2000 	ldr.w	r2, [fp]
 800be26:	4403      	add	r3, r0
 800be28:	4682      	mov	sl, r0
 800be2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800be2e:	9305      	str	r3, [sp, #20]
 800be30:	1c93      	adds	r3, r2, #2
 800be32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800be36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800be3a:	32fe      	adds	r2, #254	; 0xfe
 800be3c:	18d1      	adds	r1, r2, r3
 800be3e:	461f      	mov	r7, r3
 800be40:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be44:	9100      	str	r1, [sp, #0]
 800be46:	2830      	cmp	r0, #48	; 0x30
 800be48:	d0f8      	beq.n	800be3c <__gethex+0x3c>
 800be4a:	f7ff ffc3 	bl	800bdd4 <__hexdig_fun>
 800be4e:	4604      	mov	r4, r0
 800be50:	2800      	cmp	r0, #0
 800be52:	d13a      	bne.n	800beca <__gethex+0xca>
 800be54:	9901      	ldr	r1, [sp, #4]
 800be56:	4652      	mov	r2, sl
 800be58:	4638      	mov	r0, r7
 800be5a:	f001 fb8d 	bl	800d578 <strncmp>
 800be5e:	4605      	mov	r5, r0
 800be60:	2800      	cmp	r0, #0
 800be62:	d168      	bne.n	800bf36 <__gethex+0x136>
 800be64:	f817 000a 	ldrb.w	r0, [r7, sl]
 800be68:	eb07 060a 	add.w	r6, r7, sl
 800be6c:	f7ff ffb2 	bl	800bdd4 <__hexdig_fun>
 800be70:	2800      	cmp	r0, #0
 800be72:	d062      	beq.n	800bf3a <__gethex+0x13a>
 800be74:	4633      	mov	r3, r6
 800be76:	7818      	ldrb	r0, [r3, #0]
 800be78:	2830      	cmp	r0, #48	; 0x30
 800be7a:	461f      	mov	r7, r3
 800be7c:	f103 0301 	add.w	r3, r3, #1
 800be80:	d0f9      	beq.n	800be76 <__gethex+0x76>
 800be82:	f7ff ffa7 	bl	800bdd4 <__hexdig_fun>
 800be86:	2301      	movs	r3, #1
 800be88:	fab0 f480 	clz	r4, r0
 800be8c:	0964      	lsrs	r4, r4, #5
 800be8e:	4635      	mov	r5, r6
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	463a      	mov	r2, r7
 800be94:	4616      	mov	r6, r2
 800be96:	3201      	adds	r2, #1
 800be98:	7830      	ldrb	r0, [r6, #0]
 800be9a:	f7ff ff9b 	bl	800bdd4 <__hexdig_fun>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d1f8      	bne.n	800be94 <__gethex+0x94>
 800bea2:	9901      	ldr	r1, [sp, #4]
 800bea4:	4652      	mov	r2, sl
 800bea6:	4630      	mov	r0, r6
 800bea8:	f001 fb66 	bl	800d578 <strncmp>
 800beac:	b980      	cbnz	r0, 800bed0 <__gethex+0xd0>
 800beae:	b94d      	cbnz	r5, 800bec4 <__gethex+0xc4>
 800beb0:	eb06 050a 	add.w	r5, r6, sl
 800beb4:	462a      	mov	r2, r5
 800beb6:	4616      	mov	r6, r2
 800beb8:	3201      	adds	r2, #1
 800beba:	7830      	ldrb	r0, [r6, #0]
 800bebc:	f7ff ff8a 	bl	800bdd4 <__hexdig_fun>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d1f8      	bne.n	800beb6 <__gethex+0xb6>
 800bec4:	1bad      	subs	r5, r5, r6
 800bec6:	00ad      	lsls	r5, r5, #2
 800bec8:	e004      	b.n	800bed4 <__gethex+0xd4>
 800beca:	2400      	movs	r4, #0
 800becc:	4625      	mov	r5, r4
 800bece:	e7e0      	b.n	800be92 <__gethex+0x92>
 800bed0:	2d00      	cmp	r5, #0
 800bed2:	d1f7      	bne.n	800bec4 <__gethex+0xc4>
 800bed4:	7833      	ldrb	r3, [r6, #0]
 800bed6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800beda:	2b50      	cmp	r3, #80	; 0x50
 800bedc:	d13b      	bne.n	800bf56 <__gethex+0x156>
 800bede:	7873      	ldrb	r3, [r6, #1]
 800bee0:	2b2b      	cmp	r3, #43	; 0x2b
 800bee2:	d02c      	beq.n	800bf3e <__gethex+0x13e>
 800bee4:	2b2d      	cmp	r3, #45	; 0x2d
 800bee6:	d02e      	beq.n	800bf46 <__gethex+0x146>
 800bee8:	1c71      	adds	r1, r6, #1
 800beea:	f04f 0900 	mov.w	r9, #0
 800beee:	7808      	ldrb	r0, [r1, #0]
 800bef0:	f7ff ff70 	bl	800bdd4 <__hexdig_fun>
 800bef4:	1e43      	subs	r3, r0, #1
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b18      	cmp	r3, #24
 800befa:	d82c      	bhi.n	800bf56 <__gethex+0x156>
 800befc:	f1a0 0210 	sub.w	r2, r0, #16
 800bf00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf04:	f7ff ff66 	bl	800bdd4 <__hexdig_fun>
 800bf08:	1e43      	subs	r3, r0, #1
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	2b18      	cmp	r3, #24
 800bf0e:	d91d      	bls.n	800bf4c <__gethex+0x14c>
 800bf10:	f1b9 0f00 	cmp.w	r9, #0
 800bf14:	d000      	beq.n	800bf18 <__gethex+0x118>
 800bf16:	4252      	negs	r2, r2
 800bf18:	4415      	add	r5, r2
 800bf1a:	f8cb 1000 	str.w	r1, [fp]
 800bf1e:	b1e4      	cbz	r4, 800bf5a <__gethex+0x15a>
 800bf20:	9b00      	ldr	r3, [sp, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	bf14      	ite	ne
 800bf26:	2700      	movne	r7, #0
 800bf28:	2706      	moveq	r7, #6
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	b009      	add	sp, #36	; 0x24
 800bf2e:	ecbd 8b02 	vpop	{d8}
 800bf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf36:	463e      	mov	r6, r7
 800bf38:	4625      	mov	r5, r4
 800bf3a:	2401      	movs	r4, #1
 800bf3c:	e7ca      	b.n	800bed4 <__gethex+0xd4>
 800bf3e:	f04f 0900 	mov.w	r9, #0
 800bf42:	1cb1      	adds	r1, r6, #2
 800bf44:	e7d3      	b.n	800beee <__gethex+0xee>
 800bf46:	f04f 0901 	mov.w	r9, #1
 800bf4a:	e7fa      	b.n	800bf42 <__gethex+0x142>
 800bf4c:	230a      	movs	r3, #10
 800bf4e:	fb03 0202 	mla	r2, r3, r2, r0
 800bf52:	3a10      	subs	r2, #16
 800bf54:	e7d4      	b.n	800bf00 <__gethex+0x100>
 800bf56:	4631      	mov	r1, r6
 800bf58:	e7df      	b.n	800bf1a <__gethex+0x11a>
 800bf5a:	1bf3      	subs	r3, r6, r7
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	4621      	mov	r1, r4
 800bf60:	2b07      	cmp	r3, #7
 800bf62:	dc0b      	bgt.n	800bf7c <__gethex+0x17c>
 800bf64:	ee18 0a10 	vmov	r0, s16
 800bf68:	f000 fa7e 	bl	800c468 <_Balloc>
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	b940      	cbnz	r0, 800bf82 <__gethex+0x182>
 800bf70:	4b5d      	ldr	r3, [pc, #372]	; (800c0e8 <__gethex+0x2e8>)
 800bf72:	4602      	mov	r2, r0
 800bf74:	21de      	movs	r1, #222	; 0xde
 800bf76:	485d      	ldr	r0, [pc, #372]	; (800c0ec <__gethex+0x2ec>)
 800bf78:	f7ff f82e 	bl	800afd8 <__assert_func>
 800bf7c:	3101      	adds	r1, #1
 800bf7e:	105b      	asrs	r3, r3, #1
 800bf80:	e7ee      	b.n	800bf60 <__gethex+0x160>
 800bf82:	f100 0914 	add.w	r9, r0, #20
 800bf86:	f04f 0b00 	mov.w	fp, #0
 800bf8a:	f1ca 0301 	rsb	r3, sl, #1
 800bf8e:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf92:	f8cd b000 	str.w	fp, [sp]
 800bf96:	9306      	str	r3, [sp, #24]
 800bf98:	42b7      	cmp	r7, r6
 800bf9a:	d340      	bcc.n	800c01e <__gethex+0x21e>
 800bf9c:	9802      	ldr	r0, [sp, #8]
 800bf9e:	9b00      	ldr	r3, [sp, #0]
 800bfa0:	f840 3b04 	str.w	r3, [r0], #4
 800bfa4:	eba0 0009 	sub.w	r0, r0, r9
 800bfa8:	1080      	asrs	r0, r0, #2
 800bfaa:	0146      	lsls	r6, r0, #5
 800bfac:	6120      	str	r0, [r4, #16]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 fb4c 	bl	800c64c <__hi0bits>
 800bfb4:	1a30      	subs	r0, r6, r0
 800bfb6:	f8d8 6000 	ldr.w	r6, [r8]
 800bfba:	42b0      	cmp	r0, r6
 800bfbc:	dd63      	ble.n	800c086 <__gethex+0x286>
 800bfbe:	1b87      	subs	r7, r0, r6
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f000 fef0 	bl	800cda8 <__any_on>
 800bfc8:	4682      	mov	sl, r0
 800bfca:	b1a8      	cbz	r0, 800bff8 <__gethex+0x1f8>
 800bfcc:	1e7b      	subs	r3, r7, #1
 800bfce:	1159      	asrs	r1, r3, #5
 800bfd0:	f003 021f 	and.w	r2, r3, #31
 800bfd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bfd8:	f04f 0a01 	mov.w	sl, #1
 800bfdc:	fa0a f202 	lsl.w	r2, sl, r2
 800bfe0:	420a      	tst	r2, r1
 800bfe2:	d009      	beq.n	800bff8 <__gethex+0x1f8>
 800bfe4:	4553      	cmp	r3, sl
 800bfe6:	dd05      	ble.n	800bff4 <__gethex+0x1f4>
 800bfe8:	1eb9      	subs	r1, r7, #2
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 fedc 	bl	800cda8 <__any_on>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d145      	bne.n	800c080 <__gethex+0x280>
 800bff4:	f04f 0a02 	mov.w	sl, #2
 800bff8:	4639      	mov	r1, r7
 800bffa:	4620      	mov	r0, r4
 800bffc:	f7ff fe98 	bl	800bd30 <rshift>
 800c000:	443d      	add	r5, r7
 800c002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c006:	42ab      	cmp	r3, r5
 800c008:	da4c      	bge.n	800c0a4 <__gethex+0x2a4>
 800c00a:	ee18 0a10 	vmov	r0, s16
 800c00e:	4621      	mov	r1, r4
 800c010:	f000 fa6a 	bl	800c4e8 <_Bfree>
 800c014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c016:	2300      	movs	r3, #0
 800c018:	6013      	str	r3, [r2, #0]
 800c01a:	27a3      	movs	r7, #163	; 0xa3
 800c01c:	e785      	b.n	800bf2a <__gethex+0x12a>
 800c01e:	1e73      	subs	r3, r6, #1
 800c020:	9a05      	ldr	r2, [sp, #20]
 800c022:	9303      	str	r3, [sp, #12]
 800c024:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c028:	4293      	cmp	r3, r2
 800c02a:	d019      	beq.n	800c060 <__gethex+0x260>
 800c02c:	f1bb 0f20 	cmp.w	fp, #32
 800c030:	d107      	bne.n	800c042 <__gethex+0x242>
 800c032:	9b02      	ldr	r3, [sp, #8]
 800c034:	9a00      	ldr	r2, [sp, #0]
 800c036:	f843 2b04 	str.w	r2, [r3], #4
 800c03a:	9302      	str	r3, [sp, #8]
 800c03c:	2300      	movs	r3, #0
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	469b      	mov	fp, r3
 800c042:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c046:	f7ff fec5 	bl	800bdd4 <__hexdig_fun>
 800c04a:	9b00      	ldr	r3, [sp, #0]
 800c04c:	f000 000f 	and.w	r0, r0, #15
 800c050:	fa00 f00b 	lsl.w	r0, r0, fp
 800c054:	4303      	orrs	r3, r0
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	f10b 0b04 	add.w	fp, fp, #4
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	e00d      	b.n	800c07c <__gethex+0x27c>
 800c060:	9b03      	ldr	r3, [sp, #12]
 800c062:	9a06      	ldr	r2, [sp, #24]
 800c064:	4413      	add	r3, r2
 800c066:	42bb      	cmp	r3, r7
 800c068:	d3e0      	bcc.n	800c02c <__gethex+0x22c>
 800c06a:	4618      	mov	r0, r3
 800c06c:	9901      	ldr	r1, [sp, #4]
 800c06e:	9307      	str	r3, [sp, #28]
 800c070:	4652      	mov	r2, sl
 800c072:	f001 fa81 	bl	800d578 <strncmp>
 800c076:	9b07      	ldr	r3, [sp, #28]
 800c078:	2800      	cmp	r0, #0
 800c07a:	d1d7      	bne.n	800c02c <__gethex+0x22c>
 800c07c:	461e      	mov	r6, r3
 800c07e:	e78b      	b.n	800bf98 <__gethex+0x198>
 800c080:	f04f 0a03 	mov.w	sl, #3
 800c084:	e7b8      	b.n	800bff8 <__gethex+0x1f8>
 800c086:	da0a      	bge.n	800c09e <__gethex+0x29e>
 800c088:	1a37      	subs	r7, r6, r0
 800c08a:	4621      	mov	r1, r4
 800c08c:	ee18 0a10 	vmov	r0, s16
 800c090:	463a      	mov	r2, r7
 800c092:	f000 fc45 	bl	800c920 <__lshift>
 800c096:	1bed      	subs	r5, r5, r7
 800c098:	4604      	mov	r4, r0
 800c09a:	f100 0914 	add.w	r9, r0, #20
 800c09e:	f04f 0a00 	mov.w	sl, #0
 800c0a2:	e7ae      	b.n	800c002 <__gethex+0x202>
 800c0a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c0a8:	42a8      	cmp	r0, r5
 800c0aa:	dd72      	ble.n	800c192 <__gethex+0x392>
 800c0ac:	1b45      	subs	r5, r0, r5
 800c0ae:	42ae      	cmp	r6, r5
 800c0b0:	dc36      	bgt.n	800c120 <__gethex+0x320>
 800c0b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d02a      	beq.n	800c110 <__gethex+0x310>
 800c0ba:	2b03      	cmp	r3, #3
 800c0bc:	d02c      	beq.n	800c118 <__gethex+0x318>
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d11c      	bne.n	800c0fc <__gethex+0x2fc>
 800c0c2:	42ae      	cmp	r6, r5
 800c0c4:	d11a      	bne.n	800c0fc <__gethex+0x2fc>
 800c0c6:	2e01      	cmp	r6, #1
 800c0c8:	d112      	bne.n	800c0f0 <__gethex+0x2f0>
 800c0ca:	9a04      	ldr	r2, [sp, #16]
 800c0cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c0d0:	6013      	str	r3, [r2, #0]
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	6123      	str	r3, [r4, #16]
 800c0d6:	f8c9 3000 	str.w	r3, [r9]
 800c0da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0dc:	2762      	movs	r7, #98	; 0x62
 800c0de:	601c      	str	r4, [r3, #0]
 800c0e0:	e723      	b.n	800bf2a <__gethex+0x12a>
 800c0e2:	bf00      	nop
 800c0e4:	080107d8 	.word	0x080107d8
 800c0e8:	08010761 	.word	0x08010761
 800c0ec:	08010772 	.word	0x08010772
 800c0f0:	1e71      	subs	r1, r6, #1
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f000 fe58 	bl	800cda8 <__any_on>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d1e6      	bne.n	800c0ca <__gethex+0x2ca>
 800c0fc:	ee18 0a10 	vmov	r0, s16
 800c100:	4621      	mov	r1, r4
 800c102:	f000 f9f1 	bl	800c4e8 <_Bfree>
 800c106:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c108:	2300      	movs	r3, #0
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	2750      	movs	r7, #80	; 0x50
 800c10e:	e70c      	b.n	800bf2a <__gethex+0x12a>
 800c110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1f2      	bne.n	800c0fc <__gethex+0x2fc>
 800c116:	e7d8      	b.n	800c0ca <__gethex+0x2ca>
 800c118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1d5      	bne.n	800c0ca <__gethex+0x2ca>
 800c11e:	e7ed      	b.n	800c0fc <__gethex+0x2fc>
 800c120:	1e6f      	subs	r7, r5, #1
 800c122:	f1ba 0f00 	cmp.w	sl, #0
 800c126:	d131      	bne.n	800c18c <__gethex+0x38c>
 800c128:	b127      	cbz	r7, 800c134 <__gethex+0x334>
 800c12a:	4639      	mov	r1, r7
 800c12c:	4620      	mov	r0, r4
 800c12e:	f000 fe3b 	bl	800cda8 <__any_on>
 800c132:	4682      	mov	sl, r0
 800c134:	117b      	asrs	r3, r7, #5
 800c136:	2101      	movs	r1, #1
 800c138:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c13c:	f007 071f 	and.w	r7, r7, #31
 800c140:	fa01 f707 	lsl.w	r7, r1, r7
 800c144:	421f      	tst	r7, r3
 800c146:	4629      	mov	r1, r5
 800c148:	4620      	mov	r0, r4
 800c14a:	bf18      	it	ne
 800c14c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c150:	1b76      	subs	r6, r6, r5
 800c152:	f7ff fded 	bl	800bd30 <rshift>
 800c156:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c15a:	2702      	movs	r7, #2
 800c15c:	f1ba 0f00 	cmp.w	sl, #0
 800c160:	d048      	beq.n	800c1f4 <__gethex+0x3f4>
 800c162:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c166:	2b02      	cmp	r3, #2
 800c168:	d015      	beq.n	800c196 <__gethex+0x396>
 800c16a:	2b03      	cmp	r3, #3
 800c16c:	d017      	beq.n	800c19e <__gethex+0x39e>
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d109      	bne.n	800c186 <__gethex+0x386>
 800c172:	f01a 0f02 	tst.w	sl, #2
 800c176:	d006      	beq.n	800c186 <__gethex+0x386>
 800c178:	f8d9 0000 	ldr.w	r0, [r9]
 800c17c:	ea4a 0a00 	orr.w	sl, sl, r0
 800c180:	f01a 0f01 	tst.w	sl, #1
 800c184:	d10e      	bne.n	800c1a4 <__gethex+0x3a4>
 800c186:	f047 0710 	orr.w	r7, r7, #16
 800c18a:	e033      	b.n	800c1f4 <__gethex+0x3f4>
 800c18c:	f04f 0a01 	mov.w	sl, #1
 800c190:	e7d0      	b.n	800c134 <__gethex+0x334>
 800c192:	2701      	movs	r7, #1
 800c194:	e7e2      	b.n	800c15c <__gethex+0x35c>
 800c196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c198:	f1c3 0301 	rsb	r3, r3, #1
 800c19c:	9315      	str	r3, [sp, #84]	; 0x54
 800c19e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d0f0      	beq.n	800c186 <__gethex+0x386>
 800c1a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c1a8:	f104 0314 	add.w	r3, r4, #20
 800c1ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c1b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c1b4:	f04f 0c00 	mov.w	ip, #0
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1be:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c1c2:	d01c      	beq.n	800c1fe <__gethex+0x3fe>
 800c1c4:	3201      	adds	r2, #1
 800c1c6:	6002      	str	r2, [r0, #0]
 800c1c8:	2f02      	cmp	r7, #2
 800c1ca:	f104 0314 	add.w	r3, r4, #20
 800c1ce:	d13f      	bne.n	800c250 <__gethex+0x450>
 800c1d0:	f8d8 2000 	ldr.w	r2, [r8]
 800c1d4:	3a01      	subs	r2, #1
 800c1d6:	42b2      	cmp	r2, r6
 800c1d8:	d10a      	bne.n	800c1f0 <__gethex+0x3f0>
 800c1da:	1171      	asrs	r1, r6, #5
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1e2:	f006 061f 	and.w	r6, r6, #31
 800c1e6:	fa02 f606 	lsl.w	r6, r2, r6
 800c1ea:	421e      	tst	r6, r3
 800c1ec:	bf18      	it	ne
 800c1ee:	4617      	movne	r7, r2
 800c1f0:	f047 0720 	orr.w	r7, r7, #32
 800c1f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1f6:	601c      	str	r4, [r3, #0]
 800c1f8:	9b04      	ldr	r3, [sp, #16]
 800c1fa:	601d      	str	r5, [r3, #0]
 800c1fc:	e695      	b.n	800bf2a <__gethex+0x12a>
 800c1fe:	4299      	cmp	r1, r3
 800c200:	f843 cc04 	str.w	ip, [r3, #-4]
 800c204:	d8d8      	bhi.n	800c1b8 <__gethex+0x3b8>
 800c206:	68a3      	ldr	r3, [r4, #8]
 800c208:	459b      	cmp	fp, r3
 800c20a:	db19      	blt.n	800c240 <__gethex+0x440>
 800c20c:	6861      	ldr	r1, [r4, #4]
 800c20e:	ee18 0a10 	vmov	r0, s16
 800c212:	3101      	adds	r1, #1
 800c214:	f000 f928 	bl	800c468 <_Balloc>
 800c218:	4681      	mov	r9, r0
 800c21a:	b918      	cbnz	r0, 800c224 <__gethex+0x424>
 800c21c:	4b1a      	ldr	r3, [pc, #104]	; (800c288 <__gethex+0x488>)
 800c21e:	4602      	mov	r2, r0
 800c220:	2184      	movs	r1, #132	; 0x84
 800c222:	e6a8      	b.n	800bf76 <__gethex+0x176>
 800c224:	6922      	ldr	r2, [r4, #16]
 800c226:	3202      	adds	r2, #2
 800c228:	f104 010c 	add.w	r1, r4, #12
 800c22c:	0092      	lsls	r2, r2, #2
 800c22e:	300c      	adds	r0, #12
 800c230:	f000 f90c 	bl	800c44c <memcpy>
 800c234:	4621      	mov	r1, r4
 800c236:	ee18 0a10 	vmov	r0, s16
 800c23a:	f000 f955 	bl	800c4e8 <_Bfree>
 800c23e:	464c      	mov	r4, r9
 800c240:	6923      	ldr	r3, [r4, #16]
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c248:	6122      	str	r2, [r4, #16]
 800c24a:	2201      	movs	r2, #1
 800c24c:	615a      	str	r2, [r3, #20]
 800c24e:	e7bb      	b.n	800c1c8 <__gethex+0x3c8>
 800c250:	6922      	ldr	r2, [r4, #16]
 800c252:	455a      	cmp	r2, fp
 800c254:	dd0b      	ble.n	800c26e <__gethex+0x46e>
 800c256:	2101      	movs	r1, #1
 800c258:	4620      	mov	r0, r4
 800c25a:	f7ff fd69 	bl	800bd30 <rshift>
 800c25e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c262:	3501      	adds	r5, #1
 800c264:	42ab      	cmp	r3, r5
 800c266:	f6ff aed0 	blt.w	800c00a <__gethex+0x20a>
 800c26a:	2701      	movs	r7, #1
 800c26c:	e7c0      	b.n	800c1f0 <__gethex+0x3f0>
 800c26e:	f016 061f 	ands.w	r6, r6, #31
 800c272:	d0fa      	beq.n	800c26a <__gethex+0x46a>
 800c274:	4453      	add	r3, sl
 800c276:	f1c6 0620 	rsb	r6, r6, #32
 800c27a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c27e:	f000 f9e5 	bl	800c64c <__hi0bits>
 800c282:	42b0      	cmp	r0, r6
 800c284:	dbe7      	blt.n	800c256 <__gethex+0x456>
 800c286:	e7f0      	b.n	800c26a <__gethex+0x46a>
 800c288:	08010761 	.word	0x08010761

0800c28c <L_shift>:
 800c28c:	f1c2 0208 	rsb	r2, r2, #8
 800c290:	0092      	lsls	r2, r2, #2
 800c292:	b570      	push	{r4, r5, r6, lr}
 800c294:	f1c2 0620 	rsb	r6, r2, #32
 800c298:	6843      	ldr	r3, [r0, #4]
 800c29a:	6804      	ldr	r4, [r0, #0]
 800c29c:	fa03 f506 	lsl.w	r5, r3, r6
 800c2a0:	432c      	orrs	r4, r5
 800c2a2:	40d3      	lsrs	r3, r2
 800c2a4:	6004      	str	r4, [r0, #0]
 800c2a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c2aa:	4288      	cmp	r0, r1
 800c2ac:	d3f4      	bcc.n	800c298 <L_shift+0xc>
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}

0800c2b0 <__match>:
 800c2b0:	b530      	push	{r4, r5, lr}
 800c2b2:	6803      	ldr	r3, [r0, #0]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2ba:	b914      	cbnz	r4, 800c2c2 <__match+0x12>
 800c2bc:	6003      	str	r3, [r0, #0]
 800c2be:	2001      	movs	r0, #1
 800c2c0:	bd30      	pop	{r4, r5, pc}
 800c2c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c2ca:	2d19      	cmp	r5, #25
 800c2cc:	bf98      	it	ls
 800c2ce:	3220      	addls	r2, #32
 800c2d0:	42a2      	cmp	r2, r4
 800c2d2:	d0f0      	beq.n	800c2b6 <__match+0x6>
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	e7f3      	b.n	800c2c0 <__match+0x10>

0800c2d8 <__hexnan>:
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	680b      	ldr	r3, [r1, #0]
 800c2de:	115e      	asrs	r6, r3, #5
 800c2e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c2e4:	f013 031f 	ands.w	r3, r3, #31
 800c2e8:	b087      	sub	sp, #28
 800c2ea:	bf18      	it	ne
 800c2ec:	3604      	addne	r6, #4
 800c2ee:	2500      	movs	r5, #0
 800c2f0:	1f37      	subs	r7, r6, #4
 800c2f2:	4690      	mov	r8, r2
 800c2f4:	6802      	ldr	r2, [r0, #0]
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	4682      	mov	sl, r0
 800c2fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800c2fe:	46b9      	mov	r9, r7
 800c300:	463c      	mov	r4, r7
 800c302:	9502      	str	r5, [sp, #8]
 800c304:	46ab      	mov	fp, r5
 800c306:	7851      	ldrb	r1, [r2, #1]
 800c308:	1c53      	adds	r3, r2, #1
 800c30a:	9303      	str	r3, [sp, #12]
 800c30c:	b341      	cbz	r1, 800c360 <__hexnan+0x88>
 800c30e:	4608      	mov	r0, r1
 800c310:	9205      	str	r2, [sp, #20]
 800c312:	9104      	str	r1, [sp, #16]
 800c314:	f7ff fd5e 	bl	800bdd4 <__hexdig_fun>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d14f      	bne.n	800c3bc <__hexnan+0xe4>
 800c31c:	9904      	ldr	r1, [sp, #16]
 800c31e:	9a05      	ldr	r2, [sp, #20]
 800c320:	2920      	cmp	r1, #32
 800c322:	d818      	bhi.n	800c356 <__hexnan+0x7e>
 800c324:	9b02      	ldr	r3, [sp, #8]
 800c326:	459b      	cmp	fp, r3
 800c328:	dd13      	ble.n	800c352 <__hexnan+0x7a>
 800c32a:	454c      	cmp	r4, r9
 800c32c:	d206      	bcs.n	800c33c <__hexnan+0x64>
 800c32e:	2d07      	cmp	r5, #7
 800c330:	dc04      	bgt.n	800c33c <__hexnan+0x64>
 800c332:	462a      	mov	r2, r5
 800c334:	4649      	mov	r1, r9
 800c336:	4620      	mov	r0, r4
 800c338:	f7ff ffa8 	bl	800c28c <L_shift>
 800c33c:	4544      	cmp	r4, r8
 800c33e:	d950      	bls.n	800c3e2 <__hexnan+0x10a>
 800c340:	2300      	movs	r3, #0
 800c342:	f1a4 0904 	sub.w	r9, r4, #4
 800c346:	f844 3c04 	str.w	r3, [r4, #-4]
 800c34a:	f8cd b008 	str.w	fp, [sp, #8]
 800c34e:	464c      	mov	r4, r9
 800c350:	461d      	mov	r5, r3
 800c352:	9a03      	ldr	r2, [sp, #12]
 800c354:	e7d7      	b.n	800c306 <__hexnan+0x2e>
 800c356:	2929      	cmp	r1, #41	; 0x29
 800c358:	d156      	bne.n	800c408 <__hexnan+0x130>
 800c35a:	3202      	adds	r2, #2
 800c35c:	f8ca 2000 	str.w	r2, [sl]
 800c360:	f1bb 0f00 	cmp.w	fp, #0
 800c364:	d050      	beq.n	800c408 <__hexnan+0x130>
 800c366:	454c      	cmp	r4, r9
 800c368:	d206      	bcs.n	800c378 <__hexnan+0xa0>
 800c36a:	2d07      	cmp	r5, #7
 800c36c:	dc04      	bgt.n	800c378 <__hexnan+0xa0>
 800c36e:	462a      	mov	r2, r5
 800c370:	4649      	mov	r1, r9
 800c372:	4620      	mov	r0, r4
 800c374:	f7ff ff8a 	bl	800c28c <L_shift>
 800c378:	4544      	cmp	r4, r8
 800c37a:	d934      	bls.n	800c3e6 <__hexnan+0x10e>
 800c37c:	f1a8 0204 	sub.w	r2, r8, #4
 800c380:	4623      	mov	r3, r4
 800c382:	f853 1b04 	ldr.w	r1, [r3], #4
 800c386:	f842 1f04 	str.w	r1, [r2, #4]!
 800c38a:	429f      	cmp	r7, r3
 800c38c:	d2f9      	bcs.n	800c382 <__hexnan+0xaa>
 800c38e:	1b3b      	subs	r3, r7, r4
 800c390:	f023 0303 	bic.w	r3, r3, #3
 800c394:	3304      	adds	r3, #4
 800c396:	3401      	adds	r4, #1
 800c398:	3e03      	subs	r6, #3
 800c39a:	42b4      	cmp	r4, r6
 800c39c:	bf88      	it	hi
 800c39e:	2304      	movhi	r3, #4
 800c3a0:	4443      	add	r3, r8
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f843 2b04 	str.w	r2, [r3], #4
 800c3a8:	429f      	cmp	r7, r3
 800c3aa:	d2fb      	bcs.n	800c3a4 <__hexnan+0xcc>
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	b91b      	cbnz	r3, 800c3b8 <__hexnan+0xe0>
 800c3b0:	4547      	cmp	r7, r8
 800c3b2:	d127      	bne.n	800c404 <__hexnan+0x12c>
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	603b      	str	r3, [r7, #0]
 800c3b8:	2005      	movs	r0, #5
 800c3ba:	e026      	b.n	800c40a <__hexnan+0x132>
 800c3bc:	3501      	adds	r5, #1
 800c3be:	2d08      	cmp	r5, #8
 800c3c0:	f10b 0b01 	add.w	fp, fp, #1
 800c3c4:	dd06      	ble.n	800c3d4 <__hexnan+0xfc>
 800c3c6:	4544      	cmp	r4, r8
 800c3c8:	d9c3      	bls.n	800c352 <__hexnan+0x7a>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3d0:	2501      	movs	r5, #1
 800c3d2:	3c04      	subs	r4, #4
 800c3d4:	6822      	ldr	r2, [r4, #0]
 800c3d6:	f000 000f 	and.w	r0, r0, #15
 800c3da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c3de:	6022      	str	r2, [r4, #0]
 800c3e0:	e7b7      	b.n	800c352 <__hexnan+0x7a>
 800c3e2:	2508      	movs	r5, #8
 800c3e4:	e7b5      	b.n	800c352 <__hexnan+0x7a>
 800c3e6:	9b01      	ldr	r3, [sp, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d0df      	beq.n	800c3ac <__hexnan+0xd4>
 800c3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f0:	f1c3 0320 	rsb	r3, r3, #32
 800c3f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c3fc:	401a      	ands	r2, r3
 800c3fe:	f846 2c04 	str.w	r2, [r6, #-4]
 800c402:	e7d3      	b.n	800c3ac <__hexnan+0xd4>
 800c404:	3f04      	subs	r7, #4
 800c406:	e7d1      	b.n	800c3ac <__hexnan+0xd4>
 800c408:	2004      	movs	r0, #4
 800c40a:	b007      	add	sp, #28
 800c40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c410 <_localeconv_r>:
 800c410:	4800      	ldr	r0, [pc, #0]	; (800c414 <_localeconv_r+0x4>)
 800c412:	4770      	bx	lr
 800c414:	20000244 	.word	0x20000244

0800c418 <malloc>:
 800c418:	4b02      	ldr	r3, [pc, #8]	; (800c424 <malloc+0xc>)
 800c41a:	4601      	mov	r1, r0
 800c41c:	6818      	ldr	r0, [r3, #0]
 800c41e:	f000 bd67 	b.w	800cef0 <_malloc_r>
 800c422:	bf00      	nop
 800c424:	200000ec 	.word	0x200000ec

0800c428 <__ascii_mbtowc>:
 800c428:	b082      	sub	sp, #8
 800c42a:	b901      	cbnz	r1, 800c42e <__ascii_mbtowc+0x6>
 800c42c:	a901      	add	r1, sp, #4
 800c42e:	b142      	cbz	r2, 800c442 <__ascii_mbtowc+0x1a>
 800c430:	b14b      	cbz	r3, 800c446 <__ascii_mbtowc+0x1e>
 800c432:	7813      	ldrb	r3, [r2, #0]
 800c434:	600b      	str	r3, [r1, #0]
 800c436:	7812      	ldrb	r2, [r2, #0]
 800c438:	1e10      	subs	r0, r2, #0
 800c43a:	bf18      	it	ne
 800c43c:	2001      	movne	r0, #1
 800c43e:	b002      	add	sp, #8
 800c440:	4770      	bx	lr
 800c442:	4610      	mov	r0, r2
 800c444:	e7fb      	b.n	800c43e <__ascii_mbtowc+0x16>
 800c446:	f06f 0001 	mvn.w	r0, #1
 800c44a:	e7f8      	b.n	800c43e <__ascii_mbtowc+0x16>

0800c44c <memcpy>:
 800c44c:	440a      	add	r2, r1
 800c44e:	4291      	cmp	r1, r2
 800c450:	f100 33ff 	add.w	r3, r0, #4294967295
 800c454:	d100      	bne.n	800c458 <memcpy+0xc>
 800c456:	4770      	bx	lr
 800c458:	b510      	push	{r4, lr}
 800c45a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c45e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c462:	4291      	cmp	r1, r2
 800c464:	d1f9      	bne.n	800c45a <memcpy+0xe>
 800c466:	bd10      	pop	{r4, pc}

0800c468 <_Balloc>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c46c:	4604      	mov	r4, r0
 800c46e:	460d      	mov	r5, r1
 800c470:	b976      	cbnz	r6, 800c490 <_Balloc+0x28>
 800c472:	2010      	movs	r0, #16
 800c474:	f7ff ffd0 	bl	800c418 <malloc>
 800c478:	4602      	mov	r2, r0
 800c47a:	6260      	str	r0, [r4, #36]	; 0x24
 800c47c:	b920      	cbnz	r0, 800c488 <_Balloc+0x20>
 800c47e:	4b18      	ldr	r3, [pc, #96]	; (800c4e0 <_Balloc+0x78>)
 800c480:	4818      	ldr	r0, [pc, #96]	; (800c4e4 <_Balloc+0x7c>)
 800c482:	2166      	movs	r1, #102	; 0x66
 800c484:	f7fe fda8 	bl	800afd8 <__assert_func>
 800c488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c48c:	6006      	str	r6, [r0, #0]
 800c48e:	60c6      	str	r6, [r0, #12]
 800c490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c492:	68f3      	ldr	r3, [r6, #12]
 800c494:	b183      	cbz	r3, 800c4b8 <_Balloc+0x50>
 800c496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c49e:	b9b8      	cbnz	r0, 800c4d0 <_Balloc+0x68>
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	fa01 f605 	lsl.w	r6, r1, r5
 800c4a6:	1d72      	adds	r2, r6, #5
 800c4a8:	0092      	lsls	r2, r2, #2
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 fc9d 	bl	800cdea <_calloc_r>
 800c4b0:	b160      	cbz	r0, 800c4cc <_Balloc+0x64>
 800c4b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4b6:	e00e      	b.n	800c4d6 <_Balloc+0x6e>
 800c4b8:	2221      	movs	r2, #33	; 0x21
 800c4ba:	2104      	movs	r1, #4
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f000 fc94 	bl	800cdea <_calloc_r>
 800c4c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4c4:	60f0      	str	r0, [r6, #12]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1e4      	bne.n	800c496 <_Balloc+0x2e>
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	bd70      	pop	{r4, r5, r6, pc}
 800c4d0:	6802      	ldr	r2, [r0, #0]
 800c4d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4dc:	e7f7      	b.n	800c4ce <_Balloc+0x66>
 800c4de:	bf00      	nop
 800c4e0:	08010548 	.word	0x08010548
 800c4e4:	080107ec 	.word	0x080107ec

0800c4e8 <_Bfree>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	b976      	cbnz	r6, 800c510 <_Bfree+0x28>
 800c4f2:	2010      	movs	r0, #16
 800c4f4:	f7ff ff90 	bl	800c418 <malloc>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	6268      	str	r0, [r5, #36]	; 0x24
 800c4fc:	b920      	cbnz	r0, 800c508 <_Bfree+0x20>
 800c4fe:	4b09      	ldr	r3, [pc, #36]	; (800c524 <_Bfree+0x3c>)
 800c500:	4809      	ldr	r0, [pc, #36]	; (800c528 <_Bfree+0x40>)
 800c502:	218a      	movs	r1, #138	; 0x8a
 800c504:	f7fe fd68 	bl	800afd8 <__assert_func>
 800c508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c50c:	6006      	str	r6, [r0, #0]
 800c50e:	60c6      	str	r6, [r0, #12]
 800c510:	b13c      	cbz	r4, 800c522 <_Bfree+0x3a>
 800c512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c514:	6862      	ldr	r2, [r4, #4]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c51c:	6021      	str	r1, [r4, #0]
 800c51e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c522:	bd70      	pop	{r4, r5, r6, pc}
 800c524:	08010548 	.word	0x08010548
 800c528:	080107ec 	.word	0x080107ec

0800c52c <__multadd>:
 800c52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c530:	690d      	ldr	r5, [r1, #16]
 800c532:	4607      	mov	r7, r0
 800c534:	460c      	mov	r4, r1
 800c536:	461e      	mov	r6, r3
 800c538:	f101 0c14 	add.w	ip, r1, #20
 800c53c:	2000      	movs	r0, #0
 800c53e:	f8dc 3000 	ldr.w	r3, [ip]
 800c542:	b299      	uxth	r1, r3
 800c544:	fb02 6101 	mla	r1, r2, r1, r6
 800c548:	0c1e      	lsrs	r6, r3, #16
 800c54a:	0c0b      	lsrs	r3, r1, #16
 800c54c:	fb02 3306 	mla	r3, r2, r6, r3
 800c550:	b289      	uxth	r1, r1
 800c552:	3001      	adds	r0, #1
 800c554:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c558:	4285      	cmp	r5, r0
 800c55a:	f84c 1b04 	str.w	r1, [ip], #4
 800c55e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c562:	dcec      	bgt.n	800c53e <__multadd+0x12>
 800c564:	b30e      	cbz	r6, 800c5aa <__multadd+0x7e>
 800c566:	68a3      	ldr	r3, [r4, #8]
 800c568:	42ab      	cmp	r3, r5
 800c56a:	dc19      	bgt.n	800c5a0 <__multadd+0x74>
 800c56c:	6861      	ldr	r1, [r4, #4]
 800c56e:	4638      	mov	r0, r7
 800c570:	3101      	adds	r1, #1
 800c572:	f7ff ff79 	bl	800c468 <_Balloc>
 800c576:	4680      	mov	r8, r0
 800c578:	b928      	cbnz	r0, 800c586 <__multadd+0x5a>
 800c57a:	4602      	mov	r2, r0
 800c57c:	4b0c      	ldr	r3, [pc, #48]	; (800c5b0 <__multadd+0x84>)
 800c57e:	480d      	ldr	r0, [pc, #52]	; (800c5b4 <__multadd+0x88>)
 800c580:	21b5      	movs	r1, #181	; 0xb5
 800c582:	f7fe fd29 	bl	800afd8 <__assert_func>
 800c586:	6922      	ldr	r2, [r4, #16]
 800c588:	3202      	adds	r2, #2
 800c58a:	f104 010c 	add.w	r1, r4, #12
 800c58e:	0092      	lsls	r2, r2, #2
 800c590:	300c      	adds	r0, #12
 800c592:	f7ff ff5b 	bl	800c44c <memcpy>
 800c596:	4621      	mov	r1, r4
 800c598:	4638      	mov	r0, r7
 800c59a:	f7ff ffa5 	bl	800c4e8 <_Bfree>
 800c59e:	4644      	mov	r4, r8
 800c5a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5a4:	3501      	adds	r5, #1
 800c5a6:	615e      	str	r6, [r3, #20]
 800c5a8:	6125      	str	r5, [r4, #16]
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b0:	08010761 	.word	0x08010761
 800c5b4:	080107ec 	.word	0x080107ec

0800c5b8 <__s2b>:
 800c5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5bc:	460c      	mov	r4, r1
 800c5be:	4615      	mov	r5, r2
 800c5c0:	461f      	mov	r7, r3
 800c5c2:	2209      	movs	r2, #9
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	db09      	blt.n	800c5e8 <__s2b+0x30>
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	f7ff ff47 	bl	800c468 <_Balloc>
 800c5da:	b940      	cbnz	r0, 800c5ee <__s2b+0x36>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	4b19      	ldr	r3, [pc, #100]	; (800c644 <__s2b+0x8c>)
 800c5e0:	4819      	ldr	r0, [pc, #100]	; (800c648 <__s2b+0x90>)
 800c5e2:	21ce      	movs	r1, #206	; 0xce
 800c5e4:	f7fe fcf8 	bl	800afd8 <__assert_func>
 800c5e8:	0052      	lsls	r2, r2, #1
 800c5ea:	3101      	adds	r1, #1
 800c5ec:	e7f0      	b.n	800c5d0 <__s2b+0x18>
 800c5ee:	9b08      	ldr	r3, [sp, #32]
 800c5f0:	6143      	str	r3, [r0, #20]
 800c5f2:	2d09      	cmp	r5, #9
 800c5f4:	f04f 0301 	mov.w	r3, #1
 800c5f8:	6103      	str	r3, [r0, #16]
 800c5fa:	dd16      	ble.n	800c62a <__s2b+0x72>
 800c5fc:	f104 0909 	add.w	r9, r4, #9
 800c600:	46c8      	mov	r8, r9
 800c602:	442c      	add	r4, r5
 800c604:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c608:	4601      	mov	r1, r0
 800c60a:	3b30      	subs	r3, #48	; 0x30
 800c60c:	220a      	movs	r2, #10
 800c60e:	4630      	mov	r0, r6
 800c610:	f7ff ff8c 	bl	800c52c <__multadd>
 800c614:	45a0      	cmp	r8, r4
 800c616:	d1f5      	bne.n	800c604 <__s2b+0x4c>
 800c618:	f1a5 0408 	sub.w	r4, r5, #8
 800c61c:	444c      	add	r4, r9
 800c61e:	1b2d      	subs	r5, r5, r4
 800c620:	1963      	adds	r3, r4, r5
 800c622:	42bb      	cmp	r3, r7
 800c624:	db04      	blt.n	800c630 <__s2b+0x78>
 800c626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c62a:	340a      	adds	r4, #10
 800c62c:	2509      	movs	r5, #9
 800c62e:	e7f6      	b.n	800c61e <__s2b+0x66>
 800c630:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c634:	4601      	mov	r1, r0
 800c636:	3b30      	subs	r3, #48	; 0x30
 800c638:	220a      	movs	r2, #10
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7ff ff76 	bl	800c52c <__multadd>
 800c640:	e7ee      	b.n	800c620 <__s2b+0x68>
 800c642:	bf00      	nop
 800c644:	08010761 	.word	0x08010761
 800c648:	080107ec 	.word	0x080107ec

0800c64c <__hi0bits>:
 800c64c:	0c03      	lsrs	r3, r0, #16
 800c64e:	041b      	lsls	r3, r3, #16
 800c650:	b9d3      	cbnz	r3, 800c688 <__hi0bits+0x3c>
 800c652:	0400      	lsls	r0, r0, #16
 800c654:	2310      	movs	r3, #16
 800c656:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c65a:	bf04      	itt	eq
 800c65c:	0200      	lsleq	r0, r0, #8
 800c65e:	3308      	addeq	r3, #8
 800c660:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c664:	bf04      	itt	eq
 800c666:	0100      	lsleq	r0, r0, #4
 800c668:	3304      	addeq	r3, #4
 800c66a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c66e:	bf04      	itt	eq
 800c670:	0080      	lsleq	r0, r0, #2
 800c672:	3302      	addeq	r3, #2
 800c674:	2800      	cmp	r0, #0
 800c676:	db05      	blt.n	800c684 <__hi0bits+0x38>
 800c678:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c67c:	f103 0301 	add.w	r3, r3, #1
 800c680:	bf08      	it	eq
 800c682:	2320      	moveq	r3, #32
 800c684:	4618      	mov	r0, r3
 800c686:	4770      	bx	lr
 800c688:	2300      	movs	r3, #0
 800c68a:	e7e4      	b.n	800c656 <__hi0bits+0xa>

0800c68c <__lo0bits>:
 800c68c:	6803      	ldr	r3, [r0, #0]
 800c68e:	f013 0207 	ands.w	r2, r3, #7
 800c692:	4601      	mov	r1, r0
 800c694:	d00b      	beq.n	800c6ae <__lo0bits+0x22>
 800c696:	07da      	lsls	r2, r3, #31
 800c698:	d423      	bmi.n	800c6e2 <__lo0bits+0x56>
 800c69a:	0798      	lsls	r0, r3, #30
 800c69c:	bf49      	itett	mi
 800c69e:	085b      	lsrmi	r3, r3, #1
 800c6a0:	089b      	lsrpl	r3, r3, #2
 800c6a2:	2001      	movmi	r0, #1
 800c6a4:	600b      	strmi	r3, [r1, #0]
 800c6a6:	bf5c      	itt	pl
 800c6a8:	600b      	strpl	r3, [r1, #0]
 800c6aa:	2002      	movpl	r0, #2
 800c6ac:	4770      	bx	lr
 800c6ae:	b298      	uxth	r0, r3
 800c6b0:	b9a8      	cbnz	r0, 800c6de <__lo0bits+0x52>
 800c6b2:	0c1b      	lsrs	r3, r3, #16
 800c6b4:	2010      	movs	r0, #16
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	b90a      	cbnz	r2, 800c6be <__lo0bits+0x32>
 800c6ba:	3008      	adds	r0, #8
 800c6bc:	0a1b      	lsrs	r3, r3, #8
 800c6be:	071a      	lsls	r2, r3, #28
 800c6c0:	bf04      	itt	eq
 800c6c2:	091b      	lsreq	r3, r3, #4
 800c6c4:	3004      	addeq	r0, #4
 800c6c6:	079a      	lsls	r2, r3, #30
 800c6c8:	bf04      	itt	eq
 800c6ca:	089b      	lsreq	r3, r3, #2
 800c6cc:	3002      	addeq	r0, #2
 800c6ce:	07da      	lsls	r2, r3, #31
 800c6d0:	d403      	bmi.n	800c6da <__lo0bits+0x4e>
 800c6d2:	085b      	lsrs	r3, r3, #1
 800c6d4:	f100 0001 	add.w	r0, r0, #1
 800c6d8:	d005      	beq.n	800c6e6 <__lo0bits+0x5a>
 800c6da:	600b      	str	r3, [r1, #0]
 800c6dc:	4770      	bx	lr
 800c6de:	4610      	mov	r0, r2
 800c6e0:	e7e9      	b.n	800c6b6 <__lo0bits+0x2a>
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	4770      	bx	lr
 800c6e6:	2020      	movs	r0, #32
 800c6e8:	4770      	bx	lr
	...

0800c6ec <__i2b>:
 800c6ec:	b510      	push	{r4, lr}
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	f7ff feb9 	bl	800c468 <_Balloc>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	b928      	cbnz	r0, 800c706 <__i2b+0x1a>
 800c6fa:	4b05      	ldr	r3, [pc, #20]	; (800c710 <__i2b+0x24>)
 800c6fc:	4805      	ldr	r0, [pc, #20]	; (800c714 <__i2b+0x28>)
 800c6fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c702:	f7fe fc69 	bl	800afd8 <__assert_func>
 800c706:	2301      	movs	r3, #1
 800c708:	6144      	str	r4, [r0, #20]
 800c70a:	6103      	str	r3, [r0, #16]
 800c70c:	bd10      	pop	{r4, pc}
 800c70e:	bf00      	nop
 800c710:	08010761 	.word	0x08010761
 800c714:	080107ec 	.word	0x080107ec

0800c718 <__multiply>:
 800c718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	4691      	mov	r9, r2
 800c71e:	690a      	ldr	r2, [r1, #16]
 800c720:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c724:	429a      	cmp	r2, r3
 800c726:	bfb8      	it	lt
 800c728:	460b      	movlt	r3, r1
 800c72a:	460c      	mov	r4, r1
 800c72c:	bfbc      	itt	lt
 800c72e:	464c      	movlt	r4, r9
 800c730:	4699      	movlt	r9, r3
 800c732:	6927      	ldr	r7, [r4, #16]
 800c734:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c738:	68a3      	ldr	r3, [r4, #8]
 800c73a:	6861      	ldr	r1, [r4, #4]
 800c73c:	eb07 060a 	add.w	r6, r7, sl
 800c740:	42b3      	cmp	r3, r6
 800c742:	b085      	sub	sp, #20
 800c744:	bfb8      	it	lt
 800c746:	3101      	addlt	r1, #1
 800c748:	f7ff fe8e 	bl	800c468 <_Balloc>
 800c74c:	b930      	cbnz	r0, 800c75c <__multiply+0x44>
 800c74e:	4602      	mov	r2, r0
 800c750:	4b44      	ldr	r3, [pc, #272]	; (800c864 <__multiply+0x14c>)
 800c752:	4845      	ldr	r0, [pc, #276]	; (800c868 <__multiply+0x150>)
 800c754:	f240 115d 	movw	r1, #349	; 0x15d
 800c758:	f7fe fc3e 	bl	800afd8 <__assert_func>
 800c75c:	f100 0514 	add.w	r5, r0, #20
 800c760:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c764:	462b      	mov	r3, r5
 800c766:	2200      	movs	r2, #0
 800c768:	4543      	cmp	r3, r8
 800c76a:	d321      	bcc.n	800c7b0 <__multiply+0x98>
 800c76c:	f104 0314 	add.w	r3, r4, #20
 800c770:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c774:	f109 0314 	add.w	r3, r9, #20
 800c778:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c77c:	9202      	str	r2, [sp, #8]
 800c77e:	1b3a      	subs	r2, r7, r4
 800c780:	3a15      	subs	r2, #21
 800c782:	f022 0203 	bic.w	r2, r2, #3
 800c786:	3204      	adds	r2, #4
 800c788:	f104 0115 	add.w	r1, r4, #21
 800c78c:	428f      	cmp	r7, r1
 800c78e:	bf38      	it	cc
 800c790:	2204      	movcc	r2, #4
 800c792:	9201      	str	r2, [sp, #4]
 800c794:	9a02      	ldr	r2, [sp, #8]
 800c796:	9303      	str	r3, [sp, #12]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d80c      	bhi.n	800c7b6 <__multiply+0x9e>
 800c79c:	2e00      	cmp	r6, #0
 800c79e:	dd03      	ble.n	800c7a8 <__multiply+0x90>
 800c7a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d05a      	beq.n	800c85e <__multiply+0x146>
 800c7a8:	6106      	str	r6, [r0, #16]
 800c7aa:	b005      	add	sp, #20
 800c7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b0:	f843 2b04 	str.w	r2, [r3], #4
 800c7b4:	e7d8      	b.n	800c768 <__multiply+0x50>
 800c7b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7ba:	f1ba 0f00 	cmp.w	sl, #0
 800c7be:	d024      	beq.n	800c80a <__multiply+0xf2>
 800c7c0:	f104 0e14 	add.w	lr, r4, #20
 800c7c4:	46a9      	mov	r9, r5
 800c7c6:	f04f 0c00 	mov.w	ip, #0
 800c7ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c7ce:	f8d9 1000 	ldr.w	r1, [r9]
 800c7d2:	fa1f fb82 	uxth.w	fp, r2
 800c7d6:	b289      	uxth	r1, r1
 800c7d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7e0:	f8d9 2000 	ldr.w	r2, [r9]
 800c7e4:	4461      	add	r1, ip
 800c7e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7f2:	b289      	uxth	r1, r1
 800c7f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7f8:	4577      	cmp	r7, lr
 800c7fa:	f849 1b04 	str.w	r1, [r9], #4
 800c7fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c802:	d8e2      	bhi.n	800c7ca <__multiply+0xb2>
 800c804:	9a01      	ldr	r2, [sp, #4]
 800c806:	f845 c002 	str.w	ip, [r5, r2]
 800c80a:	9a03      	ldr	r2, [sp, #12]
 800c80c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c810:	3304      	adds	r3, #4
 800c812:	f1b9 0f00 	cmp.w	r9, #0
 800c816:	d020      	beq.n	800c85a <__multiply+0x142>
 800c818:	6829      	ldr	r1, [r5, #0]
 800c81a:	f104 0c14 	add.w	ip, r4, #20
 800c81e:	46ae      	mov	lr, r5
 800c820:	f04f 0a00 	mov.w	sl, #0
 800c824:	f8bc b000 	ldrh.w	fp, [ip]
 800c828:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c82c:	fb09 220b 	mla	r2, r9, fp, r2
 800c830:	4492      	add	sl, r2
 800c832:	b289      	uxth	r1, r1
 800c834:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c838:	f84e 1b04 	str.w	r1, [lr], #4
 800c83c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c840:	f8be 1000 	ldrh.w	r1, [lr]
 800c844:	0c12      	lsrs	r2, r2, #16
 800c846:	fb09 1102 	mla	r1, r9, r2, r1
 800c84a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c84e:	4567      	cmp	r7, ip
 800c850:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c854:	d8e6      	bhi.n	800c824 <__multiply+0x10c>
 800c856:	9a01      	ldr	r2, [sp, #4]
 800c858:	50a9      	str	r1, [r5, r2]
 800c85a:	3504      	adds	r5, #4
 800c85c:	e79a      	b.n	800c794 <__multiply+0x7c>
 800c85e:	3e01      	subs	r6, #1
 800c860:	e79c      	b.n	800c79c <__multiply+0x84>
 800c862:	bf00      	nop
 800c864:	08010761 	.word	0x08010761
 800c868:	080107ec 	.word	0x080107ec

0800c86c <__pow5mult>:
 800c86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c870:	4615      	mov	r5, r2
 800c872:	f012 0203 	ands.w	r2, r2, #3
 800c876:	4606      	mov	r6, r0
 800c878:	460f      	mov	r7, r1
 800c87a:	d007      	beq.n	800c88c <__pow5mult+0x20>
 800c87c:	4c25      	ldr	r4, [pc, #148]	; (800c914 <__pow5mult+0xa8>)
 800c87e:	3a01      	subs	r2, #1
 800c880:	2300      	movs	r3, #0
 800c882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c886:	f7ff fe51 	bl	800c52c <__multadd>
 800c88a:	4607      	mov	r7, r0
 800c88c:	10ad      	asrs	r5, r5, #2
 800c88e:	d03d      	beq.n	800c90c <__pow5mult+0xa0>
 800c890:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c892:	b97c      	cbnz	r4, 800c8b4 <__pow5mult+0x48>
 800c894:	2010      	movs	r0, #16
 800c896:	f7ff fdbf 	bl	800c418 <malloc>
 800c89a:	4602      	mov	r2, r0
 800c89c:	6270      	str	r0, [r6, #36]	; 0x24
 800c89e:	b928      	cbnz	r0, 800c8ac <__pow5mult+0x40>
 800c8a0:	4b1d      	ldr	r3, [pc, #116]	; (800c918 <__pow5mult+0xac>)
 800c8a2:	481e      	ldr	r0, [pc, #120]	; (800c91c <__pow5mult+0xb0>)
 800c8a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c8a8:	f7fe fb96 	bl	800afd8 <__assert_func>
 800c8ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8b0:	6004      	str	r4, [r0, #0]
 800c8b2:	60c4      	str	r4, [r0, #12]
 800c8b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8bc:	b94c      	cbnz	r4, 800c8d2 <__pow5mult+0x66>
 800c8be:	f240 2171 	movw	r1, #625	; 0x271
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7ff ff12 	bl	800c6ec <__i2b>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	6003      	str	r3, [r0, #0]
 800c8d2:	f04f 0900 	mov.w	r9, #0
 800c8d6:	07eb      	lsls	r3, r5, #31
 800c8d8:	d50a      	bpl.n	800c8f0 <__pow5mult+0x84>
 800c8da:	4639      	mov	r1, r7
 800c8dc:	4622      	mov	r2, r4
 800c8de:	4630      	mov	r0, r6
 800c8e0:	f7ff ff1a 	bl	800c718 <__multiply>
 800c8e4:	4639      	mov	r1, r7
 800c8e6:	4680      	mov	r8, r0
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7ff fdfd 	bl	800c4e8 <_Bfree>
 800c8ee:	4647      	mov	r7, r8
 800c8f0:	106d      	asrs	r5, r5, #1
 800c8f2:	d00b      	beq.n	800c90c <__pow5mult+0xa0>
 800c8f4:	6820      	ldr	r0, [r4, #0]
 800c8f6:	b938      	cbnz	r0, 800c908 <__pow5mult+0x9c>
 800c8f8:	4622      	mov	r2, r4
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	f7ff ff0b 	bl	800c718 <__multiply>
 800c902:	6020      	str	r0, [r4, #0]
 800c904:	f8c0 9000 	str.w	r9, [r0]
 800c908:	4604      	mov	r4, r0
 800c90a:	e7e4      	b.n	800c8d6 <__pow5mult+0x6a>
 800c90c:	4638      	mov	r0, r7
 800c90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c912:	bf00      	nop
 800c914:	08010938 	.word	0x08010938
 800c918:	08010548 	.word	0x08010548
 800c91c:	080107ec 	.word	0x080107ec

0800c920 <__lshift>:
 800c920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c924:	460c      	mov	r4, r1
 800c926:	6849      	ldr	r1, [r1, #4]
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	4607      	mov	r7, r0
 800c932:	4691      	mov	r9, r2
 800c934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c938:	f108 0601 	add.w	r6, r8, #1
 800c93c:	42b3      	cmp	r3, r6
 800c93e:	db0b      	blt.n	800c958 <__lshift+0x38>
 800c940:	4638      	mov	r0, r7
 800c942:	f7ff fd91 	bl	800c468 <_Balloc>
 800c946:	4605      	mov	r5, r0
 800c948:	b948      	cbnz	r0, 800c95e <__lshift+0x3e>
 800c94a:	4602      	mov	r2, r0
 800c94c:	4b2a      	ldr	r3, [pc, #168]	; (800c9f8 <__lshift+0xd8>)
 800c94e:	482b      	ldr	r0, [pc, #172]	; (800c9fc <__lshift+0xdc>)
 800c950:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c954:	f7fe fb40 	bl	800afd8 <__assert_func>
 800c958:	3101      	adds	r1, #1
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	e7ee      	b.n	800c93c <__lshift+0x1c>
 800c95e:	2300      	movs	r3, #0
 800c960:	f100 0114 	add.w	r1, r0, #20
 800c964:	f100 0210 	add.w	r2, r0, #16
 800c968:	4618      	mov	r0, r3
 800c96a:	4553      	cmp	r3, sl
 800c96c:	db37      	blt.n	800c9de <__lshift+0xbe>
 800c96e:	6920      	ldr	r0, [r4, #16]
 800c970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c974:	f104 0314 	add.w	r3, r4, #20
 800c978:	f019 091f 	ands.w	r9, r9, #31
 800c97c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c980:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c984:	d02f      	beq.n	800c9e6 <__lshift+0xc6>
 800c986:	f1c9 0e20 	rsb	lr, r9, #32
 800c98a:	468a      	mov	sl, r1
 800c98c:	f04f 0c00 	mov.w	ip, #0
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	fa02 f209 	lsl.w	r2, r2, r9
 800c996:	ea42 020c 	orr.w	r2, r2, ip
 800c99a:	f84a 2b04 	str.w	r2, [sl], #4
 800c99e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9a2:	4298      	cmp	r0, r3
 800c9a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c9a8:	d8f2      	bhi.n	800c990 <__lshift+0x70>
 800c9aa:	1b03      	subs	r3, r0, r4
 800c9ac:	3b15      	subs	r3, #21
 800c9ae:	f023 0303 	bic.w	r3, r3, #3
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	f104 0215 	add.w	r2, r4, #21
 800c9b8:	4290      	cmp	r0, r2
 800c9ba:	bf38      	it	cc
 800c9bc:	2304      	movcc	r3, #4
 800c9be:	f841 c003 	str.w	ip, [r1, r3]
 800c9c2:	f1bc 0f00 	cmp.w	ip, #0
 800c9c6:	d001      	beq.n	800c9cc <__lshift+0xac>
 800c9c8:	f108 0602 	add.w	r6, r8, #2
 800c9cc:	3e01      	subs	r6, #1
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	612e      	str	r6, [r5, #16]
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	f7ff fd88 	bl	800c4e8 <_Bfree>
 800c9d8:	4628      	mov	r0, r5
 800c9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9de:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	e7c1      	b.n	800c96a <__lshift+0x4a>
 800c9e6:	3904      	subs	r1, #4
 800c9e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9f0:	4298      	cmp	r0, r3
 800c9f2:	d8f9      	bhi.n	800c9e8 <__lshift+0xc8>
 800c9f4:	e7ea      	b.n	800c9cc <__lshift+0xac>
 800c9f6:	bf00      	nop
 800c9f8:	08010761 	.word	0x08010761
 800c9fc:	080107ec 	.word	0x080107ec

0800ca00 <__mcmp>:
 800ca00:	b530      	push	{r4, r5, lr}
 800ca02:	6902      	ldr	r2, [r0, #16]
 800ca04:	690c      	ldr	r4, [r1, #16]
 800ca06:	1b12      	subs	r2, r2, r4
 800ca08:	d10e      	bne.n	800ca28 <__mcmp+0x28>
 800ca0a:	f100 0314 	add.w	r3, r0, #20
 800ca0e:	3114      	adds	r1, #20
 800ca10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca20:	42a5      	cmp	r5, r4
 800ca22:	d003      	beq.n	800ca2c <__mcmp+0x2c>
 800ca24:	d305      	bcc.n	800ca32 <__mcmp+0x32>
 800ca26:	2201      	movs	r2, #1
 800ca28:	4610      	mov	r0, r2
 800ca2a:	bd30      	pop	{r4, r5, pc}
 800ca2c:	4283      	cmp	r3, r0
 800ca2e:	d3f3      	bcc.n	800ca18 <__mcmp+0x18>
 800ca30:	e7fa      	b.n	800ca28 <__mcmp+0x28>
 800ca32:	f04f 32ff 	mov.w	r2, #4294967295
 800ca36:	e7f7      	b.n	800ca28 <__mcmp+0x28>

0800ca38 <__mdiff>:
 800ca38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	4606      	mov	r6, r0
 800ca40:	4611      	mov	r1, r2
 800ca42:	4620      	mov	r0, r4
 800ca44:	4690      	mov	r8, r2
 800ca46:	f7ff ffdb 	bl	800ca00 <__mcmp>
 800ca4a:	1e05      	subs	r5, r0, #0
 800ca4c:	d110      	bne.n	800ca70 <__mdiff+0x38>
 800ca4e:	4629      	mov	r1, r5
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7ff fd09 	bl	800c468 <_Balloc>
 800ca56:	b930      	cbnz	r0, 800ca66 <__mdiff+0x2e>
 800ca58:	4b3a      	ldr	r3, [pc, #232]	; (800cb44 <__mdiff+0x10c>)
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	f240 2132 	movw	r1, #562	; 0x232
 800ca60:	4839      	ldr	r0, [pc, #228]	; (800cb48 <__mdiff+0x110>)
 800ca62:	f7fe fab9 	bl	800afd8 <__assert_func>
 800ca66:	2301      	movs	r3, #1
 800ca68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca70:	bfa4      	itt	ge
 800ca72:	4643      	movge	r3, r8
 800ca74:	46a0      	movge	r8, r4
 800ca76:	4630      	mov	r0, r6
 800ca78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca7c:	bfa6      	itte	ge
 800ca7e:	461c      	movge	r4, r3
 800ca80:	2500      	movge	r5, #0
 800ca82:	2501      	movlt	r5, #1
 800ca84:	f7ff fcf0 	bl	800c468 <_Balloc>
 800ca88:	b920      	cbnz	r0, 800ca94 <__mdiff+0x5c>
 800ca8a:	4b2e      	ldr	r3, [pc, #184]	; (800cb44 <__mdiff+0x10c>)
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca92:	e7e5      	b.n	800ca60 <__mdiff+0x28>
 800ca94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca98:	6926      	ldr	r6, [r4, #16]
 800ca9a:	60c5      	str	r5, [r0, #12]
 800ca9c:	f104 0914 	add.w	r9, r4, #20
 800caa0:	f108 0514 	add.w	r5, r8, #20
 800caa4:	f100 0e14 	add.w	lr, r0, #20
 800caa8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800caac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cab0:	f108 0210 	add.w	r2, r8, #16
 800cab4:	46f2      	mov	sl, lr
 800cab6:	2100      	movs	r1, #0
 800cab8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cabc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cac0:	fa1f f883 	uxth.w	r8, r3
 800cac4:	fa11 f18b 	uxtah	r1, r1, fp
 800cac8:	0c1b      	lsrs	r3, r3, #16
 800caca:	eba1 0808 	sub.w	r8, r1, r8
 800cace:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cad2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cad6:	fa1f f888 	uxth.w	r8, r8
 800cada:	1419      	asrs	r1, r3, #16
 800cadc:	454e      	cmp	r6, r9
 800cade:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cae2:	f84a 3b04 	str.w	r3, [sl], #4
 800cae6:	d8e7      	bhi.n	800cab8 <__mdiff+0x80>
 800cae8:	1b33      	subs	r3, r6, r4
 800caea:	3b15      	subs	r3, #21
 800caec:	f023 0303 	bic.w	r3, r3, #3
 800caf0:	3304      	adds	r3, #4
 800caf2:	3415      	adds	r4, #21
 800caf4:	42a6      	cmp	r6, r4
 800caf6:	bf38      	it	cc
 800caf8:	2304      	movcc	r3, #4
 800cafa:	441d      	add	r5, r3
 800cafc:	4473      	add	r3, lr
 800cafe:	469e      	mov	lr, r3
 800cb00:	462e      	mov	r6, r5
 800cb02:	4566      	cmp	r6, ip
 800cb04:	d30e      	bcc.n	800cb24 <__mdiff+0xec>
 800cb06:	f10c 0203 	add.w	r2, ip, #3
 800cb0a:	1b52      	subs	r2, r2, r5
 800cb0c:	f022 0203 	bic.w	r2, r2, #3
 800cb10:	3d03      	subs	r5, #3
 800cb12:	45ac      	cmp	ip, r5
 800cb14:	bf38      	it	cc
 800cb16:	2200      	movcc	r2, #0
 800cb18:	441a      	add	r2, r3
 800cb1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cb1e:	b17b      	cbz	r3, 800cb40 <__mdiff+0x108>
 800cb20:	6107      	str	r7, [r0, #16]
 800cb22:	e7a3      	b.n	800ca6c <__mdiff+0x34>
 800cb24:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb28:	fa11 f288 	uxtah	r2, r1, r8
 800cb2c:	1414      	asrs	r4, r2, #16
 800cb2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb32:	b292      	uxth	r2, r2
 800cb34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb38:	f84e 2b04 	str.w	r2, [lr], #4
 800cb3c:	1421      	asrs	r1, r4, #16
 800cb3e:	e7e0      	b.n	800cb02 <__mdiff+0xca>
 800cb40:	3f01      	subs	r7, #1
 800cb42:	e7ea      	b.n	800cb1a <__mdiff+0xe2>
 800cb44:	08010761 	.word	0x08010761
 800cb48:	080107ec 	.word	0x080107ec

0800cb4c <__ulp>:
 800cb4c:	b082      	sub	sp, #8
 800cb4e:	ed8d 0b00 	vstr	d0, [sp]
 800cb52:	9b01      	ldr	r3, [sp, #4]
 800cb54:	4912      	ldr	r1, [pc, #72]	; (800cba0 <__ulp+0x54>)
 800cb56:	4019      	ands	r1, r3
 800cb58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cb5c:	2900      	cmp	r1, #0
 800cb5e:	dd05      	ble.n	800cb6c <__ulp+0x20>
 800cb60:	2200      	movs	r2, #0
 800cb62:	460b      	mov	r3, r1
 800cb64:	ec43 2b10 	vmov	d0, r2, r3
 800cb68:	b002      	add	sp, #8
 800cb6a:	4770      	bx	lr
 800cb6c:	4249      	negs	r1, r1
 800cb6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cb72:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cb76:	f04f 0200 	mov.w	r2, #0
 800cb7a:	f04f 0300 	mov.w	r3, #0
 800cb7e:	da04      	bge.n	800cb8a <__ulp+0x3e>
 800cb80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cb84:	fa41 f300 	asr.w	r3, r1, r0
 800cb88:	e7ec      	b.n	800cb64 <__ulp+0x18>
 800cb8a:	f1a0 0114 	sub.w	r1, r0, #20
 800cb8e:	291e      	cmp	r1, #30
 800cb90:	bfda      	itte	le
 800cb92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cb96:	fa20 f101 	lsrle.w	r1, r0, r1
 800cb9a:	2101      	movgt	r1, #1
 800cb9c:	460a      	mov	r2, r1
 800cb9e:	e7e1      	b.n	800cb64 <__ulp+0x18>
 800cba0:	7ff00000 	.word	0x7ff00000

0800cba4 <__b2d>:
 800cba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba6:	6905      	ldr	r5, [r0, #16]
 800cba8:	f100 0714 	add.w	r7, r0, #20
 800cbac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cbb0:	1f2e      	subs	r6, r5, #4
 800cbb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f7ff fd48 	bl	800c64c <__hi0bits>
 800cbbc:	f1c0 0320 	rsb	r3, r0, #32
 800cbc0:	280a      	cmp	r0, #10
 800cbc2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cc40 <__b2d+0x9c>
 800cbc6:	600b      	str	r3, [r1, #0]
 800cbc8:	dc14      	bgt.n	800cbf4 <__b2d+0x50>
 800cbca:	f1c0 0e0b 	rsb	lr, r0, #11
 800cbce:	fa24 f10e 	lsr.w	r1, r4, lr
 800cbd2:	42b7      	cmp	r7, r6
 800cbd4:	ea41 030c 	orr.w	r3, r1, ip
 800cbd8:	bf34      	ite	cc
 800cbda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbde:	2100      	movcs	r1, #0
 800cbe0:	3015      	adds	r0, #21
 800cbe2:	fa04 f000 	lsl.w	r0, r4, r0
 800cbe6:	fa21 f10e 	lsr.w	r1, r1, lr
 800cbea:	ea40 0201 	orr.w	r2, r0, r1
 800cbee:	ec43 2b10 	vmov	d0, r2, r3
 800cbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbf4:	42b7      	cmp	r7, r6
 800cbf6:	bf3a      	itte	cc
 800cbf8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbfc:	f1a5 0608 	subcc.w	r6, r5, #8
 800cc00:	2100      	movcs	r1, #0
 800cc02:	380b      	subs	r0, #11
 800cc04:	d017      	beq.n	800cc36 <__b2d+0x92>
 800cc06:	f1c0 0c20 	rsb	ip, r0, #32
 800cc0a:	fa04 f500 	lsl.w	r5, r4, r0
 800cc0e:	42be      	cmp	r6, r7
 800cc10:	fa21 f40c 	lsr.w	r4, r1, ip
 800cc14:	ea45 0504 	orr.w	r5, r5, r4
 800cc18:	bf8c      	ite	hi
 800cc1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cc1e:	2400      	movls	r4, #0
 800cc20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cc24:	fa01 f000 	lsl.w	r0, r1, r0
 800cc28:	fa24 f40c 	lsr.w	r4, r4, ip
 800cc2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cc30:	ea40 0204 	orr.w	r2, r0, r4
 800cc34:	e7db      	b.n	800cbee <__b2d+0x4a>
 800cc36:	ea44 030c 	orr.w	r3, r4, ip
 800cc3a:	460a      	mov	r2, r1
 800cc3c:	e7d7      	b.n	800cbee <__b2d+0x4a>
 800cc3e:	bf00      	nop
 800cc40:	3ff00000 	.word	0x3ff00000

0800cc44 <__d2b>:
 800cc44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc48:	4689      	mov	r9, r1
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	ec57 6b10 	vmov	r6, r7, d0
 800cc50:	4690      	mov	r8, r2
 800cc52:	f7ff fc09 	bl	800c468 <_Balloc>
 800cc56:	4604      	mov	r4, r0
 800cc58:	b930      	cbnz	r0, 800cc68 <__d2b+0x24>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	4b25      	ldr	r3, [pc, #148]	; (800ccf4 <__d2b+0xb0>)
 800cc5e:	4826      	ldr	r0, [pc, #152]	; (800ccf8 <__d2b+0xb4>)
 800cc60:	f240 310a 	movw	r1, #778	; 0x30a
 800cc64:	f7fe f9b8 	bl	800afd8 <__assert_func>
 800cc68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc70:	bb35      	cbnz	r5, 800ccc0 <__d2b+0x7c>
 800cc72:	2e00      	cmp	r6, #0
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	d028      	beq.n	800ccca <__d2b+0x86>
 800cc78:	4668      	mov	r0, sp
 800cc7a:	9600      	str	r6, [sp, #0]
 800cc7c:	f7ff fd06 	bl	800c68c <__lo0bits>
 800cc80:	9900      	ldr	r1, [sp, #0]
 800cc82:	b300      	cbz	r0, 800ccc6 <__d2b+0x82>
 800cc84:	9a01      	ldr	r2, [sp, #4]
 800cc86:	f1c0 0320 	rsb	r3, r0, #32
 800cc8a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc8e:	430b      	orrs	r3, r1
 800cc90:	40c2      	lsrs	r2, r0
 800cc92:	6163      	str	r3, [r4, #20]
 800cc94:	9201      	str	r2, [sp, #4]
 800cc96:	9b01      	ldr	r3, [sp, #4]
 800cc98:	61a3      	str	r3, [r4, #24]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	bf14      	ite	ne
 800cc9e:	2202      	movne	r2, #2
 800cca0:	2201      	moveq	r2, #1
 800cca2:	6122      	str	r2, [r4, #16]
 800cca4:	b1d5      	cbz	r5, 800ccdc <__d2b+0x98>
 800cca6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ccaa:	4405      	add	r5, r0
 800ccac:	f8c9 5000 	str.w	r5, [r9]
 800ccb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccb4:	f8c8 0000 	str.w	r0, [r8]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	b003      	add	sp, #12
 800ccbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccc4:	e7d5      	b.n	800cc72 <__d2b+0x2e>
 800ccc6:	6161      	str	r1, [r4, #20]
 800ccc8:	e7e5      	b.n	800cc96 <__d2b+0x52>
 800ccca:	a801      	add	r0, sp, #4
 800cccc:	f7ff fcde 	bl	800c68c <__lo0bits>
 800ccd0:	9b01      	ldr	r3, [sp, #4]
 800ccd2:	6163      	str	r3, [r4, #20]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	6122      	str	r2, [r4, #16]
 800ccd8:	3020      	adds	r0, #32
 800ccda:	e7e3      	b.n	800cca4 <__d2b+0x60>
 800ccdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cce0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cce4:	f8c9 0000 	str.w	r0, [r9]
 800cce8:	6918      	ldr	r0, [r3, #16]
 800ccea:	f7ff fcaf 	bl	800c64c <__hi0bits>
 800ccee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccf2:	e7df      	b.n	800ccb4 <__d2b+0x70>
 800ccf4:	08010761 	.word	0x08010761
 800ccf8:	080107ec 	.word	0x080107ec

0800ccfc <__ratio>:
 800ccfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd00:	4688      	mov	r8, r1
 800cd02:	4669      	mov	r1, sp
 800cd04:	4681      	mov	r9, r0
 800cd06:	f7ff ff4d 	bl	800cba4 <__b2d>
 800cd0a:	a901      	add	r1, sp, #4
 800cd0c:	4640      	mov	r0, r8
 800cd0e:	ec55 4b10 	vmov	r4, r5, d0
 800cd12:	f7ff ff47 	bl	800cba4 <__b2d>
 800cd16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd1e:	eba3 0c02 	sub.w	ip, r3, r2
 800cd22:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd26:	1a9b      	subs	r3, r3, r2
 800cd28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd2c:	ec51 0b10 	vmov	r0, r1, d0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	bfd6      	itet	le
 800cd34:	460a      	movle	r2, r1
 800cd36:	462a      	movgt	r2, r5
 800cd38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd3c:	468b      	mov	fp, r1
 800cd3e:	462f      	mov	r7, r5
 800cd40:	bfd4      	ite	le
 800cd42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	ee10 2a10 	vmov	r2, s0
 800cd50:	465b      	mov	r3, fp
 800cd52:	4639      	mov	r1, r7
 800cd54:	f7f3 fd7a 	bl	800084c <__aeabi_ddiv>
 800cd58:	ec41 0b10 	vmov	d0, r0, r1
 800cd5c:	b003      	add	sp, #12
 800cd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd62 <__copybits>:
 800cd62:	3901      	subs	r1, #1
 800cd64:	b570      	push	{r4, r5, r6, lr}
 800cd66:	1149      	asrs	r1, r1, #5
 800cd68:	6914      	ldr	r4, [r2, #16]
 800cd6a:	3101      	adds	r1, #1
 800cd6c:	f102 0314 	add.w	r3, r2, #20
 800cd70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd78:	1f05      	subs	r5, r0, #4
 800cd7a:	42a3      	cmp	r3, r4
 800cd7c:	d30c      	bcc.n	800cd98 <__copybits+0x36>
 800cd7e:	1aa3      	subs	r3, r4, r2
 800cd80:	3b11      	subs	r3, #17
 800cd82:	f023 0303 	bic.w	r3, r3, #3
 800cd86:	3211      	adds	r2, #17
 800cd88:	42a2      	cmp	r2, r4
 800cd8a:	bf88      	it	hi
 800cd8c:	2300      	movhi	r3, #0
 800cd8e:	4418      	add	r0, r3
 800cd90:	2300      	movs	r3, #0
 800cd92:	4288      	cmp	r0, r1
 800cd94:	d305      	bcc.n	800cda2 <__copybits+0x40>
 800cd96:	bd70      	pop	{r4, r5, r6, pc}
 800cd98:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd9c:	f845 6f04 	str.w	r6, [r5, #4]!
 800cda0:	e7eb      	b.n	800cd7a <__copybits+0x18>
 800cda2:	f840 3b04 	str.w	r3, [r0], #4
 800cda6:	e7f4      	b.n	800cd92 <__copybits+0x30>

0800cda8 <__any_on>:
 800cda8:	f100 0214 	add.w	r2, r0, #20
 800cdac:	6900      	ldr	r0, [r0, #16]
 800cdae:	114b      	asrs	r3, r1, #5
 800cdb0:	4298      	cmp	r0, r3
 800cdb2:	b510      	push	{r4, lr}
 800cdb4:	db11      	blt.n	800cdda <__any_on+0x32>
 800cdb6:	dd0a      	ble.n	800cdce <__any_on+0x26>
 800cdb8:	f011 011f 	ands.w	r1, r1, #31
 800cdbc:	d007      	beq.n	800cdce <__any_on+0x26>
 800cdbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cdc2:	fa24 f001 	lsr.w	r0, r4, r1
 800cdc6:	fa00 f101 	lsl.w	r1, r0, r1
 800cdca:	428c      	cmp	r4, r1
 800cdcc:	d10b      	bne.n	800cde6 <__any_on+0x3e>
 800cdce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d803      	bhi.n	800cdde <__any_on+0x36>
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	bd10      	pop	{r4, pc}
 800cdda:	4603      	mov	r3, r0
 800cddc:	e7f7      	b.n	800cdce <__any_on+0x26>
 800cdde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cde2:	2900      	cmp	r1, #0
 800cde4:	d0f5      	beq.n	800cdd2 <__any_on+0x2a>
 800cde6:	2001      	movs	r0, #1
 800cde8:	e7f6      	b.n	800cdd8 <__any_on+0x30>

0800cdea <_calloc_r>:
 800cdea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdec:	fba1 2402 	umull	r2, r4, r1, r2
 800cdf0:	b94c      	cbnz	r4, 800ce06 <_calloc_r+0x1c>
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	9201      	str	r2, [sp, #4]
 800cdf6:	f000 f87b 	bl	800cef0 <_malloc_r>
 800cdfa:	9a01      	ldr	r2, [sp, #4]
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	b930      	cbnz	r0, 800ce0e <_calloc_r+0x24>
 800ce00:	4628      	mov	r0, r5
 800ce02:	b003      	add	sp, #12
 800ce04:	bd30      	pop	{r4, r5, pc}
 800ce06:	220c      	movs	r2, #12
 800ce08:	6002      	str	r2, [r0, #0]
 800ce0a:	2500      	movs	r5, #0
 800ce0c:	e7f8      	b.n	800ce00 <_calloc_r+0x16>
 800ce0e:	4621      	mov	r1, r4
 800ce10:	f7fc fb02 	bl	8009418 <memset>
 800ce14:	e7f4      	b.n	800ce00 <_calloc_r+0x16>
	...

0800ce18 <_free_r>:
 800ce18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce1a:	2900      	cmp	r1, #0
 800ce1c:	d044      	beq.n	800cea8 <_free_r+0x90>
 800ce1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce22:	9001      	str	r0, [sp, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f1a1 0404 	sub.w	r4, r1, #4
 800ce2a:	bfb8      	it	lt
 800ce2c:	18e4      	addlt	r4, r4, r3
 800ce2e:	f000 fec7 	bl	800dbc0 <__malloc_lock>
 800ce32:	4a1e      	ldr	r2, [pc, #120]	; (800ceac <_free_r+0x94>)
 800ce34:	9801      	ldr	r0, [sp, #4]
 800ce36:	6813      	ldr	r3, [r2, #0]
 800ce38:	b933      	cbnz	r3, 800ce48 <_free_r+0x30>
 800ce3a:	6063      	str	r3, [r4, #4]
 800ce3c:	6014      	str	r4, [r2, #0]
 800ce3e:	b003      	add	sp, #12
 800ce40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce44:	f000 bec2 	b.w	800dbcc <__malloc_unlock>
 800ce48:	42a3      	cmp	r3, r4
 800ce4a:	d908      	bls.n	800ce5e <_free_r+0x46>
 800ce4c:	6825      	ldr	r5, [r4, #0]
 800ce4e:	1961      	adds	r1, r4, r5
 800ce50:	428b      	cmp	r3, r1
 800ce52:	bf01      	itttt	eq
 800ce54:	6819      	ldreq	r1, [r3, #0]
 800ce56:	685b      	ldreq	r3, [r3, #4]
 800ce58:	1949      	addeq	r1, r1, r5
 800ce5a:	6021      	streq	r1, [r4, #0]
 800ce5c:	e7ed      	b.n	800ce3a <_free_r+0x22>
 800ce5e:	461a      	mov	r2, r3
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	b10b      	cbz	r3, 800ce68 <_free_r+0x50>
 800ce64:	42a3      	cmp	r3, r4
 800ce66:	d9fa      	bls.n	800ce5e <_free_r+0x46>
 800ce68:	6811      	ldr	r1, [r2, #0]
 800ce6a:	1855      	adds	r5, r2, r1
 800ce6c:	42a5      	cmp	r5, r4
 800ce6e:	d10b      	bne.n	800ce88 <_free_r+0x70>
 800ce70:	6824      	ldr	r4, [r4, #0]
 800ce72:	4421      	add	r1, r4
 800ce74:	1854      	adds	r4, r2, r1
 800ce76:	42a3      	cmp	r3, r4
 800ce78:	6011      	str	r1, [r2, #0]
 800ce7a:	d1e0      	bne.n	800ce3e <_free_r+0x26>
 800ce7c:	681c      	ldr	r4, [r3, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	6053      	str	r3, [r2, #4]
 800ce82:	4421      	add	r1, r4
 800ce84:	6011      	str	r1, [r2, #0]
 800ce86:	e7da      	b.n	800ce3e <_free_r+0x26>
 800ce88:	d902      	bls.n	800ce90 <_free_r+0x78>
 800ce8a:	230c      	movs	r3, #12
 800ce8c:	6003      	str	r3, [r0, #0]
 800ce8e:	e7d6      	b.n	800ce3e <_free_r+0x26>
 800ce90:	6825      	ldr	r5, [r4, #0]
 800ce92:	1961      	adds	r1, r4, r5
 800ce94:	428b      	cmp	r3, r1
 800ce96:	bf04      	itt	eq
 800ce98:	6819      	ldreq	r1, [r3, #0]
 800ce9a:	685b      	ldreq	r3, [r3, #4]
 800ce9c:	6063      	str	r3, [r4, #4]
 800ce9e:	bf04      	itt	eq
 800cea0:	1949      	addeq	r1, r1, r5
 800cea2:	6021      	streq	r1, [r4, #0]
 800cea4:	6054      	str	r4, [r2, #4]
 800cea6:	e7ca      	b.n	800ce3e <_free_r+0x26>
 800cea8:	b003      	add	sp, #12
 800ceaa:	bd30      	pop	{r4, r5, pc}
 800ceac:	20004aa0 	.word	0x20004aa0

0800ceb0 <sbrk_aligned>:
 800ceb0:	b570      	push	{r4, r5, r6, lr}
 800ceb2:	4e0e      	ldr	r6, [pc, #56]	; (800ceec <sbrk_aligned+0x3c>)
 800ceb4:	460c      	mov	r4, r1
 800ceb6:	6831      	ldr	r1, [r6, #0]
 800ceb8:	4605      	mov	r5, r0
 800ceba:	b911      	cbnz	r1, 800cec2 <sbrk_aligned+0x12>
 800cebc:	f000 fb4c 	bl	800d558 <_sbrk_r>
 800cec0:	6030      	str	r0, [r6, #0]
 800cec2:	4621      	mov	r1, r4
 800cec4:	4628      	mov	r0, r5
 800cec6:	f000 fb47 	bl	800d558 <_sbrk_r>
 800ceca:	1c43      	adds	r3, r0, #1
 800cecc:	d00a      	beq.n	800cee4 <sbrk_aligned+0x34>
 800cece:	1cc4      	adds	r4, r0, #3
 800ced0:	f024 0403 	bic.w	r4, r4, #3
 800ced4:	42a0      	cmp	r0, r4
 800ced6:	d007      	beq.n	800cee8 <sbrk_aligned+0x38>
 800ced8:	1a21      	subs	r1, r4, r0
 800ceda:	4628      	mov	r0, r5
 800cedc:	f000 fb3c 	bl	800d558 <_sbrk_r>
 800cee0:	3001      	adds	r0, #1
 800cee2:	d101      	bne.n	800cee8 <sbrk_aligned+0x38>
 800cee4:	f04f 34ff 	mov.w	r4, #4294967295
 800cee8:	4620      	mov	r0, r4
 800ceea:	bd70      	pop	{r4, r5, r6, pc}
 800ceec:	20004aa4 	.word	0x20004aa4

0800cef0 <_malloc_r>:
 800cef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef4:	1ccd      	adds	r5, r1, #3
 800cef6:	f025 0503 	bic.w	r5, r5, #3
 800cefa:	3508      	adds	r5, #8
 800cefc:	2d0c      	cmp	r5, #12
 800cefe:	bf38      	it	cc
 800cf00:	250c      	movcc	r5, #12
 800cf02:	2d00      	cmp	r5, #0
 800cf04:	4607      	mov	r7, r0
 800cf06:	db01      	blt.n	800cf0c <_malloc_r+0x1c>
 800cf08:	42a9      	cmp	r1, r5
 800cf0a:	d905      	bls.n	800cf18 <_malloc_r+0x28>
 800cf0c:	230c      	movs	r3, #12
 800cf0e:	603b      	str	r3, [r7, #0]
 800cf10:	2600      	movs	r6, #0
 800cf12:	4630      	mov	r0, r6
 800cf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf18:	4e2e      	ldr	r6, [pc, #184]	; (800cfd4 <_malloc_r+0xe4>)
 800cf1a:	f000 fe51 	bl	800dbc0 <__malloc_lock>
 800cf1e:	6833      	ldr	r3, [r6, #0]
 800cf20:	461c      	mov	r4, r3
 800cf22:	bb34      	cbnz	r4, 800cf72 <_malloc_r+0x82>
 800cf24:	4629      	mov	r1, r5
 800cf26:	4638      	mov	r0, r7
 800cf28:	f7ff ffc2 	bl	800ceb0 <sbrk_aligned>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	4604      	mov	r4, r0
 800cf30:	d14d      	bne.n	800cfce <_malloc_r+0xde>
 800cf32:	6834      	ldr	r4, [r6, #0]
 800cf34:	4626      	mov	r6, r4
 800cf36:	2e00      	cmp	r6, #0
 800cf38:	d140      	bne.n	800cfbc <_malloc_r+0xcc>
 800cf3a:	6823      	ldr	r3, [r4, #0]
 800cf3c:	4631      	mov	r1, r6
 800cf3e:	4638      	mov	r0, r7
 800cf40:	eb04 0803 	add.w	r8, r4, r3
 800cf44:	f000 fb08 	bl	800d558 <_sbrk_r>
 800cf48:	4580      	cmp	r8, r0
 800cf4a:	d13a      	bne.n	800cfc2 <_malloc_r+0xd2>
 800cf4c:	6821      	ldr	r1, [r4, #0]
 800cf4e:	3503      	adds	r5, #3
 800cf50:	1a6d      	subs	r5, r5, r1
 800cf52:	f025 0503 	bic.w	r5, r5, #3
 800cf56:	3508      	adds	r5, #8
 800cf58:	2d0c      	cmp	r5, #12
 800cf5a:	bf38      	it	cc
 800cf5c:	250c      	movcc	r5, #12
 800cf5e:	4629      	mov	r1, r5
 800cf60:	4638      	mov	r0, r7
 800cf62:	f7ff ffa5 	bl	800ceb0 <sbrk_aligned>
 800cf66:	3001      	adds	r0, #1
 800cf68:	d02b      	beq.n	800cfc2 <_malloc_r+0xd2>
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	442b      	add	r3, r5
 800cf6e:	6023      	str	r3, [r4, #0]
 800cf70:	e00e      	b.n	800cf90 <_malloc_r+0xa0>
 800cf72:	6822      	ldr	r2, [r4, #0]
 800cf74:	1b52      	subs	r2, r2, r5
 800cf76:	d41e      	bmi.n	800cfb6 <_malloc_r+0xc6>
 800cf78:	2a0b      	cmp	r2, #11
 800cf7a:	d916      	bls.n	800cfaa <_malloc_r+0xba>
 800cf7c:	1961      	adds	r1, r4, r5
 800cf7e:	42a3      	cmp	r3, r4
 800cf80:	6025      	str	r5, [r4, #0]
 800cf82:	bf18      	it	ne
 800cf84:	6059      	strne	r1, [r3, #4]
 800cf86:	6863      	ldr	r3, [r4, #4]
 800cf88:	bf08      	it	eq
 800cf8a:	6031      	streq	r1, [r6, #0]
 800cf8c:	5162      	str	r2, [r4, r5]
 800cf8e:	604b      	str	r3, [r1, #4]
 800cf90:	4638      	mov	r0, r7
 800cf92:	f104 060b 	add.w	r6, r4, #11
 800cf96:	f000 fe19 	bl	800dbcc <__malloc_unlock>
 800cf9a:	f026 0607 	bic.w	r6, r6, #7
 800cf9e:	1d23      	adds	r3, r4, #4
 800cfa0:	1af2      	subs	r2, r6, r3
 800cfa2:	d0b6      	beq.n	800cf12 <_malloc_r+0x22>
 800cfa4:	1b9b      	subs	r3, r3, r6
 800cfa6:	50a3      	str	r3, [r4, r2]
 800cfa8:	e7b3      	b.n	800cf12 <_malloc_r+0x22>
 800cfaa:	6862      	ldr	r2, [r4, #4]
 800cfac:	42a3      	cmp	r3, r4
 800cfae:	bf0c      	ite	eq
 800cfb0:	6032      	streq	r2, [r6, #0]
 800cfb2:	605a      	strne	r2, [r3, #4]
 800cfb4:	e7ec      	b.n	800cf90 <_malloc_r+0xa0>
 800cfb6:	4623      	mov	r3, r4
 800cfb8:	6864      	ldr	r4, [r4, #4]
 800cfba:	e7b2      	b.n	800cf22 <_malloc_r+0x32>
 800cfbc:	4634      	mov	r4, r6
 800cfbe:	6876      	ldr	r6, [r6, #4]
 800cfc0:	e7b9      	b.n	800cf36 <_malloc_r+0x46>
 800cfc2:	230c      	movs	r3, #12
 800cfc4:	603b      	str	r3, [r7, #0]
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	f000 fe00 	bl	800dbcc <__malloc_unlock>
 800cfcc:	e7a1      	b.n	800cf12 <_malloc_r+0x22>
 800cfce:	6025      	str	r5, [r4, #0]
 800cfd0:	e7de      	b.n	800cf90 <_malloc_r+0xa0>
 800cfd2:	bf00      	nop
 800cfd4:	20004aa0 	.word	0x20004aa0

0800cfd8 <__ssputs_r>:
 800cfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfdc:	688e      	ldr	r6, [r1, #8]
 800cfde:	429e      	cmp	r6, r3
 800cfe0:	4682      	mov	sl, r0
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	4690      	mov	r8, r2
 800cfe6:	461f      	mov	r7, r3
 800cfe8:	d838      	bhi.n	800d05c <__ssputs_r+0x84>
 800cfea:	898a      	ldrh	r2, [r1, #12]
 800cfec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cff0:	d032      	beq.n	800d058 <__ssputs_r+0x80>
 800cff2:	6825      	ldr	r5, [r4, #0]
 800cff4:	6909      	ldr	r1, [r1, #16]
 800cff6:	eba5 0901 	sub.w	r9, r5, r1
 800cffa:	6965      	ldr	r5, [r4, #20]
 800cffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d000:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d004:	3301      	adds	r3, #1
 800d006:	444b      	add	r3, r9
 800d008:	106d      	asrs	r5, r5, #1
 800d00a:	429d      	cmp	r5, r3
 800d00c:	bf38      	it	cc
 800d00e:	461d      	movcc	r5, r3
 800d010:	0553      	lsls	r3, r2, #21
 800d012:	d531      	bpl.n	800d078 <__ssputs_r+0xa0>
 800d014:	4629      	mov	r1, r5
 800d016:	f7ff ff6b 	bl	800cef0 <_malloc_r>
 800d01a:	4606      	mov	r6, r0
 800d01c:	b950      	cbnz	r0, 800d034 <__ssputs_r+0x5c>
 800d01e:	230c      	movs	r3, #12
 800d020:	f8ca 3000 	str.w	r3, [sl]
 800d024:	89a3      	ldrh	r3, [r4, #12]
 800d026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d02a:	81a3      	strh	r3, [r4, #12]
 800d02c:	f04f 30ff 	mov.w	r0, #4294967295
 800d030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d034:	6921      	ldr	r1, [r4, #16]
 800d036:	464a      	mov	r2, r9
 800d038:	f7ff fa08 	bl	800c44c <memcpy>
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d046:	81a3      	strh	r3, [r4, #12]
 800d048:	6126      	str	r6, [r4, #16]
 800d04a:	6165      	str	r5, [r4, #20]
 800d04c:	444e      	add	r6, r9
 800d04e:	eba5 0509 	sub.w	r5, r5, r9
 800d052:	6026      	str	r6, [r4, #0]
 800d054:	60a5      	str	r5, [r4, #8]
 800d056:	463e      	mov	r6, r7
 800d058:	42be      	cmp	r6, r7
 800d05a:	d900      	bls.n	800d05e <__ssputs_r+0x86>
 800d05c:	463e      	mov	r6, r7
 800d05e:	6820      	ldr	r0, [r4, #0]
 800d060:	4632      	mov	r2, r6
 800d062:	4641      	mov	r1, r8
 800d064:	f000 fd92 	bl	800db8c <memmove>
 800d068:	68a3      	ldr	r3, [r4, #8]
 800d06a:	1b9b      	subs	r3, r3, r6
 800d06c:	60a3      	str	r3, [r4, #8]
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	4433      	add	r3, r6
 800d072:	6023      	str	r3, [r4, #0]
 800d074:	2000      	movs	r0, #0
 800d076:	e7db      	b.n	800d030 <__ssputs_r+0x58>
 800d078:	462a      	mov	r2, r5
 800d07a:	f000 fdad 	bl	800dbd8 <_realloc_r>
 800d07e:	4606      	mov	r6, r0
 800d080:	2800      	cmp	r0, #0
 800d082:	d1e1      	bne.n	800d048 <__ssputs_r+0x70>
 800d084:	6921      	ldr	r1, [r4, #16]
 800d086:	4650      	mov	r0, sl
 800d088:	f7ff fec6 	bl	800ce18 <_free_r>
 800d08c:	e7c7      	b.n	800d01e <__ssputs_r+0x46>
	...

0800d090 <_svfiprintf_r>:
 800d090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d094:	4698      	mov	r8, r3
 800d096:	898b      	ldrh	r3, [r1, #12]
 800d098:	061b      	lsls	r3, r3, #24
 800d09a:	b09d      	sub	sp, #116	; 0x74
 800d09c:	4607      	mov	r7, r0
 800d09e:	460d      	mov	r5, r1
 800d0a0:	4614      	mov	r4, r2
 800d0a2:	d50e      	bpl.n	800d0c2 <_svfiprintf_r+0x32>
 800d0a4:	690b      	ldr	r3, [r1, #16]
 800d0a6:	b963      	cbnz	r3, 800d0c2 <_svfiprintf_r+0x32>
 800d0a8:	2140      	movs	r1, #64	; 0x40
 800d0aa:	f7ff ff21 	bl	800cef0 <_malloc_r>
 800d0ae:	6028      	str	r0, [r5, #0]
 800d0b0:	6128      	str	r0, [r5, #16]
 800d0b2:	b920      	cbnz	r0, 800d0be <_svfiprintf_r+0x2e>
 800d0b4:	230c      	movs	r3, #12
 800d0b6:	603b      	str	r3, [r7, #0]
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0bc:	e0d1      	b.n	800d262 <_svfiprintf_r+0x1d2>
 800d0be:	2340      	movs	r3, #64	; 0x40
 800d0c0:	616b      	str	r3, [r5, #20]
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0c6:	2320      	movs	r3, #32
 800d0c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0d0:	2330      	movs	r3, #48	; 0x30
 800d0d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d27c <_svfiprintf_r+0x1ec>
 800d0d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0da:	f04f 0901 	mov.w	r9, #1
 800d0de:	4623      	mov	r3, r4
 800d0e0:	469a      	mov	sl, r3
 800d0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0e6:	b10a      	cbz	r2, 800d0ec <_svfiprintf_r+0x5c>
 800d0e8:	2a25      	cmp	r2, #37	; 0x25
 800d0ea:	d1f9      	bne.n	800d0e0 <_svfiprintf_r+0x50>
 800d0ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d0f0:	d00b      	beq.n	800d10a <_svfiprintf_r+0x7a>
 800d0f2:	465b      	mov	r3, fp
 800d0f4:	4622      	mov	r2, r4
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f7ff ff6d 	bl	800cfd8 <__ssputs_r>
 800d0fe:	3001      	adds	r0, #1
 800d100:	f000 80aa 	beq.w	800d258 <_svfiprintf_r+0x1c8>
 800d104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d106:	445a      	add	r2, fp
 800d108:	9209      	str	r2, [sp, #36]	; 0x24
 800d10a:	f89a 3000 	ldrb.w	r3, [sl]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f000 80a2 	beq.w	800d258 <_svfiprintf_r+0x1c8>
 800d114:	2300      	movs	r3, #0
 800d116:	f04f 32ff 	mov.w	r2, #4294967295
 800d11a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d11e:	f10a 0a01 	add.w	sl, sl, #1
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	9307      	str	r3, [sp, #28]
 800d126:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d12a:	931a      	str	r3, [sp, #104]	; 0x68
 800d12c:	4654      	mov	r4, sl
 800d12e:	2205      	movs	r2, #5
 800d130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d134:	4851      	ldr	r0, [pc, #324]	; (800d27c <_svfiprintf_r+0x1ec>)
 800d136:	f7f3 f853 	bl	80001e0 <memchr>
 800d13a:	9a04      	ldr	r2, [sp, #16]
 800d13c:	b9d8      	cbnz	r0, 800d176 <_svfiprintf_r+0xe6>
 800d13e:	06d0      	lsls	r0, r2, #27
 800d140:	bf44      	itt	mi
 800d142:	2320      	movmi	r3, #32
 800d144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d148:	0711      	lsls	r1, r2, #28
 800d14a:	bf44      	itt	mi
 800d14c:	232b      	movmi	r3, #43	; 0x2b
 800d14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d152:	f89a 3000 	ldrb.w	r3, [sl]
 800d156:	2b2a      	cmp	r3, #42	; 0x2a
 800d158:	d015      	beq.n	800d186 <_svfiprintf_r+0xf6>
 800d15a:	9a07      	ldr	r2, [sp, #28]
 800d15c:	4654      	mov	r4, sl
 800d15e:	2000      	movs	r0, #0
 800d160:	f04f 0c0a 	mov.w	ip, #10
 800d164:	4621      	mov	r1, r4
 800d166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d16a:	3b30      	subs	r3, #48	; 0x30
 800d16c:	2b09      	cmp	r3, #9
 800d16e:	d94e      	bls.n	800d20e <_svfiprintf_r+0x17e>
 800d170:	b1b0      	cbz	r0, 800d1a0 <_svfiprintf_r+0x110>
 800d172:	9207      	str	r2, [sp, #28]
 800d174:	e014      	b.n	800d1a0 <_svfiprintf_r+0x110>
 800d176:	eba0 0308 	sub.w	r3, r0, r8
 800d17a:	fa09 f303 	lsl.w	r3, r9, r3
 800d17e:	4313      	orrs	r3, r2
 800d180:	9304      	str	r3, [sp, #16]
 800d182:	46a2      	mov	sl, r4
 800d184:	e7d2      	b.n	800d12c <_svfiprintf_r+0x9c>
 800d186:	9b03      	ldr	r3, [sp, #12]
 800d188:	1d19      	adds	r1, r3, #4
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	9103      	str	r1, [sp, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	bfbb      	ittet	lt
 800d192:	425b      	neglt	r3, r3
 800d194:	f042 0202 	orrlt.w	r2, r2, #2
 800d198:	9307      	strge	r3, [sp, #28]
 800d19a:	9307      	strlt	r3, [sp, #28]
 800d19c:	bfb8      	it	lt
 800d19e:	9204      	strlt	r2, [sp, #16]
 800d1a0:	7823      	ldrb	r3, [r4, #0]
 800d1a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d1a4:	d10c      	bne.n	800d1c0 <_svfiprintf_r+0x130>
 800d1a6:	7863      	ldrb	r3, [r4, #1]
 800d1a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1aa:	d135      	bne.n	800d218 <_svfiprintf_r+0x188>
 800d1ac:	9b03      	ldr	r3, [sp, #12]
 800d1ae:	1d1a      	adds	r2, r3, #4
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	9203      	str	r2, [sp, #12]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	bfb8      	it	lt
 800d1b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1bc:	3402      	adds	r4, #2
 800d1be:	9305      	str	r3, [sp, #20]
 800d1c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d28c <_svfiprintf_r+0x1fc>
 800d1c4:	7821      	ldrb	r1, [r4, #0]
 800d1c6:	2203      	movs	r2, #3
 800d1c8:	4650      	mov	r0, sl
 800d1ca:	f7f3 f809 	bl	80001e0 <memchr>
 800d1ce:	b140      	cbz	r0, 800d1e2 <_svfiprintf_r+0x152>
 800d1d0:	2340      	movs	r3, #64	; 0x40
 800d1d2:	eba0 000a 	sub.w	r0, r0, sl
 800d1d6:	fa03 f000 	lsl.w	r0, r3, r0
 800d1da:	9b04      	ldr	r3, [sp, #16]
 800d1dc:	4303      	orrs	r3, r0
 800d1de:	3401      	adds	r4, #1
 800d1e0:	9304      	str	r3, [sp, #16]
 800d1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e6:	4826      	ldr	r0, [pc, #152]	; (800d280 <_svfiprintf_r+0x1f0>)
 800d1e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1ec:	2206      	movs	r2, #6
 800d1ee:	f7f2 fff7 	bl	80001e0 <memchr>
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d038      	beq.n	800d268 <_svfiprintf_r+0x1d8>
 800d1f6:	4b23      	ldr	r3, [pc, #140]	; (800d284 <_svfiprintf_r+0x1f4>)
 800d1f8:	bb1b      	cbnz	r3, 800d242 <_svfiprintf_r+0x1b2>
 800d1fa:	9b03      	ldr	r3, [sp, #12]
 800d1fc:	3307      	adds	r3, #7
 800d1fe:	f023 0307 	bic.w	r3, r3, #7
 800d202:	3308      	adds	r3, #8
 800d204:	9303      	str	r3, [sp, #12]
 800d206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d208:	4433      	add	r3, r6
 800d20a:	9309      	str	r3, [sp, #36]	; 0x24
 800d20c:	e767      	b.n	800d0de <_svfiprintf_r+0x4e>
 800d20e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d212:	460c      	mov	r4, r1
 800d214:	2001      	movs	r0, #1
 800d216:	e7a5      	b.n	800d164 <_svfiprintf_r+0xd4>
 800d218:	2300      	movs	r3, #0
 800d21a:	3401      	adds	r4, #1
 800d21c:	9305      	str	r3, [sp, #20]
 800d21e:	4619      	mov	r1, r3
 800d220:	f04f 0c0a 	mov.w	ip, #10
 800d224:	4620      	mov	r0, r4
 800d226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d22a:	3a30      	subs	r2, #48	; 0x30
 800d22c:	2a09      	cmp	r2, #9
 800d22e:	d903      	bls.n	800d238 <_svfiprintf_r+0x1a8>
 800d230:	2b00      	cmp	r3, #0
 800d232:	d0c5      	beq.n	800d1c0 <_svfiprintf_r+0x130>
 800d234:	9105      	str	r1, [sp, #20]
 800d236:	e7c3      	b.n	800d1c0 <_svfiprintf_r+0x130>
 800d238:	fb0c 2101 	mla	r1, ip, r1, r2
 800d23c:	4604      	mov	r4, r0
 800d23e:	2301      	movs	r3, #1
 800d240:	e7f0      	b.n	800d224 <_svfiprintf_r+0x194>
 800d242:	ab03      	add	r3, sp, #12
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	462a      	mov	r2, r5
 800d248:	4b0f      	ldr	r3, [pc, #60]	; (800d288 <_svfiprintf_r+0x1f8>)
 800d24a:	a904      	add	r1, sp, #16
 800d24c:	4638      	mov	r0, r7
 800d24e:	f7fc f98b 	bl	8009568 <_printf_float>
 800d252:	1c42      	adds	r2, r0, #1
 800d254:	4606      	mov	r6, r0
 800d256:	d1d6      	bne.n	800d206 <_svfiprintf_r+0x176>
 800d258:	89ab      	ldrh	r3, [r5, #12]
 800d25a:	065b      	lsls	r3, r3, #25
 800d25c:	f53f af2c 	bmi.w	800d0b8 <_svfiprintf_r+0x28>
 800d260:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d262:	b01d      	add	sp, #116	; 0x74
 800d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d268:	ab03      	add	r3, sp, #12
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	462a      	mov	r2, r5
 800d26e:	4b06      	ldr	r3, [pc, #24]	; (800d288 <_svfiprintf_r+0x1f8>)
 800d270:	a904      	add	r1, sp, #16
 800d272:	4638      	mov	r0, r7
 800d274:	f7fc fc1c 	bl	8009ab0 <_printf_i>
 800d278:	e7eb      	b.n	800d252 <_svfiprintf_r+0x1c2>
 800d27a:	bf00      	nop
 800d27c:	08010944 	.word	0x08010944
 800d280:	0801094e 	.word	0x0801094e
 800d284:	08009569 	.word	0x08009569
 800d288:	0800cfd9 	.word	0x0800cfd9
 800d28c:	0801094a 	.word	0x0801094a

0800d290 <__sfputc_r>:
 800d290:	6893      	ldr	r3, [r2, #8]
 800d292:	3b01      	subs	r3, #1
 800d294:	2b00      	cmp	r3, #0
 800d296:	b410      	push	{r4}
 800d298:	6093      	str	r3, [r2, #8]
 800d29a:	da08      	bge.n	800d2ae <__sfputc_r+0x1e>
 800d29c:	6994      	ldr	r4, [r2, #24]
 800d29e:	42a3      	cmp	r3, r4
 800d2a0:	db01      	blt.n	800d2a6 <__sfputc_r+0x16>
 800d2a2:	290a      	cmp	r1, #10
 800d2a4:	d103      	bne.n	800d2ae <__sfputc_r+0x1e>
 800d2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2aa:	f000 b979 	b.w	800d5a0 <__swbuf_r>
 800d2ae:	6813      	ldr	r3, [r2, #0]
 800d2b0:	1c58      	adds	r0, r3, #1
 800d2b2:	6010      	str	r0, [r2, #0]
 800d2b4:	7019      	strb	r1, [r3, #0]
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2bc:	4770      	bx	lr

0800d2be <__sfputs_r>:
 800d2be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	460f      	mov	r7, r1
 800d2c4:	4614      	mov	r4, r2
 800d2c6:	18d5      	adds	r5, r2, r3
 800d2c8:	42ac      	cmp	r4, r5
 800d2ca:	d101      	bne.n	800d2d0 <__sfputs_r+0x12>
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	e007      	b.n	800d2e0 <__sfputs_r+0x22>
 800d2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2d4:	463a      	mov	r2, r7
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	f7ff ffda 	bl	800d290 <__sfputc_r>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d1f3      	bne.n	800d2c8 <__sfputs_r+0xa>
 800d2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d2e4 <_vfiprintf_r>:
 800d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e8:	460d      	mov	r5, r1
 800d2ea:	b09d      	sub	sp, #116	; 0x74
 800d2ec:	4614      	mov	r4, r2
 800d2ee:	4698      	mov	r8, r3
 800d2f0:	4606      	mov	r6, r0
 800d2f2:	b118      	cbz	r0, 800d2fc <_vfiprintf_r+0x18>
 800d2f4:	6983      	ldr	r3, [r0, #24]
 800d2f6:	b90b      	cbnz	r3, 800d2fc <_vfiprintf_r+0x18>
 800d2f8:	f000 fb42 	bl	800d980 <__sinit>
 800d2fc:	4b89      	ldr	r3, [pc, #548]	; (800d524 <_vfiprintf_r+0x240>)
 800d2fe:	429d      	cmp	r5, r3
 800d300:	d11b      	bne.n	800d33a <_vfiprintf_r+0x56>
 800d302:	6875      	ldr	r5, [r6, #4]
 800d304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d306:	07d9      	lsls	r1, r3, #31
 800d308:	d405      	bmi.n	800d316 <_vfiprintf_r+0x32>
 800d30a:	89ab      	ldrh	r3, [r5, #12]
 800d30c:	059a      	lsls	r2, r3, #22
 800d30e:	d402      	bmi.n	800d316 <_vfiprintf_r+0x32>
 800d310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d312:	f000 fbd3 	bl	800dabc <__retarget_lock_acquire_recursive>
 800d316:	89ab      	ldrh	r3, [r5, #12]
 800d318:	071b      	lsls	r3, r3, #28
 800d31a:	d501      	bpl.n	800d320 <_vfiprintf_r+0x3c>
 800d31c:	692b      	ldr	r3, [r5, #16]
 800d31e:	b9eb      	cbnz	r3, 800d35c <_vfiprintf_r+0x78>
 800d320:	4629      	mov	r1, r5
 800d322:	4630      	mov	r0, r6
 800d324:	f000 f99c 	bl	800d660 <__swsetup_r>
 800d328:	b1c0      	cbz	r0, 800d35c <_vfiprintf_r+0x78>
 800d32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d32c:	07dc      	lsls	r4, r3, #31
 800d32e:	d50e      	bpl.n	800d34e <_vfiprintf_r+0x6a>
 800d330:	f04f 30ff 	mov.w	r0, #4294967295
 800d334:	b01d      	add	sp, #116	; 0x74
 800d336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33a:	4b7b      	ldr	r3, [pc, #492]	; (800d528 <_vfiprintf_r+0x244>)
 800d33c:	429d      	cmp	r5, r3
 800d33e:	d101      	bne.n	800d344 <_vfiprintf_r+0x60>
 800d340:	68b5      	ldr	r5, [r6, #8]
 800d342:	e7df      	b.n	800d304 <_vfiprintf_r+0x20>
 800d344:	4b79      	ldr	r3, [pc, #484]	; (800d52c <_vfiprintf_r+0x248>)
 800d346:	429d      	cmp	r5, r3
 800d348:	bf08      	it	eq
 800d34a:	68f5      	ldreq	r5, [r6, #12]
 800d34c:	e7da      	b.n	800d304 <_vfiprintf_r+0x20>
 800d34e:	89ab      	ldrh	r3, [r5, #12]
 800d350:	0598      	lsls	r0, r3, #22
 800d352:	d4ed      	bmi.n	800d330 <_vfiprintf_r+0x4c>
 800d354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d356:	f000 fbb2 	bl	800dabe <__retarget_lock_release_recursive>
 800d35a:	e7e9      	b.n	800d330 <_vfiprintf_r+0x4c>
 800d35c:	2300      	movs	r3, #0
 800d35e:	9309      	str	r3, [sp, #36]	; 0x24
 800d360:	2320      	movs	r3, #32
 800d362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d366:	f8cd 800c 	str.w	r8, [sp, #12]
 800d36a:	2330      	movs	r3, #48	; 0x30
 800d36c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d530 <_vfiprintf_r+0x24c>
 800d370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d374:	f04f 0901 	mov.w	r9, #1
 800d378:	4623      	mov	r3, r4
 800d37a:	469a      	mov	sl, r3
 800d37c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d380:	b10a      	cbz	r2, 800d386 <_vfiprintf_r+0xa2>
 800d382:	2a25      	cmp	r2, #37	; 0x25
 800d384:	d1f9      	bne.n	800d37a <_vfiprintf_r+0x96>
 800d386:	ebba 0b04 	subs.w	fp, sl, r4
 800d38a:	d00b      	beq.n	800d3a4 <_vfiprintf_r+0xc0>
 800d38c:	465b      	mov	r3, fp
 800d38e:	4622      	mov	r2, r4
 800d390:	4629      	mov	r1, r5
 800d392:	4630      	mov	r0, r6
 800d394:	f7ff ff93 	bl	800d2be <__sfputs_r>
 800d398:	3001      	adds	r0, #1
 800d39a:	f000 80aa 	beq.w	800d4f2 <_vfiprintf_r+0x20e>
 800d39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3a0:	445a      	add	r2, fp
 800d3a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f000 80a2 	beq.w	800d4f2 <_vfiprintf_r+0x20e>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3b8:	f10a 0a01 	add.w	sl, sl, #1
 800d3bc:	9304      	str	r3, [sp, #16]
 800d3be:	9307      	str	r3, [sp, #28]
 800d3c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3c4:	931a      	str	r3, [sp, #104]	; 0x68
 800d3c6:	4654      	mov	r4, sl
 800d3c8:	2205      	movs	r2, #5
 800d3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ce:	4858      	ldr	r0, [pc, #352]	; (800d530 <_vfiprintf_r+0x24c>)
 800d3d0:	f7f2 ff06 	bl	80001e0 <memchr>
 800d3d4:	9a04      	ldr	r2, [sp, #16]
 800d3d6:	b9d8      	cbnz	r0, 800d410 <_vfiprintf_r+0x12c>
 800d3d8:	06d1      	lsls	r1, r2, #27
 800d3da:	bf44      	itt	mi
 800d3dc:	2320      	movmi	r3, #32
 800d3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3e2:	0713      	lsls	r3, r2, #28
 800d3e4:	bf44      	itt	mi
 800d3e6:	232b      	movmi	r3, #43	; 0x2b
 800d3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f2:	d015      	beq.n	800d420 <_vfiprintf_r+0x13c>
 800d3f4:	9a07      	ldr	r2, [sp, #28]
 800d3f6:	4654      	mov	r4, sl
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	f04f 0c0a 	mov.w	ip, #10
 800d3fe:	4621      	mov	r1, r4
 800d400:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d404:	3b30      	subs	r3, #48	; 0x30
 800d406:	2b09      	cmp	r3, #9
 800d408:	d94e      	bls.n	800d4a8 <_vfiprintf_r+0x1c4>
 800d40a:	b1b0      	cbz	r0, 800d43a <_vfiprintf_r+0x156>
 800d40c:	9207      	str	r2, [sp, #28]
 800d40e:	e014      	b.n	800d43a <_vfiprintf_r+0x156>
 800d410:	eba0 0308 	sub.w	r3, r0, r8
 800d414:	fa09 f303 	lsl.w	r3, r9, r3
 800d418:	4313      	orrs	r3, r2
 800d41a:	9304      	str	r3, [sp, #16]
 800d41c:	46a2      	mov	sl, r4
 800d41e:	e7d2      	b.n	800d3c6 <_vfiprintf_r+0xe2>
 800d420:	9b03      	ldr	r3, [sp, #12]
 800d422:	1d19      	adds	r1, r3, #4
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	9103      	str	r1, [sp, #12]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	bfbb      	ittet	lt
 800d42c:	425b      	neglt	r3, r3
 800d42e:	f042 0202 	orrlt.w	r2, r2, #2
 800d432:	9307      	strge	r3, [sp, #28]
 800d434:	9307      	strlt	r3, [sp, #28]
 800d436:	bfb8      	it	lt
 800d438:	9204      	strlt	r2, [sp, #16]
 800d43a:	7823      	ldrb	r3, [r4, #0]
 800d43c:	2b2e      	cmp	r3, #46	; 0x2e
 800d43e:	d10c      	bne.n	800d45a <_vfiprintf_r+0x176>
 800d440:	7863      	ldrb	r3, [r4, #1]
 800d442:	2b2a      	cmp	r3, #42	; 0x2a
 800d444:	d135      	bne.n	800d4b2 <_vfiprintf_r+0x1ce>
 800d446:	9b03      	ldr	r3, [sp, #12]
 800d448:	1d1a      	adds	r2, r3, #4
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	9203      	str	r2, [sp, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	bfb8      	it	lt
 800d452:	f04f 33ff 	movlt.w	r3, #4294967295
 800d456:	3402      	adds	r4, #2
 800d458:	9305      	str	r3, [sp, #20]
 800d45a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d540 <_vfiprintf_r+0x25c>
 800d45e:	7821      	ldrb	r1, [r4, #0]
 800d460:	2203      	movs	r2, #3
 800d462:	4650      	mov	r0, sl
 800d464:	f7f2 febc 	bl	80001e0 <memchr>
 800d468:	b140      	cbz	r0, 800d47c <_vfiprintf_r+0x198>
 800d46a:	2340      	movs	r3, #64	; 0x40
 800d46c:	eba0 000a 	sub.w	r0, r0, sl
 800d470:	fa03 f000 	lsl.w	r0, r3, r0
 800d474:	9b04      	ldr	r3, [sp, #16]
 800d476:	4303      	orrs	r3, r0
 800d478:	3401      	adds	r4, #1
 800d47a:	9304      	str	r3, [sp, #16]
 800d47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d480:	482c      	ldr	r0, [pc, #176]	; (800d534 <_vfiprintf_r+0x250>)
 800d482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d486:	2206      	movs	r2, #6
 800d488:	f7f2 feaa 	bl	80001e0 <memchr>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d03f      	beq.n	800d510 <_vfiprintf_r+0x22c>
 800d490:	4b29      	ldr	r3, [pc, #164]	; (800d538 <_vfiprintf_r+0x254>)
 800d492:	bb1b      	cbnz	r3, 800d4dc <_vfiprintf_r+0x1f8>
 800d494:	9b03      	ldr	r3, [sp, #12]
 800d496:	3307      	adds	r3, #7
 800d498:	f023 0307 	bic.w	r3, r3, #7
 800d49c:	3308      	adds	r3, #8
 800d49e:	9303      	str	r3, [sp, #12]
 800d4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a2:	443b      	add	r3, r7
 800d4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a6:	e767      	b.n	800d378 <_vfiprintf_r+0x94>
 800d4a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4ac:	460c      	mov	r4, r1
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	e7a5      	b.n	800d3fe <_vfiprintf_r+0x11a>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	3401      	adds	r4, #1
 800d4b6:	9305      	str	r3, [sp, #20]
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	f04f 0c0a 	mov.w	ip, #10
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c4:	3a30      	subs	r2, #48	; 0x30
 800d4c6:	2a09      	cmp	r2, #9
 800d4c8:	d903      	bls.n	800d4d2 <_vfiprintf_r+0x1ee>
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d0c5      	beq.n	800d45a <_vfiprintf_r+0x176>
 800d4ce:	9105      	str	r1, [sp, #20]
 800d4d0:	e7c3      	b.n	800d45a <_vfiprintf_r+0x176>
 800d4d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e7f0      	b.n	800d4be <_vfiprintf_r+0x1da>
 800d4dc:	ab03      	add	r3, sp, #12
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	462a      	mov	r2, r5
 800d4e2:	4b16      	ldr	r3, [pc, #88]	; (800d53c <_vfiprintf_r+0x258>)
 800d4e4:	a904      	add	r1, sp, #16
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	f7fc f83e 	bl	8009568 <_printf_float>
 800d4ec:	4607      	mov	r7, r0
 800d4ee:	1c78      	adds	r0, r7, #1
 800d4f0:	d1d6      	bne.n	800d4a0 <_vfiprintf_r+0x1bc>
 800d4f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4f4:	07d9      	lsls	r1, r3, #31
 800d4f6:	d405      	bmi.n	800d504 <_vfiprintf_r+0x220>
 800d4f8:	89ab      	ldrh	r3, [r5, #12]
 800d4fa:	059a      	lsls	r2, r3, #22
 800d4fc:	d402      	bmi.n	800d504 <_vfiprintf_r+0x220>
 800d4fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d500:	f000 fadd 	bl	800dabe <__retarget_lock_release_recursive>
 800d504:	89ab      	ldrh	r3, [r5, #12]
 800d506:	065b      	lsls	r3, r3, #25
 800d508:	f53f af12 	bmi.w	800d330 <_vfiprintf_r+0x4c>
 800d50c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d50e:	e711      	b.n	800d334 <_vfiprintf_r+0x50>
 800d510:	ab03      	add	r3, sp, #12
 800d512:	9300      	str	r3, [sp, #0]
 800d514:	462a      	mov	r2, r5
 800d516:	4b09      	ldr	r3, [pc, #36]	; (800d53c <_vfiprintf_r+0x258>)
 800d518:	a904      	add	r1, sp, #16
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7fc fac8 	bl	8009ab0 <_printf_i>
 800d520:	e7e4      	b.n	800d4ec <_vfiprintf_r+0x208>
 800d522:	bf00      	nop
 800d524:	08010978 	.word	0x08010978
 800d528:	08010998 	.word	0x08010998
 800d52c:	08010958 	.word	0x08010958
 800d530:	08010944 	.word	0x08010944
 800d534:	0801094e 	.word	0x0801094e
 800d538:	08009569 	.word	0x08009569
 800d53c:	0800d2bf 	.word	0x0800d2bf
 800d540:	0801094a 	.word	0x0801094a
 800d544:	00000000 	.word	0x00000000

0800d548 <nan>:
 800d548:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d550 <nan+0x8>
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	00000000 	.word	0x00000000
 800d554:	7ff80000 	.word	0x7ff80000

0800d558 <_sbrk_r>:
 800d558:	b538      	push	{r3, r4, r5, lr}
 800d55a:	4d06      	ldr	r5, [pc, #24]	; (800d574 <_sbrk_r+0x1c>)
 800d55c:	2300      	movs	r3, #0
 800d55e:	4604      	mov	r4, r0
 800d560:	4608      	mov	r0, r1
 800d562:	602b      	str	r3, [r5, #0]
 800d564:	f7f5 ffe0 	bl	8003528 <_sbrk>
 800d568:	1c43      	adds	r3, r0, #1
 800d56a:	d102      	bne.n	800d572 <_sbrk_r+0x1a>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	b103      	cbz	r3, 800d572 <_sbrk_r+0x1a>
 800d570:	6023      	str	r3, [r4, #0]
 800d572:	bd38      	pop	{r3, r4, r5, pc}
 800d574:	20004aac 	.word	0x20004aac

0800d578 <strncmp>:
 800d578:	b510      	push	{r4, lr}
 800d57a:	b17a      	cbz	r2, 800d59c <strncmp+0x24>
 800d57c:	4603      	mov	r3, r0
 800d57e:	3901      	subs	r1, #1
 800d580:	1884      	adds	r4, r0, r2
 800d582:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d586:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d58a:	4290      	cmp	r0, r2
 800d58c:	d101      	bne.n	800d592 <strncmp+0x1a>
 800d58e:	42a3      	cmp	r3, r4
 800d590:	d101      	bne.n	800d596 <strncmp+0x1e>
 800d592:	1a80      	subs	r0, r0, r2
 800d594:	bd10      	pop	{r4, pc}
 800d596:	2800      	cmp	r0, #0
 800d598:	d1f3      	bne.n	800d582 <strncmp+0xa>
 800d59a:	e7fa      	b.n	800d592 <strncmp+0x1a>
 800d59c:	4610      	mov	r0, r2
 800d59e:	e7f9      	b.n	800d594 <strncmp+0x1c>

0800d5a0 <__swbuf_r>:
 800d5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a2:	460e      	mov	r6, r1
 800d5a4:	4614      	mov	r4, r2
 800d5a6:	4605      	mov	r5, r0
 800d5a8:	b118      	cbz	r0, 800d5b2 <__swbuf_r+0x12>
 800d5aa:	6983      	ldr	r3, [r0, #24]
 800d5ac:	b90b      	cbnz	r3, 800d5b2 <__swbuf_r+0x12>
 800d5ae:	f000 f9e7 	bl	800d980 <__sinit>
 800d5b2:	4b21      	ldr	r3, [pc, #132]	; (800d638 <__swbuf_r+0x98>)
 800d5b4:	429c      	cmp	r4, r3
 800d5b6:	d12b      	bne.n	800d610 <__swbuf_r+0x70>
 800d5b8:	686c      	ldr	r4, [r5, #4]
 800d5ba:	69a3      	ldr	r3, [r4, #24]
 800d5bc:	60a3      	str	r3, [r4, #8]
 800d5be:	89a3      	ldrh	r3, [r4, #12]
 800d5c0:	071a      	lsls	r2, r3, #28
 800d5c2:	d52f      	bpl.n	800d624 <__swbuf_r+0x84>
 800d5c4:	6923      	ldr	r3, [r4, #16]
 800d5c6:	b36b      	cbz	r3, 800d624 <__swbuf_r+0x84>
 800d5c8:	6923      	ldr	r3, [r4, #16]
 800d5ca:	6820      	ldr	r0, [r4, #0]
 800d5cc:	1ac0      	subs	r0, r0, r3
 800d5ce:	6963      	ldr	r3, [r4, #20]
 800d5d0:	b2f6      	uxtb	r6, r6
 800d5d2:	4283      	cmp	r3, r0
 800d5d4:	4637      	mov	r7, r6
 800d5d6:	dc04      	bgt.n	800d5e2 <__swbuf_r+0x42>
 800d5d8:	4621      	mov	r1, r4
 800d5da:	4628      	mov	r0, r5
 800d5dc:	f000 f93c 	bl	800d858 <_fflush_r>
 800d5e0:	bb30      	cbnz	r0, 800d630 <__swbuf_r+0x90>
 800d5e2:	68a3      	ldr	r3, [r4, #8]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	60a3      	str	r3, [r4, #8]
 800d5e8:	6823      	ldr	r3, [r4, #0]
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	6022      	str	r2, [r4, #0]
 800d5ee:	701e      	strb	r6, [r3, #0]
 800d5f0:	6963      	ldr	r3, [r4, #20]
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	4283      	cmp	r3, r0
 800d5f6:	d004      	beq.n	800d602 <__swbuf_r+0x62>
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	07db      	lsls	r3, r3, #31
 800d5fc:	d506      	bpl.n	800d60c <__swbuf_r+0x6c>
 800d5fe:	2e0a      	cmp	r6, #10
 800d600:	d104      	bne.n	800d60c <__swbuf_r+0x6c>
 800d602:	4621      	mov	r1, r4
 800d604:	4628      	mov	r0, r5
 800d606:	f000 f927 	bl	800d858 <_fflush_r>
 800d60a:	b988      	cbnz	r0, 800d630 <__swbuf_r+0x90>
 800d60c:	4638      	mov	r0, r7
 800d60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d610:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <__swbuf_r+0x9c>)
 800d612:	429c      	cmp	r4, r3
 800d614:	d101      	bne.n	800d61a <__swbuf_r+0x7a>
 800d616:	68ac      	ldr	r4, [r5, #8]
 800d618:	e7cf      	b.n	800d5ba <__swbuf_r+0x1a>
 800d61a:	4b09      	ldr	r3, [pc, #36]	; (800d640 <__swbuf_r+0xa0>)
 800d61c:	429c      	cmp	r4, r3
 800d61e:	bf08      	it	eq
 800d620:	68ec      	ldreq	r4, [r5, #12]
 800d622:	e7ca      	b.n	800d5ba <__swbuf_r+0x1a>
 800d624:	4621      	mov	r1, r4
 800d626:	4628      	mov	r0, r5
 800d628:	f000 f81a 	bl	800d660 <__swsetup_r>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d0cb      	beq.n	800d5c8 <__swbuf_r+0x28>
 800d630:	f04f 37ff 	mov.w	r7, #4294967295
 800d634:	e7ea      	b.n	800d60c <__swbuf_r+0x6c>
 800d636:	bf00      	nop
 800d638:	08010978 	.word	0x08010978
 800d63c:	08010998 	.word	0x08010998
 800d640:	08010958 	.word	0x08010958

0800d644 <__ascii_wctomb>:
 800d644:	b149      	cbz	r1, 800d65a <__ascii_wctomb+0x16>
 800d646:	2aff      	cmp	r2, #255	; 0xff
 800d648:	bf85      	ittet	hi
 800d64a:	238a      	movhi	r3, #138	; 0x8a
 800d64c:	6003      	strhi	r3, [r0, #0]
 800d64e:	700a      	strbls	r2, [r1, #0]
 800d650:	f04f 30ff 	movhi.w	r0, #4294967295
 800d654:	bf98      	it	ls
 800d656:	2001      	movls	r0, #1
 800d658:	4770      	bx	lr
 800d65a:	4608      	mov	r0, r1
 800d65c:	4770      	bx	lr
	...

0800d660 <__swsetup_r>:
 800d660:	4b32      	ldr	r3, [pc, #200]	; (800d72c <__swsetup_r+0xcc>)
 800d662:	b570      	push	{r4, r5, r6, lr}
 800d664:	681d      	ldr	r5, [r3, #0]
 800d666:	4606      	mov	r6, r0
 800d668:	460c      	mov	r4, r1
 800d66a:	b125      	cbz	r5, 800d676 <__swsetup_r+0x16>
 800d66c:	69ab      	ldr	r3, [r5, #24]
 800d66e:	b913      	cbnz	r3, 800d676 <__swsetup_r+0x16>
 800d670:	4628      	mov	r0, r5
 800d672:	f000 f985 	bl	800d980 <__sinit>
 800d676:	4b2e      	ldr	r3, [pc, #184]	; (800d730 <__swsetup_r+0xd0>)
 800d678:	429c      	cmp	r4, r3
 800d67a:	d10f      	bne.n	800d69c <__swsetup_r+0x3c>
 800d67c:	686c      	ldr	r4, [r5, #4]
 800d67e:	89a3      	ldrh	r3, [r4, #12]
 800d680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d684:	0719      	lsls	r1, r3, #28
 800d686:	d42c      	bmi.n	800d6e2 <__swsetup_r+0x82>
 800d688:	06dd      	lsls	r5, r3, #27
 800d68a:	d411      	bmi.n	800d6b0 <__swsetup_r+0x50>
 800d68c:	2309      	movs	r3, #9
 800d68e:	6033      	str	r3, [r6, #0]
 800d690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d694:	81a3      	strh	r3, [r4, #12]
 800d696:	f04f 30ff 	mov.w	r0, #4294967295
 800d69a:	e03e      	b.n	800d71a <__swsetup_r+0xba>
 800d69c:	4b25      	ldr	r3, [pc, #148]	; (800d734 <__swsetup_r+0xd4>)
 800d69e:	429c      	cmp	r4, r3
 800d6a0:	d101      	bne.n	800d6a6 <__swsetup_r+0x46>
 800d6a2:	68ac      	ldr	r4, [r5, #8]
 800d6a4:	e7eb      	b.n	800d67e <__swsetup_r+0x1e>
 800d6a6:	4b24      	ldr	r3, [pc, #144]	; (800d738 <__swsetup_r+0xd8>)
 800d6a8:	429c      	cmp	r4, r3
 800d6aa:	bf08      	it	eq
 800d6ac:	68ec      	ldreq	r4, [r5, #12]
 800d6ae:	e7e6      	b.n	800d67e <__swsetup_r+0x1e>
 800d6b0:	0758      	lsls	r0, r3, #29
 800d6b2:	d512      	bpl.n	800d6da <__swsetup_r+0x7a>
 800d6b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6b6:	b141      	cbz	r1, 800d6ca <__swsetup_r+0x6a>
 800d6b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6bc:	4299      	cmp	r1, r3
 800d6be:	d002      	beq.n	800d6c6 <__swsetup_r+0x66>
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	f7ff fba9 	bl	800ce18 <_free_r>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	6363      	str	r3, [r4, #52]	; 0x34
 800d6ca:	89a3      	ldrh	r3, [r4, #12]
 800d6cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6d0:	81a3      	strh	r3, [r4, #12]
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	6063      	str	r3, [r4, #4]
 800d6d6:	6923      	ldr	r3, [r4, #16]
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	89a3      	ldrh	r3, [r4, #12]
 800d6dc:	f043 0308 	orr.w	r3, r3, #8
 800d6e0:	81a3      	strh	r3, [r4, #12]
 800d6e2:	6923      	ldr	r3, [r4, #16]
 800d6e4:	b94b      	cbnz	r3, 800d6fa <__swsetup_r+0x9a>
 800d6e6:	89a3      	ldrh	r3, [r4, #12]
 800d6e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6f0:	d003      	beq.n	800d6fa <__swsetup_r+0x9a>
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	f000 fa09 	bl	800db0c <__smakebuf_r>
 800d6fa:	89a0      	ldrh	r0, [r4, #12]
 800d6fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d700:	f010 0301 	ands.w	r3, r0, #1
 800d704:	d00a      	beq.n	800d71c <__swsetup_r+0xbc>
 800d706:	2300      	movs	r3, #0
 800d708:	60a3      	str	r3, [r4, #8]
 800d70a:	6963      	ldr	r3, [r4, #20]
 800d70c:	425b      	negs	r3, r3
 800d70e:	61a3      	str	r3, [r4, #24]
 800d710:	6923      	ldr	r3, [r4, #16]
 800d712:	b943      	cbnz	r3, 800d726 <__swsetup_r+0xc6>
 800d714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d718:	d1ba      	bne.n	800d690 <__swsetup_r+0x30>
 800d71a:	bd70      	pop	{r4, r5, r6, pc}
 800d71c:	0781      	lsls	r1, r0, #30
 800d71e:	bf58      	it	pl
 800d720:	6963      	ldrpl	r3, [r4, #20]
 800d722:	60a3      	str	r3, [r4, #8]
 800d724:	e7f4      	b.n	800d710 <__swsetup_r+0xb0>
 800d726:	2000      	movs	r0, #0
 800d728:	e7f7      	b.n	800d71a <__swsetup_r+0xba>
 800d72a:	bf00      	nop
 800d72c:	200000ec 	.word	0x200000ec
 800d730:	08010978 	.word	0x08010978
 800d734:	08010998 	.word	0x08010998
 800d738:	08010958 	.word	0x08010958

0800d73c <abort>:
 800d73c:	b508      	push	{r3, lr}
 800d73e:	2006      	movs	r0, #6
 800d740:	f000 faa2 	bl	800dc88 <raise>
 800d744:	2001      	movs	r0, #1
 800d746:	f7f5 fe77 	bl	8003438 <_exit>
	...

0800d74c <__sflush_r>:
 800d74c:	898a      	ldrh	r2, [r1, #12]
 800d74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d752:	4605      	mov	r5, r0
 800d754:	0710      	lsls	r0, r2, #28
 800d756:	460c      	mov	r4, r1
 800d758:	d458      	bmi.n	800d80c <__sflush_r+0xc0>
 800d75a:	684b      	ldr	r3, [r1, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dc05      	bgt.n	800d76c <__sflush_r+0x20>
 800d760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d762:	2b00      	cmp	r3, #0
 800d764:	dc02      	bgt.n	800d76c <__sflush_r+0x20>
 800d766:	2000      	movs	r0, #0
 800d768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d76e:	2e00      	cmp	r6, #0
 800d770:	d0f9      	beq.n	800d766 <__sflush_r+0x1a>
 800d772:	2300      	movs	r3, #0
 800d774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d778:	682f      	ldr	r7, [r5, #0]
 800d77a:	602b      	str	r3, [r5, #0]
 800d77c:	d032      	beq.n	800d7e4 <__sflush_r+0x98>
 800d77e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d780:	89a3      	ldrh	r3, [r4, #12]
 800d782:	075a      	lsls	r2, r3, #29
 800d784:	d505      	bpl.n	800d792 <__sflush_r+0x46>
 800d786:	6863      	ldr	r3, [r4, #4]
 800d788:	1ac0      	subs	r0, r0, r3
 800d78a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d78c:	b10b      	cbz	r3, 800d792 <__sflush_r+0x46>
 800d78e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d790:	1ac0      	subs	r0, r0, r3
 800d792:	2300      	movs	r3, #0
 800d794:	4602      	mov	r2, r0
 800d796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d798:	6a21      	ldr	r1, [r4, #32]
 800d79a:	4628      	mov	r0, r5
 800d79c:	47b0      	blx	r6
 800d79e:	1c43      	adds	r3, r0, #1
 800d7a0:	89a3      	ldrh	r3, [r4, #12]
 800d7a2:	d106      	bne.n	800d7b2 <__sflush_r+0x66>
 800d7a4:	6829      	ldr	r1, [r5, #0]
 800d7a6:	291d      	cmp	r1, #29
 800d7a8:	d82c      	bhi.n	800d804 <__sflush_r+0xb8>
 800d7aa:	4a2a      	ldr	r2, [pc, #168]	; (800d854 <__sflush_r+0x108>)
 800d7ac:	40ca      	lsrs	r2, r1
 800d7ae:	07d6      	lsls	r6, r2, #31
 800d7b0:	d528      	bpl.n	800d804 <__sflush_r+0xb8>
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	6062      	str	r2, [r4, #4]
 800d7b6:	04d9      	lsls	r1, r3, #19
 800d7b8:	6922      	ldr	r2, [r4, #16]
 800d7ba:	6022      	str	r2, [r4, #0]
 800d7bc:	d504      	bpl.n	800d7c8 <__sflush_r+0x7c>
 800d7be:	1c42      	adds	r2, r0, #1
 800d7c0:	d101      	bne.n	800d7c6 <__sflush_r+0x7a>
 800d7c2:	682b      	ldr	r3, [r5, #0]
 800d7c4:	b903      	cbnz	r3, 800d7c8 <__sflush_r+0x7c>
 800d7c6:	6560      	str	r0, [r4, #84]	; 0x54
 800d7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7ca:	602f      	str	r7, [r5, #0]
 800d7cc:	2900      	cmp	r1, #0
 800d7ce:	d0ca      	beq.n	800d766 <__sflush_r+0x1a>
 800d7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7d4:	4299      	cmp	r1, r3
 800d7d6:	d002      	beq.n	800d7de <__sflush_r+0x92>
 800d7d8:	4628      	mov	r0, r5
 800d7da:	f7ff fb1d 	bl	800ce18 <_free_r>
 800d7de:	2000      	movs	r0, #0
 800d7e0:	6360      	str	r0, [r4, #52]	; 0x34
 800d7e2:	e7c1      	b.n	800d768 <__sflush_r+0x1c>
 800d7e4:	6a21      	ldr	r1, [r4, #32]
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	47b0      	blx	r6
 800d7ec:	1c41      	adds	r1, r0, #1
 800d7ee:	d1c7      	bne.n	800d780 <__sflush_r+0x34>
 800d7f0:	682b      	ldr	r3, [r5, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d0c4      	beq.n	800d780 <__sflush_r+0x34>
 800d7f6:	2b1d      	cmp	r3, #29
 800d7f8:	d001      	beq.n	800d7fe <__sflush_r+0xb2>
 800d7fa:	2b16      	cmp	r3, #22
 800d7fc:	d101      	bne.n	800d802 <__sflush_r+0xb6>
 800d7fe:	602f      	str	r7, [r5, #0]
 800d800:	e7b1      	b.n	800d766 <__sflush_r+0x1a>
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d808:	81a3      	strh	r3, [r4, #12]
 800d80a:	e7ad      	b.n	800d768 <__sflush_r+0x1c>
 800d80c:	690f      	ldr	r7, [r1, #16]
 800d80e:	2f00      	cmp	r7, #0
 800d810:	d0a9      	beq.n	800d766 <__sflush_r+0x1a>
 800d812:	0793      	lsls	r3, r2, #30
 800d814:	680e      	ldr	r6, [r1, #0]
 800d816:	bf08      	it	eq
 800d818:	694b      	ldreq	r3, [r1, #20]
 800d81a:	600f      	str	r7, [r1, #0]
 800d81c:	bf18      	it	ne
 800d81e:	2300      	movne	r3, #0
 800d820:	eba6 0807 	sub.w	r8, r6, r7
 800d824:	608b      	str	r3, [r1, #8]
 800d826:	f1b8 0f00 	cmp.w	r8, #0
 800d82a:	dd9c      	ble.n	800d766 <__sflush_r+0x1a>
 800d82c:	6a21      	ldr	r1, [r4, #32]
 800d82e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d830:	4643      	mov	r3, r8
 800d832:	463a      	mov	r2, r7
 800d834:	4628      	mov	r0, r5
 800d836:	47b0      	blx	r6
 800d838:	2800      	cmp	r0, #0
 800d83a:	dc06      	bgt.n	800d84a <__sflush_r+0xfe>
 800d83c:	89a3      	ldrh	r3, [r4, #12]
 800d83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d842:	81a3      	strh	r3, [r4, #12]
 800d844:	f04f 30ff 	mov.w	r0, #4294967295
 800d848:	e78e      	b.n	800d768 <__sflush_r+0x1c>
 800d84a:	4407      	add	r7, r0
 800d84c:	eba8 0800 	sub.w	r8, r8, r0
 800d850:	e7e9      	b.n	800d826 <__sflush_r+0xda>
 800d852:	bf00      	nop
 800d854:	20400001 	.word	0x20400001

0800d858 <_fflush_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	690b      	ldr	r3, [r1, #16]
 800d85c:	4605      	mov	r5, r0
 800d85e:	460c      	mov	r4, r1
 800d860:	b913      	cbnz	r3, 800d868 <_fflush_r+0x10>
 800d862:	2500      	movs	r5, #0
 800d864:	4628      	mov	r0, r5
 800d866:	bd38      	pop	{r3, r4, r5, pc}
 800d868:	b118      	cbz	r0, 800d872 <_fflush_r+0x1a>
 800d86a:	6983      	ldr	r3, [r0, #24]
 800d86c:	b90b      	cbnz	r3, 800d872 <_fflush_r+0x1a>
 800d86e:	f000 f887 	bl	800d980 <__sinit>
 800d872:	4b14      	ldr	r3, [pc, #80]	; (800d8c4 <_fflush_r+0x6c>)
 800d874:	429c      	cmp	r4, r3
 800d876:	d11b      	bne.n	800d8b0 <_fflush_r+0x58>
 800d878:	686c      	ldr	r4, [r5, #4]
 800d87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0ef      	beq.n	800d862 <_fflush_r+0xa>
 800d882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d884:	07d0      	lsls	r0, r2, #31
 800d886:	d404      	bmi.n	800d892 <_fflush_r+0x3a>
 800d888:	0599      	lsls	r1, r3, #22
 800d88a:	d402      	bmi.n	800d892 <_fflush_r+0x3a>
 800d88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d88e:	f000 f915 	bl	800dabc <__retarget_lock_acquire_recursive>
 800d892:	4628      	mov	r0, r5
 800d894:	4621      	mov	r1, r4
 800d896:	f7ff ff59 	bl	800d74c <__sflush_r>
 800d89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d89c:	07da      	lsls	r2, r3, #31
 800d89e:	4605      	mov	r5, r0
 800d8a0:	d4e0      	bmi.n	800d864 <_fflush_r+0xc>
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	059b      	lsls	r3, r3, #22
 800d8a6:	d4dd      	bmi.n	800d864 <_fflush_r+0xc>
 800d8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8aa:	f000 f908 	bl	800dabe <__retarget_lock_release_recursive>
 800d8ae:	e7d9      	b.n	800d864 <_fflush_r+0xc>
 800d8b0:	4b05      	ldr	r3, [pc, #20]	; (800d8c8 <_fflush_r+0x70>)
 800d8b2:	429c      	cmp	r4, r3
 800d8b4:	d101      	bne.n	800d8ba <_fflush_r+0x62>
 800d8b6:	68ac      	ldr	r4, [r5, #8]
 800d8b8:	e7df      	b.n	800d87a <_fflush_r+0x22>
 800d8ba:	4b04      	ldr	r3, [pc, #16]	; (800d8cc <_fflush_r+0x74>)
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	bf08      	it	eq
 800d8c0:	68ec      	ldreq	r4, [r5, #12]
 800d8c2:	e7da      	b.n	800d87a <_fflush_r+0x22>
 800d8c4:	08010978 	.word	0x08010978
 800d8c8:	08010998 	.word	0x08010998
 800d8cc:	08010958 	.word	0x08010958

0800d8d0 <std>:
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	b510      	push	{r4, lr}
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	e9c0 3300 	strd	r3, r3, [r0]
 800d8da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8de:	6083      	str	r3, [r0, #8]
 800d8e0:	8181      	strh	r1, [r0, #12]
 800d8e2:	6643      	str	r3, [r0, #100]	; 0x64
 800d8e4:	81c2      	strh	r2, [r0, #14]
 800d8e6:	6183      	str	r3, [r0, #24]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	2208      	movs	r2, #8
 800d8ec:	305c      	adds	r0, #92	; 0x5c
 800d8ee:	f7fb fd93 	bl	8009418 <memset>
 800d8f2:	4b05      	ldr	r3, [pc, #20]	; (800d908 <std+0x38>)
 800d8f4:	6263      	str	r3, [r4, #36]	; 0x24
 800d8f6:	4b05      	ldr	r3, [pc, #20]	; (800d90c <std+0x3c>)
 800d8f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8fa:	4b05      	ldr	r3, [pc, #20]	; (800d910 <std+0x40>)
 800d8fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8fe:	4b05      	ldr	r3, [pc, #20]	; (800d914 <std+0x44>)
 800d900:	6224      	str	r4, [r4, #32]
 800d902:	6323      	str	r3, [r4, #48]	; 0x30
 800d904:	bd10      	pop	{r4, pc}
 800d906:	bf00      	nop
 800d908:	0800dcc1 	.word	0x0800dcc1
 800d90c:	0800dce3 	.word	0x0800dce3
 800d910:	0800dd1b 	.word	0x0800dd1b
 800d914:	0800dd3f 	.word	0x0800dd3f

0800d918 <_cleanup_r>:
 800d918:	4901      	ldr	r1, [pc, #4]	; (800d920 <_cleanup_r+0x8>)
 800d91a:	f000 b8af 	b.w	800da7c <_fwalk_reent>
 800d91e:	bf00      	nop
 800d920:	0800d859 	.word	0x0800d859

0800d924 <__sfmoreglue>:
 800d924:	b570      	push	{r4, r5, r6, lr}
 800d926:	2268      	movs	r2, #104	; 0x68
 800d928:	1e4d      	subs	r5, r1, #1
 800d92a:	4355      	muls	r5, r2
 800d92c:	460e      	mov	r6, r1
 800d92e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d932:	f7ff fadd 	bl	800cef0 <_malloc_r>
 800d936:	4604      	mov	r4, r0
 800d938:	b140      	cbz	r0, 800d94c <__sfmoreglue+0x28>
 800d93a:	2100      	movs	r1, #0
 800d93c:	e9c0 1600 	strd	r1, r6, [r0]
 800d940:	300c      	adds	r0, #12
 800d942:	60a0      	str	r0, [r4, #8]
 800d944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d948:	f7fb fd66 	bl	8009418 <memset>
 800d94c:	4620      	mov	r0, r4
 800d94e:	bd70      	pop	{r4, r5, r6, pc}

0800d950 <__sfp_lock_acquire>:
 800d950:	4801      	ldr	r0, [pc, #4]	; (800d958 <__sfp_lock_acquire+0x8>)
 800d952:	f000 b8b3 	b.w	800dabc <__retarget_lock_acquire_recursive>
 800d956:	bf00      	nop
 800d958:	20004aa9 	.word	0x20004aa9

0800d95c <__sfp_lock_release>:
 800d95c:	4801      	ldr	r0, [pc, #4]	; (800d964 <__sfp_lock_release+0x8>)
 800d95e:	f000 b8ae 	b.w	800dabe <__retarget_lock_release_recursive>
 800d962:	bf00      	nop
 800d964:	20004aa9 	.word	0x20004aa9

0800d968 <__sinit_lock_acquire>:
 800d968:	4801      	ldr	r0, [pc, #4]	; (800d970 <__sinit_lock_acquire+0x8>)
 800d96a:	f000 b8a7 	b.w	800dabc <__retarget_lock_acquire_recursive>
 800d96e:	bf00      	nop
 800d970:	20004aaa 	.word	0x20004aaa

0800d974 <__sinit_lock_release>:
 800d974:	4801      	ldr	r0, [pc, #4]	; (800d97c <__sinit_lock_release+0x8>)
 800d976:	f000 b8a2 	b.w	800dabe <__retarget_lock_release_recursive>
 800d97a:	bf00      	nop
 800d97c:	20004aaa 	.word	0x20004aaa

0800d980 <__sinit>:
 800d980:	b510      	push	{r4, lr}
 800d982:	4604      	mov	r4, r0
 800d984:	f7ff fff0 	bl	800d968 <__sinit_lock_acquire>
 800d988:	69a3      	ldr	r3, [r4, #24]
 800d98a:	b11b      	cbz	r3, 800d994 <__sinit+0x14>
 800d98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d990:	f7ff bff0 	b.w	800d974 <__sinit_lock_release>
 800d994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d998:	6523      	str	r3, [r4, #80]	; 0x50
 800d99a:	4b13      	ldr	r3, [pc, #76]	; (800d9e8 <__sinit+0x68>)
 800d99c:	4a13      	ldr	r2, [pc, #76]	; (800d9ec <__sinit+0x6c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d9a2:	42a3      	cmp	r3, r4
 800d9a4:	bf04      	itt	eq
 800d9a6:	2301      	moveq	r3, #1
 800d9a8:	61a3      	streq	r3, [r4, #24]
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f000 f820 	bl	800d9f0 <__sfp>
 800d9b0:	6060      	str	r0, [r4, #4]
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f000 f81c 	bl	800d9f0 <__sfp>
 800d9b8:	60a0      	str	r0, [r4, #8]
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f000 f818 	bl	800d9f0 <__sfp>
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	60e0      	str	r0, [r4, #12]
 800d9c4:	2104      	movs	r1, #4
 800d9c6:	6860      	ldr	r0, [r4, #4]
 800d9c8:	f7ff ff82 	bl	800d8d0 <std>
 800d9cc:	68a0      	ldr	r0, [r4, #8]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	2109      	movs	r1, #9
 800d9d2:	f7ff ff7d 	bl	800d8d0 <std>
 800d9d6:	68e0      	ldr	r0, [r4, #12]
 800d9d8:	2202      	movs	r2, #2
 800d9da:	2112      	movs	r1, #18
 800d9dc:	f7ff ff78 	bl	800d8d0 <std>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	61a3      	str	r3, [r4, #24]
 800d9e4:	e7d2      	b.n	800d98c <__sinit+0xc>
 800d9e6:	bf00      	nop
 800d9e8:	080104b8 	.word	0x080104b8
 800d9ec:	0800d919 	.word	0x0800d919

0800d9f0 <__sfp>:
 800d9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f2:	4607      	mov	r7, r0
 800d9f4:	f7ff ffac 	bl	800d950 <__sfp_lock_acquire>
 800d9f8:	4b1e      	ldr	r3, [pc, #120]	; (800da74 <__sfp+0x84>)
 800d9fa:	681e      	ldr	r6, [r3, #0]
 800d9fc:	69b3      	ldr	r3, [r6, #24]
 800d9fe:	b913      	cbnz	r3, 800da06 <__sfp+0x16>
 800da00:	4630      	mov	r0, r6
 800da02:	f7ff ffbd 	bl	800d980 <__sinit>
 800da06:	3648      	adds	r6, #72	; 0x48
 800da08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800da0c:	3b01      	subs	r3, #1
 800da0e:	d503      	bpl.n	800da18 <__sfp+0x28>
 800da10:	6833      	ldr	r3, [r6, #0]
 800da12:	b30b      	cbz	r3, 800da58 <__sfp+0x68>
 800da14:	6836      	ldr	r6, [r6, #0]
 800da16:	e7f7      	b.n	800da08 <__sfp+0x18>
 800da18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da1c:	b9d5      	cbnz	r5, 800da54 <__sfp+0x64>
 800da1e:	4b16      	ldr	r3, [pc, #88]	; (800da78 <__sfp+0x88>)
 800da20:	60e3      	str	r3, [r4, #12]
 800da22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da26:	6665      	str	r5, [r4, #100]	; 0x64
 800da28:	f000 f847 	bl	800daba <__retarget_lock_init_recursive>
 800da2c:	f7ff ff96 	bl	800d95c <__sfp_lock_release>
 800da30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da38:	6025      	str	r5, [r4, #0]
 800da3a:	61a5      	str	r5, [r4, #24]
 800da3c:	2208      	movs	r2, #8
 800da3e:	4629      	mov	r1, r5
 800da40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da44:	f7fb fce8 	bl	8009418 <memset>
 800da48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da50:	4620      	mov	r0, r4
 800da52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da54:	3468      	adds	r4, #104	; 0x68
 800da56:	e7d9      	b.n	800da0c <__sfp+0x1c>
 800da58:	2104      	movs	r1, #4
 800da5a:	4638      	mov	r0, r7
 800da5c:	f7ff ff62 	bl	800d924 <__sfmoreglue>
 800da60:	4604      	mov	r4, r0
 800da62:	6030      	str	r0, [r6, #0]
 800da64:	2800      	cmp	r0, #0
 800da66:	d1d5      	bne.n	800da14 <__sfp+0x24>
 800da68:	f7ff ff78 	bl	800d95c <__sfp_lock_release>
 800da6c:	230c      	movs	r3, #12
 800da6e:	603b      	str	r3, [r7, #0]
 800da70:	e7ee      	b.n	800da50 <__sfp+0x60>
 800da72:	bf00      	nop
 800da74:	080104b8 	.word	0x080104b8
 800da78:	ffff0001 	.word	0xffff0001

0800da7c <_fwalk_reent>:
 800da7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da80:	4606      	mov	r6, r0
 800da82:	4688      	mov	r8, r1
 800da84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800da88:	2700      	movs	r7, #0
 800da8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da8e:	f1b9 0901 	subs.w	r9, r9, #1
 800da92:	d505      	bpl.n	800daa0 <_fwalk_reent+0x24>
 800da94:	6824      	ldr	r4, [r4, #0]
 800da96:	2c00      	cmp	r4, #0
 800da98:	d1f7      	bne.n	800da8a <_fwalk_reent+0xe>
 800da9a:	4638      	mov	r0, r7
 800da9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa0:	89ab      	ldrh	r3, [r5, #12]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d907      	bls.n	800dab6 <_fwalk_reent+0x3a>
 800daa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800daaa:	3301      	adds	r3, #1
 800daac:	d003      	beq.n	800dab6 <_fwalk_reent+0x3a>
 800daae:	4629      	mov	r1, r5
 800dab0:	4630      	mov	r0, r6
 800dab2:	47c0      	blx	r8
 800dab4:	4307      	orrs	r7, r0
 800dab6:	3568      	adds	r5, #104	; 0x68
 800dab8:	e7e9      	b.n	800da8e <_fwalk_reent+0x12>

0800daba <__retarget_lock_init_recursive>:
 800daba:	4770      	bx	lr

0800dabc <__retarget_lock_acquire_recursive>:
 800dabc:	4770      	bx	lr

0800dabe <__retarget_lock_release_recursive>:
 800dabe:	4770      	bx	lr

0800dac0 <__swhatbuf_r>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	460e      	mov	r6, r1
 800dac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dac8:	2900      	cmp	r1, #0
 800daca:	b096      	sub	sp, #88	; 0x58
 800dacc:	4614      	mov	r4, r2
 800dace:	461d      	mov	r5, r3
 800dad0:	da08      	bge.n	800dae4 <__swhatbuf_r+0x24>
 800dad2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dad6:	2200      	movs	r2, #0
 800dad8:	602a      	str	r2, [r5, #0]
 800dada:	061a      	lsls	r2, r3, #24
 800dadc:	d410      	bmi.n	800db00 <__swhatbuf_r+0x40>
 800dade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dae2:	e00e      	b.n	800db02 <__swhatbuf_r+0x42>
 800dae4:	466a      	mov	r2, sp
 800dae6:	f000 f951 	bl	800dd8c <_fstat_r>
 800daea:	2800      	cmp	r0, #0
 800daec:	dbf1      	blt.n	800dad2 <__swhatbuf_r+0x12>
 800daee:	9a01      	ldr	r2, [sp, #4]
 800daf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800daf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800daf8:	425a      	negs	r2, r3
 800dafa:	415a      	adcs	r2, r3
 800dafc:	602a      	str	r2, [r5, #0]
 800dafe:	e7ee      	b.n	800dade <__swhatbuf_r+0x1e>
 800db00:	2340      	movs	r3, #64	; 0x40
 800db02:	2000      	movs	r0, #0
 800db04:	6023      	str	r3, [r4, #0]
 800db06:	b016      	add	sp, #88	; 0x58
 800db08:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db0c <__smakebuf_r>:
 800db0c:	898b      	ldrh	r3, [r1, #12]
 800db0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db10:	079d      	lsls	r5, r3, #30
 800db12:	4606      	mov	r6, r0
 800db14:	460c      	mov	r4, r1
 800db16:	d507      	bpl.n	800db28 <__smakebuf_r+0x1c>
 800db18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	6123      	str	r3, [r4, #16]
 800db20:	2301      	movs	r3, #1
 800db22:	6163      	str	r3, [r4, #20]
 800db24:	b002      	add	sp, #8
 800db26:	bd70      	pop	{r4, r5, r6, pc}
 800db28:	ab01      	add	r3, sp, #4
 800db2a:	466a      	mov	r2, sp
 800db2c:	f7ff ffc8 	bl	800dac0 <__swhatbuf_r>
 800db30:	9900      	ldr	r1, [sp, #0]
 800db32:	4605      	mov	r5, r0
 800db34:	4630      	mov	r0, r6
 800db36:	f7ff f9db 	bl	800cef0 <_malloc_r>
 800db3a:	b948      	cbnz	r0, 800db50 <__smakebuf_r+0x44>
 800db3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db40:	059a      	lsls	r2, r3, #22
 800db42:	d4ef      	bmi.n	800db24 <__smakebuf_r+0x18>
 800db44:	f023 0303 	bic.w	r3, r3, #3
 800db48:	f043 0302 	orr.w	r3, r3, #2
 800db4c:	81a3      	strh	r3, [r4, #12]
 800db4e:	e7e3      	b.n	800db18 <__smakebuf_r+0xc>
 800db50:	4b0d      	ldr	r3, [pc, #52]	; (800db88 <__smakebuf_r+0x7c>)
 800db52:	62b3      	str	r3, [r6, #40]	; 0x28
 800db54:	89a3      	ldrh	r3, [r4, #12]
 800db56:	6020      	str	r0, [r4, #0]
 800db58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db5c:	81a3      	strh	r3, [r4, #12]
 800db5e:	9b00      	ldr	r3, [sp, #0]
 800db60:	6163      	str	r3, [r4, #20]
 800db62:	9b01      	ldr	r3, [sp, #4]
 800db64:	6120      	str	r0, [r4, #16]
 800db66:	b15b      	cbz	r3, 800db80 <__smakebuf_r+0x74>
 800db68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db6c:	4630      	mov	r0, r6
 800db6e:	f000 f91f 	bl	800ddb0 <_isatty_r>
 800db72:	b128      	cbz	r0, 800db80 <__smakebuf_r+0x74>
 800db74:	89a3      	ldrh	r3, [r4, #12]
 800db76:	f023 0303 	bic.w	r3, r3, #3
 800db7a:	f043 0301 	orr.w	r3, r3, #1
 800db7e:	81a3      	strh	r3, [r4, #12]
 800db80:	89a0      	ldrh	r0, [r4, #12]
 800db82:	4305      	orrs	r5, r0
 800db84:	81a5      	strh	r5, [r4, #12]
 800db86:	e7cd      	b.n	800db24 <__smakebuf_r+0x18>
 800db88:	0800d919 	.word	0x0800d919

0800db8c <memmove>:
 800db8c:	4288      	cmp	r0, r1
 800db8e:	b510      	push	{r4, lr}
 800db90:	eb01 0402 	add.w	r4, r1, r2
 800db94:	d902      	bls.n	800db9c <memmove+0x10>
 800db96:	4284      	cmp	r4, r0
 800db98:	4623      	mov	r3, r4
 800db9a:	d807      	bhi.n	800dbac <memmove+0x20>
 800db9c:	1e43      	subs	r3, r0, #1
 800db9e:	42a1      	cmp	r1, r4
 800dba0:	d008      	beq.n	800dbb4 <memmove+0x28>
 800dba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbaa:	e7f8      	b.n	800db9e <memmove+0x12>
 800dbac:	4402      	add	r2, r0
 800dbae:	4601      	mov	r1, r0
 800dbb0:	428a      	cmp	r2, r1
 800dbb2:	d100      	bne.n	800dbb6 <memmove+0x2a>
 800dbb4:	bd10      	pop	{r4, pc}
 800dbb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbbe:	e7f7      	b.n	800dbb0 <memmove+0x24>

0800dbc0 <__malloc_lock>:
 800dbc0:	4801      	ldr	r0, [pc, #4]	; (800dbc8 <__malloc_lock+0x8>)
 800dbc2:	f7ff bf7b 	b.w	800dabc <__retarget_lock_acquire_recursive>
 800dbc6:	bf00      	nop
 800dbc8:	20004aa8 	.word	0x20004aa8

0800dbcc <__malloc_unlock>:
 800dbcc:	4801      	ldr	r0, [pc, #4]	; (800dbd4 <__malloc_unlock+0x8>)
 800dbce:	f7ff bf76 	b.w	800dabe <__retarget_lock_release_recursive>
 800dbd2:	bf00      	nop
 800dbd4:	20004aa8 	.word	0x20004aa8

0800dbd8 <_realloc_r>:
 800dbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbdc:	4680      	mov	r8, r0
 800dbde:	4614      	mov	r4, r2
 800dbe0:	460e      	mov	r6, r1
 800dbe2:	b921      	cbnz	r1, 800dbee <_realloc_r+0x16>
 800dbe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe8:	4611      	mov	r1, r2
 800dbea:	f7ff b981 	b.w	800cef0 <_malloc_r>
 800dbee:	b92a      	cbnz	r2, 800dbfc <_realloc_r+0x24>
 800dbf0:	f7ff f912 	bl	800ce18 <_free_r>
 800dbf4:	4625      	mov	r5, r4
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbfc:	f000 f8fa 	bl	800ddf4 <_malloc_usable_size_r>
 800dc00:	4284      	cmp	r4, r0
 800dc02:	4607      	mov	r7, r0
 800dc04:	d802      	bhi.n	800dc0c <_realloc_r+0x34>
 800dc06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc0a:	d812      	bhi.n	800dc32 <_realloc_r+0x5a>
 800dc0c:	4621      	mov	r1, r4
 800dc0e:	4640      	mov	r0, r8
 800dc10:	f7ff f96e 	bl	800cef0 <_malloc_r>
 800dc14:	4605      	mov	r5, r0
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d0ed      	beq.n	800dbf6 <_realloc_r+0x1e>
 800dc1a:	42bc      	cmp	r4, r7
 800dc1c:	4622      	mov	r2, r4
 800dc1e:	4631      	mov	r1, r6
 800dc20:	bf28      	it	cs
 800dc22:	463a      	movcs	r2, r7
 800dc24:	f7fe fc12 	bl	800c44c <memcpy>
 800dc28:	4631      	mov	r1, r6
 800dc2a:	4640      	mov	r0, r8
 800dc2c:	f7ff f8f4 	bl	800ce18 <_free_r>
 800dc30:	e7e1      	b.n	800dbf6 <_realloc_r+0x1e>
 800dc32:	4635      	mov	r5, r6
 800dc34:	e7df      	b.n	800dbf6 <_realloc_r+0x1e>

0800dc36 <_raise_r>:
 800dc36:	291f      	cmp	r1, #31
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	d904      	bls.n	800dc4a <_raise_r+0x14>
 800dc40:	2316      	movs	r3, #22
 800dc42:	6003      	str	r3, [r0, #0]
 800dc44:	f04f 30ff 	mov.w	r0, #4294967295
 800dc48:	bd38      	pop	{r3, r4, r5, pc}
 800dc4a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc4c:	b112      	cbz	r2, 800dc54 <_raise_r+0x1e>
 800dc4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc52:	b94b      	cbnz	r3, 800dc68 <_raise_r+0x32>
 800dc54:	4620      	mov	r0, r4
 800dc56:	f000 f831 	bl	800dcbc <_getpid_r>
 800dc5a:	462a      	mov	r2, r5
 800dc5c:	4601      	mov	r1, r0
 800dc5e:	4620      	mov	r0, r4
 800dc60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc64:	f000 b818 	b.w	800dc98 <_kill_r>
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d00a      	beq.n	800dc82 <_raise_r+0x4c>
 800dc6c:	1c59      	adds	r1, r3, #1
 800dc6e:	d103      	bne.n	800dc78 <_raise_r+0x42>
 800dc70:	2316      	movs	r3, #22
 800dc72:	6003      	str	r3, [r0, #0]
 800dc74:	2001      	movs	r0, #1
 800dc76:	e7e7      	b.n	800dc48 <_raise_r+0x12>
 800dc78:	2400      	movs	r4, #0
 800dc7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc7e:	4628      	mov	r0, r5
 800dc80:	4798      	blx	r3
 800dc82:	2000      	movs	r0, #0
 800dc84:	e7e0      	b.n	800dc48 <_raise_r+0x12>
	...

0800dc88 <raise>:
 800dc88:	4b02      	ldr	r3, [pc, #8]	; (800dc94 <raise+0xc>)
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	6818      	ldr	r0, [r3, #0]
 800dc8e:	f7ff bfd2 	b.w	800dc36 <_raise_r>
 800dc92:	bf00      	nop
 800dc94:	200000ec 	.word	0x200000ec

0800dc98 <_kill_r>:
 800dc98:	b538      	push	{r3, r4, r5, lr}
 800dc9a:	4d07      	ldr	r5, [pc, #28]	; (800dcb8 <_kill_r+0x20>)
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	4604      	mov	r4, r0
 800dca0:	4608      	mov	r0, r1
 800dca2:	4611      	mov	r1, r2
 800dca4:	602b      	str	r3, [r5, #0]
 800dca6:	f7f5 fbb7 	bl	8003418 <_kill>
 800dcaa:	1c43      	adds	r3, r0, #1
 800dcac:	d102      	bne.n	800dcb4 <_kill_r+0x1c>
 800dcae:	682b      	ldr	r3, [r5, #0]
 800dcb0:	b103      	cbz	r3, 800dcb4 <_kill_r+0x1c>
 800dcb2:	6023      	str	r3, [r4, #0]
 800dcb4:	bd38      	pop	{r3, r4, r5, pc}
 800dcb6:	bf00      	nop
 800dcb8:	20004aac 	.word	0x20004aac

0800dcbc <_getpid_r>:
 800dcbc:	f7f5 bba4 	b.w	8003408 <_getpid>

0800dcc0 <__sread>:
 800dcc0:	b510      	push	{r4, lr}
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcc8:	f000 f89c 	bl	800de04 <_read_r>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	bfab      	itete	ge
 800dcd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcd2:	89a3      	ldrhlt	r3, [r4, #12]
 800dcd4:	181b      	addge	r3, r3, r0
 800dcd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcda:	bfac      	ite	ge
 800dcdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcde:	81a3      	strhlt	r3, [r4, #12]
 800dce0:	bd10      	pop	{r4, pc}

0800dce2 <__swrite>:
 800dce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce6:	461f      	mov	r7, r3
 800dce8:	898b      	ldrh	r3, [r1, #12]
 800dcea:	05db      	lsls	r3, r3, #23
 800dcec:	4605      	mov	r5, r0
 800dcee:	460c      	mov	r4, r1
 800dcf0:	4616      	mov	r6, r2
 800dcf2:	d505      	bpl.n	800dd00 <__swrite+0x1e>
 800dcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f000 f868 	bl	800ddd0 <_lseek_r>
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd0a:	81a3      	strh	r3, [r4, #12]
 800dd0c:	4632      	mov	r2, r6
 800dd0e:	463b      	mov	r3, r7
 800dd10:	4628      	mov	r0, r5
 800dd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd16:	f000 b817 	b.w	800dd48 <_write_r>

0800dd1a <__sseek>:
 800dd1a:	b510      	push	{r4, lr}
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd22:	f000 f855 	bl	800ddd0 <_lseek_r>
 800dd26:	1c43      	adds	r3, r0, #1
 800dd28:	89a3      	ldrh	r3, [r4, #12]
 800dd2a:	bf15      	itete	ne
 800dd2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd36:	81a3      	strheq	r3, [r4, #12]
 800dd38:	bf18      	it	ne
 800dd3a:	81a3      	strhne	r3, [r4, #12]
 800dd3c:	bd10      	pop	{r4, pc}

0800dd3e <__sclose>:
 800dd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd42:	f000 b813 	b.w	800dd6c <_close_r>
	...

0800dd48 <_write_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d07      	ldr	r5, [pc, #28]	; (800dd68 <_write_r+0x20>)
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	4608      	mov	r0, r1
 800dd50:	4611      	mov	r1, r2
 800dd52:	2200      	movs	r2, #0
 800dd54:	602a      	str	r2, [r5, #0]
 800dd56:	461a      	mov	r2, r3
 800dd58:	f7f5 fb95 	bl	8003486 <_write>
 800dd5c:	1c43      	adds	r3, r0, #1
 800dd5e:	d102      	bne.n	800dd66 <_write_r+0x1e>
 800dd60:	682b      	ldr	r3, [r5, #0]
 800dd62:	b103      	cbz	r3, 800dd66 <_write_r+0x1e>
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	bd38      	pop	{r3, r4, r5, pc}
 800dd68:	20004aac 	.word	0x20004aac

0800dd6c <_close_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d06      	ldr	r5, [pc, #24]	; (800dd88 <_close_r+0x1c>)
 800dd70:	2300      	movs	r3, #0
 800dd72:	4604      	mov	r4, r0
 800dd74:	4608      	mov	r0, r1
 800dd76:	602b      	str	r3, [r5, #0]
 800dd78:	f7f5 fba1 	bl	80034be <_close>
 800dd7c:	1c43      	adds	r3, r0, #1
 800dd7e:	d102      	bne.n	800dd86 <_close_r+0x1a>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	b103      	cbz	r3, 800dd86 <_close_r+0x1a>
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	20004aac 	.word	0x20004aac

0800dd8c <_fstat_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4d07      	ldr	r5, [pc, #28]	; (800ddac <_fstat_r+0x20>)
 800dd90:	2300      	movs	r3, #0
 800dd92:	4604      	mov	r4, r0
 800dd94:	4608      	mov	r0, r1
 800dd96:	4611      	mov	r1, r2
 800dd98:	602b      	str	r3, [r5, #0]
 800dd9a:	f7f5 fb9c 	bl	80034d6 <_fstat>
 800dd9e:	1c43      	adds	r3, r0, #1
 800dda0:	d102      	bne.n	800dda8 <_fstat_r+0x1c>
 800dda2:	682b      	ldr	r3, [r5, #0]
 800dda4:	b103      	cbz	r3, 800dda8 <_fstat_r+0x1c>
 800dda6:	6023      	str	r3, [r4, #0]
 800dda8:	bd38      	pop	{r3, r4, r5, pc}
 800ddaa:	bf00      	nop
 800ddac:	20004aac 	.word	0x20004aac

0800ddb0 <_isatty_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	4d06      	ldr	r5, [pc, #24]	; (800ddcc <_isatty_r+0x1c>)
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4608      	mov	r0, r1
 800ddba:	602b      	str	r3, [r5, #0]
 800ddbc:	f7f5 fb9b 	bl	80034f6 <_isatty>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d102      	bne.n	800ddca <_isatty_r+0x1a>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	b103      	cbz	r3, 800ddca <_isatty_r+0x1a>
 800ddc8:	6023      	str	r3, [r4, #0]
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	20004aac 	.word	0x20004aac

0800ddd0 <_lseek_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4d07      	ldr	r5, [pc, #28]	; (800ddf0 <_lseek_r+0x20>)
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	4608      	mov	r0, r1
 800ddd8:	4611      	mov	r1, r2
 800ddda:	2200      	movs	r2, #0
 800dddc:	602a      	str	r2, [r5, #0]
 800ddde:	461a      	mov	r2, r3
 800dde0:	f7f5 fb94 	bl	800350c <_lseek>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d102      	bne.n	800ddee <_lseek_r+0x1e>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	b103      	cbz	r3, 800ddee <_lseek_r+0x1e>
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	20004aac 	.word	0x20004aac

0800ddf4 <_malloc_usable_size_r>:
 800ddf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddf8:	1f18      	subs	r0, r3, #4
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	bfbc      	itt	lt
 800ddfe:	580b      	ldrlt	r3, [r1, r0]
 800de00:	18c0      	addlt	r0, r0, r3
 800de02:	4770      	bx	lr

0800de04 <_read_r>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	4d07      	ldr	r5, [pc, #28]	; (800de24 <_read_r+0x20>)
 800de08:	4604      	mov	r4, r0
 800de0a:	4608      	mov	r0, r1
 800de0c:	4611      	mov	r1, r2
 800de0e:	2200      	movs	r2, #0
 800de10:	602a      	str	r2, [r5, #0]
 800de12:	461a      	mov	r2, r3
 800de14:	f7f5 fb1a 	bl	800344c <_read>
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	d102      	bne.n	800de22 <_read_r+0x1e>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	b103      	cbz	r3, 800de22 <_read_r+0x1e>
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	bd38      	pop	{r3, r4, r5, pc}
 800de24:	20004aac 	.word	0x20004aac

0800de28 <cos>:
 800de28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de2a:	ec53 2b10 	vmov	r2, r3, d0
 800de2e:	4826      	ldr	r0, [pc, #152]	; (800dec8 <cos+0xa0>)
 800de30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de34:	4281      	cmp	r1, r0
 800de36:	dc06      	bgt.n	800de46 <cos+0x1e>
 800de38:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800dec0 <cos+0x98>
 800de3c:	b005      	add	sp, #20
 800de3e:	f85d eb04 	ldr.w	lr, [sp], #4
 800de42:	f001 bb35 	b.w	800f4b0 <__kernel_cos>
 800de46:	4821      	ldr	r0, [pc, #132]	; (800decc <cos+0xa4>)
 800de48:	4281      	cmp	r1, r0
 800de4a:	dd09      	ble.n	800de60 <cos+0x38>
 800de4c:	ee10 0a10 	vmov	r0, s0
 800de50:	4619      	mov	r1, r3
 800de52:	f7f2 fa19 	bl	8000288 <__aeabi_dsub>
 800de56:	ec41 0b10 	vmov	d0, r0, r1
 800de5a:	b005      	add	sp, #20
 800de5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800de60:	4668      	mov	r0, sp
 800de62:	f001 f865 	bl	800ef30 <__ieee754_rem_pio2>
 800de66:	f000 0003 	and.w	r0, r0, #3
 800de6a:	2801      	cmp	r0, #1
 800de6c:	d00b      	beq.n	800de86 <cos+0x5e>
 800de6e:	2802      	cmp	r0, #2
 800de70:	d016      	beq.n	800dea0 <cos+0x78>
 800de72:	b9e0      	cbnz	r0, 800deae <cos+0x86>
 800de74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de78:	ed9d 0b00 	vldr	d0, [sp]
 800de7c:	f001 fb18 	bl	800f4b0 <__kernel_cos>
 800de80:	ec51 0b10 	vmov	r0, r1, d0
 800de84:	e7e7      	b.n	800de56 <cos+0x2e>
 800de86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de8a:	ed9d 0b00 	vldr	d0, [sp]
 800de8e:	f001 ff27 	bl	800fce0 <__kernel_sin>
 800de92:	ec53 2b10 	vmov	r2, r3, d0
 800de96:	ee10 0a10 	vmov	r0, s0
 800de9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800de9e:	e7da      	b.n	800de56 <cos+0x2e>
 800dea0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dea4:	ed9d 0b00 	vldr	d0, [sp]
 800dea8:	f001 fb02 	bl	800f4b0 <__kernel_cos>
 800deac:	e7f1      	b.n	800de92 <cos+0x6a>
 800deae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800deb2:	ed9d 0b00 	vldr	d0, [sp]
 800deb6:	2001      	movs	r0, #1
 800deb8:	f001 ff12 	bl	800fce0 <__kernel_sin>
 800debc:	e7e0      	b.n	800de80 <cos+0x58>
 800debe:	bf00      	nop
	...
 800dec8:	3fe921fb 	.word	0x3fe921fb
 800decc:	7fefffff 	.word	0x7fefffff

0800ded0 <sin>:
 800ded0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ded2:	ec53 2b10 	vmov	r2, r3, d0
 800ded6:	4828      	ldr	r0, [pc, #160]	; (800df78 <sin+0xa8>)
 800ded8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dedc:	4281      	cmp	r1, r0
 800dede:	dc07      	bgt.n	800def0 <sin+0x20>
 800dee0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800df70 <sin+0xa0>
 800dee4:	2000      	movs	r0, #0
 800dee6:	b005      	add	sp, #20
 800dee8:	f85d eb04 	ldr.w	lr, [sp], #4
 800deec:	f001 bef8 	b.w	800fce0 <__kernel_sin>
 800def0:	4822      	ldr	r0, [pc, #136]	; (800df7c <sin+0xac>)
 800def2:	4281      	cmp	r1, r0
 800def4:	dd09      	ble.n	800df0a <sin+0x3a>
 800def6:	ee10 0a10 	vmov	r0, s0
 800defa:	4619      	mov	r1, r3
 800defc:	f7f2 f9c4 	bl	8000288 <__aeabi_dsub>
 800df00:	ec41 0b10 	vmov	d0, r0, r1
 800df04:	b005      	add	sp, #20
 800df06:	f85d fb04 	ldr.w	pc, [sp], #4
 800df0a:	4668      	mov	r0, sp
 800df0c:	f001 f810 	bl	800ef30 <__ieee754_rem_pio2>
 800df10:	f000 0003 	and.w	r0, r0, #3
 800df14:	2801      	cmp	r0, #1
 800df16:	d00c      	beq.n	800df32 <sin+0x62>
 800df18:	2802      	cmp	r0, #2
 800df1a:	d011      	beq.n	800df40 <sin+0x70>
 800df1c:	b9f0      	cbnz	r0, 800df5c <sin+0x8c>
 800df1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df22:	ed9d 0b00 	vldr	d0, [sp]
 800df26:	2001      	movs	r0, #1
 800df28:	f001 feda 	bl	800fce0 <__kernel_sin>
 800df2c:	ec51 0b10 	vmov	r0, r1, d0
 800df30:	e7e6      	b.n	800df00 <sin+0x30>
 800df32:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df36:	ed9d 0b00 	vldr	d0, [sp]
 800df3a:	f001 fab9 	bl	800f4b0 <__kernel_cos>
 800df3e:	e7f5      	b.n	800df2c <sin+0x5c>
 800df40:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df44:	ed9d 0b00 	vldr	d0, [sp]
 800df48:	2001      	movs	r0, #1
 800df4a:	f001 fec9 	bl	800fce0 <__kernel_sin>
 800df4e:	ec53 2b10 	vmov	r2, r3, d0
 800df52:	ee10 0a10 	vmov	r0, s0
 800df56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800df5a:	e7d1      	b.n	800df00 <sin+0x30>
 800df5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df60:	ed9d 0b00 	vldr	d0, [sp]
 800df64:	f001 faa4 	bl	800f4b0 <__kernel_cos>
 800df68:	e7f1      	b.n	800df4e <sin+0x7e>
 800df6a:	bf00      	nop
 800df6c:	f3af 8000 	nop.w
	...
 800df78:	3fe921fb 	.word	0x3fe921fb
 800df7c:	7fefffff 	.word	0x7fefffff

0800df80 <atan2>:
 800df80:	f000 b8ca 	b.w	800e118 <__ieee754_atan2>

0800df84 <fmod>:
 800df84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df86:	ed2d 8b02 	vpush	{d8}
 800df8a:	ec57 6b10 	vmov	r6, r7, d0
 800df8e:	ec55 4b11 	vmov	r4, r5, d1
 800df92:	f000 f98b 	bl	800e2ac <__ieee754_fmod>
 800df96:	4622      	mov	r2, r4
 800df98:	462b      	mov	r3, r5
 800df9a:	4630      	mov	r0, r6
 800df9c:	4639      	mov	r1, r7
 800df9e:	eeb0 8a40 	vmov.f32	s16, s0
 800dfa2:	eef0 8a60 	vmov.f32	s17, s1
 800dfa6:	f7f2 fdc1 	bl	8000b2c <__aeabi_dcmpun>
 800dfaa:	b990      	cbnz	r0, 800dfd2 <fmod+0x4e>
 800dfac:	2200      	movs	r2, #0
 800dfae:	2300      	movs	r3, #0
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	f7f2 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfb8:	b158      	cbz	r0, 800dfd2 <fmod+0x4e>
 800dfba:	f7fb fa03 	bl	80093c4 <__errno>
 800dfbe:	2321      	movs	r3, #33	; 0x21
 800dfc0:	6003      	str	r3, [r0, #0]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	4610      	mov	r0, r2
 800dfc8:	4619      	mov	r1, r3
 800dfca:	f7f2 fc3f 	bl	800084c <__aeabi_ddiv>
 800dfce:	ec41 0b18 	vmov	d8, r0, r1
 800dfd2:	eeb0 0a48 	vmov.f32	s0, s16
 800dfd6:	eef0 0a68 	vmov.f32	s1, s17
 800dfda:	ecbd 8b02 	vpop	{d8}
 800dfde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dfe0 <pow>:
 800dfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe2:	ed2d 8b02 	vpush	{d8}
 800dfe6:	eeb0 8a40 	vmov.f32	s16, s0
 800dfea:	eef0 8a60 	vmov.f32	s17, s1
 800dfee:	ec55 4b11 	vmov	r4, r5, d1
 800dff2:	f000 fa6d 	bl	800e4d0 <__ieee754_pow>
 800dff6:	4622      	mov	r2, r4
 800dff8:	462b      	mov	r3, r5
 800dffa:	4620      	mov	r0, r4
 800dffc:	4629      	mov	r1, r5
 800dffe:	ec57 6b10 	vmov	r6, r7, d0
 800e002:	f7f2 fd93 	bl	8000b2c <__aeabi_dcmpun>
 800e006:	2800      	cmp	r0, #0
 800e008:	d13b      	bne.n	800e082 <pow+0xa2>
 800e00a:	ec51 0b18 	vmov	r0, r1, d8
 800e00e:	2200      	movs	r2, #0
 800e010:	2300      	movs	r3, #0
 800e012:	f7f2 fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 800e016:	b1b8      	cbz	r0, 800e048 <pow+0x68>
 800e018:	2200      	movs	r2, #0
 800e01a:	2300      	movs	r3, #0
 800e01c:	4620      	mov	r0, r4
 800e01e:	4629      	mov	r1, r5
 800e020:	f7f2 fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 800e024:	2800      	cmp	r0, #0
 800e026:	d146      	bne.n	800e0b6 <pow+0xd6>
 800e028:	ec45 4b10 	vmov	d0, r4, r5
 800e02c:	f002 f8f1 	bl	8010212 <finite>
 800e030:	b338      	cbz	r0, 800e082 <pow+0xa2>
 800e032:	2200      	movs	r2, #0
 800e034:	2300      	movs	r3, #0
 800e036:	4620      	mov	r0, r4
 800e038:	4629      	mov	r1, r5
 800e03a:	f7f2 fd4f 	bl	8000adc <__aeabi_dcmplt>
 800e03e:	b300      	cbz	r0, 800e082 <pow+0xa2>
 800e040:	f7fb f9c0 	bl	80093c4 <__errno>
 800e044:	2322      	movs	r3, #34	; 0x22
 800e046:	e01b      	b.n	800e080 <pow+0xa0>
 800e048:	ec47 6b10 	vmov	d0, r6, r7
 800e04c:	f002 f8e1 	bl	8010212 <finite>
 800e050:	b9e0      	cbnz	r0, 800e08c <pow+0xac>
 800e052:	eeb0 0a48 	vmov.f32	s0, s16
 800e056:	eef0 0a68 	vmov.f32	s1, s17
 800e05a:	f002 f8da 	bl	8010212 <finite>
 800e05e:	b1a8      	cbz	r0, 800e08c <pow+0xac>
 800e060:	ec45 4b10 	vmov	d0, r4, r5
 800e064:	f002 f8d5 	bl	8010212 <finite>
 800e068:	b180      	cbz	r0, 800e08c <pow+0xac>
 800e06a:	4632      	mov	r2, r6
 800e06c:	463b      	mov	r3, r7
 800e06e:	4630      	mov	r0, r6
 800e070:	4639      	mov	r1, r7
 800e072:	f7f2 fd5b 	bl	8000b2c <__aeabi_dcmpun>
 800e076:	2800      	cmp	r0, #0
 800e078:	d0e2      	beq.n	800e040 <pow+0x60>
 800e07a:	f7fb f9a3 	bl	80093c4 <__errno>
 800e07e:	2321      	movs	r3, #33	; 0x21
 800e080:	6003      	str	r3, [r0, #0]
 800e082:	ecbd 8b02 	vpop	{d8}
 800e086:	ec47 6b10 	vmov	d0, r6, r7
 800e08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e08c:	2200      	movs	r2, #0
 800e08e:	2300      	movs	r3, #0
 800e090:	4630      	mov	r0, r6
 800e092:	4639      	mov	r1, r7
 800e094:	f7f2 fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 800e098:	2800      	cmp	r0, #0
 800e09a:	d0f2      	beq.n	800e082 <pow+0xa2>
 800e09c:	eeb0 0a48 	vmov.f32	s0, s16
 800e0a0:	eef0 0a68 	vmov.f32	s1, s17
 800e0a4:	f002 f8b5 	bl	8010212 <finite>
 800e0a8:	2800      	cmp	r0, #0
 800e0aa:	d0ea      	beq.n	800e082 <pow+0xa2>
 800e0ac:	ec45 4b10 	vmov	d0, r4, r5
 800e0b0:	f002 f8af 	bl	8010212 <finite>
 800e0b4:	e7c3      	b.n	800e03e <pow+0x5e>
 800e0b6:	4f01      	ldr	r7, [pc, #4]	; (800e0bc <pow+0xdc>)
 800e0b8:	2600      	movs	r6, #0
 800e0ba:	e7e2      	b.n	800e082 <pow+0xa2>
 800e0bc:	3ff00000 	.word	0x3ff00000

0800e0c0 <sqrt>:
 800e0c0:	b538      	push	{r3, r4, r5, lr}
 800e0c2:	ed2d 8b02 	vpush	{d8}
 800e0c6:	ec55 4b10 	vmov	r4, r5, d0
 800e0ca:	f001 f93d 	bl	800f348 <__ieee754_sqrt>
 800e0ce:	4622      	mov	r2, r4
 800e0d0:	462b      	mov	r3, r5
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	eeb0 8a40 	vmov.f32	s16, s0
 800e0da:	eef0 8a60 	vmov.f32	s17, s1
 800e0de:	f7f2 fd25 	bl	8000b2c <__aeabi_dcmpun>
 800e0e2:	b990      	cbnz	r0, 800e10a <sqrt+0x4a>
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	f7f2 fcf6 	bl	8000adc <__aeabi_dcmplt>
 800e0f0:	b158      	cbz	r0, 800e10a <sqrt+0x4a>
 800e0f2:	f7fb f967 	bl	80093c4 <__errno>
 800e0f6:	2321      	movs	r3, #33	; 0x21
 800e0f8:	6003      	str	r3, [r0, #0]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	4610      	mov	r0, r2
 800e100:	4619      	mov	r1, r3
 800e102:	f7f2 fba3 	bl	800084c <__aeabi_ddiv>
 800e106:	ec41 0b18 	vmov	d8, r0, r1
 800e10a:	eeb0 0a48 	vmov.f32	s0, s16
 800e10e:	eef0 0a68 	vmov.f32	s1, s17
 800e112:	ecbd 8b02 	vpop	{d8}
 800e116:	bd38      	pop	{r3, r4, r5, pc}

0800e118 <__ieee754_atan2>:
 800e118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e11c:	ec57 6b11 	vmov	r6, r7, d1
 800e120:	4273      	negs	r3, r6
 800e122:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e2a8 <__ieee754_atan2+0x190>
 800e126:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e12a:	4333      	orrs	r3, r6
 800e12c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e130:	4573      	cmp	r3, lr
 800e132:	ec51 0b10 	vmov	r0, r1, d0
 800e136:	ee11 8a10 	vmov	r8, s2
 800e13a:	d80a      	bhi.n	800e152 <__ieee754_atan2+0x3a>
 800e13c:	4244      	negs	r4, r0
 800e13e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e142:	4304      	orrs	r4, r0
 800e144:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e148:	4574      	cmp	r4, lr
 800e14a:	ee10 9a10 	vmov	r9, s0
 800e14e:	468c      	mov	ip, r1
 800e150:	d907      	bls.n	800e162 <__ieee754_atan2+0x4a>
 800e152:	4632      	mov	r2, r6
 800e154:	463b      	mov	r3, r7
 800e156:	f7f2 f899 	bl	800028c <__adddf3>
 800e15a:	ec41 0b10 	vmov	d0, r0, r1
 800e15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e162:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e166:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e16a:	4334      	orrs	r4, r6
 800e16c:	d103      	bne.n	800e176 <__ieee754_atan2+0x5e>
 800e16e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e172:	f001 bea5 	b.w	800fec0 <atan>
 800e176:	17bc      	asrs	r4, r7, #30
 800e178:	f004 0402 	and.w	r4, r4, #2
 800e17c:	ea53 0909 	orrs.w	r9, r3, r9
 800e180:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e184:	d107      	bne.n	800e196 <__ieee754_atan2+0x7e>
 800e186:	2c02      	cmp	r4, #2
 800e188:	d060      	beq.n	800e24c <__ieee754_atan2+0x134>
 800e18a:	2c03      	cmp	r4, #3
 800e18c:	d1e5      	bne.n	800e15a <__ieee754_atan2+0x42>
 800e18e:	a142      	add	r1, pc, #264	; (adr r1, 800e298 <__ieee754_atan2+0x180>)
 800e190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e194:	e7e1      	b.n	800e15a <__ieee754_atan2+0x42>
 800e196:	ea52 0808 	orrs.w	r8, r2, r8
 800e19a:	d106      	bne.n	800e1aa <__ieee754_atan2+0x92>
 800e19c:	f1bc 0f00 	cmp.w	ip, #0
 800e1a0:	da5f      	bge.n	800e262 <__ieee754_atan2+0x14a>
 800e1a2:	a13f      	add	r1, pc, #252	; (adr r1, 800e2a0 <__ieee754_atan2+0x188>)
 800e1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1a8:	e7d7      	b.n	800e15a <__ieee754_atan2+0x42>
 800e1aa:	4572      	cmp	r2, lr
 800e1ac:	d10f      	bne.n	800e1ce <__ieee754_atan2+0xb6>
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	f104 34ff 	add.w	r4, r4, #4294967295
 800e1b4:	d107      	bne.n	800e1c6 <__ieee754_atan2+0xae>
 800e1b6:	2c02      	cmp	r4, #2
 800e1b8:	d84c      	bhi.n	800e254 <__ieee754_atan2+0x13c>
 800e1ba:	4b35      	ldr	r3, [pc, #212]	; (800e290 <__ieee754_atan2+0x178>)
 800e1bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e1c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e1c4:	e7c9      	b.n	800e15a <__ieee754_atan2+0x42>
 800e1c6:	2c02      	cmp	r4, #2
 800e1c8:	d848      	bhi.n	800e25c <__ieee754_atan2+0x144>
 800e1ca:	4b32      	ldr	r3, [pc, #200]	; (800e294 <__ieee754_atan2+0x17c>)
 800e1cc:	e7f6      	b.n	800e1bc <__ieee754_atan2+0xa4>
 800e1ce:	4573      	cmp	r3, lr
 800e1d0:	d0e4      	beq.n	800e19c <__ieee754_atan2+0x84>
 800e1d2:	1a9b      	subs	r3, r3, r2
 800e1d4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e1d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e1dc:	da1e      	bge.n	800e21c <__ieee754_atan2+0x104>
 800e1de:	2f00      	cmp	r7, #0
 800e1e0:	da01      	bge.n	800e1e6 <__ieee754_atan2+0xce>
 800e1e2:	323c      	adds	r2, #60	; 0x3c
 800e1e4:	db1e      	blt.n	800e224 <__ieee754_atan2+0x10c>
 800e1e6:	4632      	mov	r2, r6
 800e1e8:	463b      	mov	r3, r7
 800e1ea:	f7f2 fb2f 	bl	800084c <__aeabi_ddiv>
 800e1ee:	ec41 0b10 	vmov	d0, r0, r1
 800e1f2:	f002 f805 	bl	8010200 <fabs>
 800e1f6:	f001 fe63 	bl	800fec0 <atan>
 800e1fa:	ec51 0b10 	vmov	r0, r1, d0
 800e1fe:	2c01      	cmp	r4, #1
 800e200:	d013      	beq.n	800e22a <__ieee754_atan2+0x112>
 800e202:	2c02      	cmp	r4, #2
 800e204:	d015      	beq.n	800e232 <__ieee754_atan2+0x11a>
 800e206:	2c00      	cmp	r4, #0
 800e208:	d0a7      	beq.n	800e15a <__ieee754_atan2+0x42>
 800e20a:	a319      	add	r3, pc, #100	; (adr r3, 800e270 <__ieee754_atan2+0x158>)
 800e20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e210:	f7f2 f83a 	bl	8000288 <__aeabi_dsub>
 800e214:	a318      	add	r3, pc, #96	; (adr r3, 800e278 <__ieee754_atan2+0x160>)
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	e014      	b.n	800e246 <__ieee754_atan2+0x12e>
 800e21c:	a118      	add	r1, pc, #96	; (adr r1, 800e280 <__ieee754_atan2+0x168>)
 800e21e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e222:	e7ec      	b.n	800e1fe <__ieee754_atan2+0xe6>
 800e224:	2000      	movs	r0, #0
 800e226:	2100      	movs	r1, #0
 800e228:	e7e9      	b.n	800e1fe <__ieee754_atan2+0xe6>
 800e22a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e22e:	4619      	mov	r1, r3
 800e230:	e793      	b.n	800e15a <__ieee754_atan2+0x42>
 800e232:	a30f      	add	r3, pc, #60	; (adr r3, 800e270 <__ieee754_atan2+0x158>)
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	f7f2 f826 	bl	8000288 <__aeabi_dsub>
 800e23c:	4602      	mov	r2, r0
 800e23e:	460b      	mov	r3, r1
 800e240:	a10d      	add	r1, pc, #52	; (adr r1, 800e278 <__ieee754_atan2+0x160>)
 800e242:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e246:	f7f2 f81f 	bl	8000288 <__aeabi_dsub>
 800e24a:	e786      	b.n	800e15a <__ieee754_atan2+0x42>
 800e24c:	a10a      	add	r1, pc, #40	; (adr r1, 800e278 <__ieee754_atan2+0x160>)
 800e24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e252:	e782      	b.n	800e15a <__ieee754_atan2+0x42>
 800e254:	a10c      	add	r1, pc, #48	; (adr r1, 800e288 <__ieee754_atan2+0x170>)
 800e256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e25a:	e77e      	b.n	800e15a <__ieee754_atan2+0x42>
 800e25c:	2000      	movs	r0, #0
 800e25e:	2100      	movs	r1, #0
 800e260:	e77b      	b.n	800e15a <__ieee754_atan2+0x42>
 800e262:	a107      	add	r1, pc, #28	; (adr r1, 800e280 <__ieee754_atan2+0x168>)
 800e264:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e268:	e777      	b.n	800e15a <__ieee754_atan2+0x42>
 800e26a:	bf00      	nop
 800e26c:	f3af 8000 	nop.w
 800e270:	33145c07 	.word	0x33145c07
 800e274:	3ca1a626 	.word	0x3ca1a626
 800e278:	54442d18 	.word	0x54442d18
 800e27c:	400921fb 	.word	0x400921fb
 800e280:	54442d18 	.word	0x54442d18
 800e284:	3ff921fb 	.word	0x3ff921fb
 800e288:	54442d18 	.word	0x54442d18
 800e28c:	3fe921fb 	.word	0x3fe921fb
 800e290:	080109b8 	.word	0x080109b8
 800e294:	080109d0 	.word	0x080109d0
 800e298:	54442d18 	.word	0x54442d18
 800e29c:	c00921fb 	.word	0xc00921fb
 800e2a0:	54442d18 	.word	0x54442d18
 800e2a4:	bff921fb 	.word	0xbff921fb
 800e2a8:	7ff00000 	.word	0x7ff00000

0800e2ac <__ieee754_fmod>:
 800e2ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b0:	ec53 2b11 	vmov	r2, r3, d1
 800e2b4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800e2b8:	ea5e 0402 	orrs.w	r4, lr, r2
 800e2bc:	ec51 0b10 	vmov	r0, r1, d0
 800e2c0:	ee11 7a10 	vmov	r7, s2
 800e2c4:	ee11 ca10 	vmov	ip, s2
 800e2c8:	461e      	mov	r6, r3
 800e2ca:	d00d      	beq.n	800e2e8 <__ieee754_fmod+0x3c>
 800e2cc:	4c7a      	ldr	r4, [pc, #488]	; (800e4b8 <__ieee754_fmod+0x20c>)
 800e2ce:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800e2d2:	45a0      	cmp	r8, r4
 800e2d4:	4689      	mov	r9, r1
 800e2d6:	dc07      	bgt.n	800e2e8 <__ieee754_fmod+0x3c>
 800e2d8:	4254      	negs	r4, r2
 800e2da:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800e4c4 <__ieee754_fmod+0x218>
 800e2de:	4314      	orrs	r4, r2
 800e2e0:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800e2e4:	455c      	cmp	r4, fp
 800e2e6:	d909      	bls.n	800e2fc <__ieee754_fmod+0x50>
 800e2e8:	f7f2 f986 	bl	80005f8 <__aeabi_dmul>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	f7f2 faac 	bl	800084c <__aeabi_ddiv>
 800e2f4:	ec41 0b10 	vmov	d0, r0, r1
 800e2f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fc:	45f0      	cmp	r8, lr
 800e2fe:	ee10 aa10 	vmov	sl, s0
 800e302:	ee10 4a10 	vmov	r4, s0
 800e306:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e30a:	dc09      	bgt.n	800e320 <__ieee754_fmod+0x74>
 800e30c:	dbf2      	blt.n	800e2f4 <__ieee754_fmod+0x48>
 800e30e:	4290      	cmp	r0, r2
 800e310:	d3f0      	bcc.n	800e2f4 <__ieee754_fmod+0x48>
 800e312:	d105      	bne.n	800e320 <__ieee754_fmod+0x74>
 800e314:	4b69      	ldr	r3, [pc, #420]	; (800e4bc <__ieee754_fmod+0x210>)
 800e316:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800e31a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e31e:	e7e9      	b.n	800e2f4 <__ieee754_fmod+0x48>
 800e320:	ea19 0f0b 	tst.w	r9, fp
 800e324:	d14a      	bne.n	800e3bc <__ieee754_fmod+0x110>
 800e326:	f1b8 0f00 	cmp.w	r8, #0
 800e32a:	d13f      	bne.n	800e3ac <__ieee754_fmod+0x100>
 800e32c:	4964      	ldr	r1, [pc, #400]	; (800e4c0 <__ieee754_fmod+0x214>)
 800e32e:	4653      	mov	r3, sl
 800e330:	2b00      	cmp	r3, #0
 800e332:	dc38      	bgt.n	800e3a6 <__ieee754_fmod+0xfa>
 800e334:	4b63      	ldr	r3, [pc, #396]	; (800e4c4 <__ieee754_fmod+0x218>)
 800e336:	4033      	ands	r3, r6
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d14f      	bne.n	800e3dc <__ieee754_fmod+0x130>
 800e33c:	f1be 0f00 	cmp.w	lr, #0
 800e340:	d144      	bne.n	800e3cc <__ieee754_fmod+0x120>
 800e342:	4a5f      	ldr	r2, [pc, #380]	; (800e4c0 <__ieee754_fmod+0x214>)
 800e344:	463b      	mov	r3, r7
 800e346:	2b00      	cmp	r3, #0
 800e348:	dc3d      	bgt.n	800e3c6 <__ieee754_fmod+0x11a>
 800e34a:	4b5f      	ldr	r3, [pc, #380]	; (800e4c8 <__ieee754_fmod+0x21c>)
 800e34c:	4299      	cmp	r1, r3
 800e34e:	db4a      	blt.n	800e3e6 <__ieee754_fmod+0x13a>
 800e350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e358:	485b      	ldr	r0, [pc, #364]	; (800e4c8 <__ieee754_fmod+0x21c>)
 800e35a:	4282      	cmp	r2, r0
 800e35c:	db57      	blt.n	800e40e <__ieee754_fmod+0x162>
 800e35e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800e362:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800e366:	1a89      	subs	r1, r1, r2
 800e368:	1b98      	subs	r0, r3, r6
 800e36a:	eba4 070c 	sub.w	r7, r4, ip
 800e36e:	2900      	cmp	r1, #0
 800e370:	d164      	bne.n	800e43c <__ieee754_fmod+0x190>
 800e372:	4564      	cmp	r4, ip
 800e374:	bf38      	it	cc
 800e376:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e37a:	2800      	cmp	r0, #0
 800e37c:	bfa4      	itt	ge
 800e37e:	463c      	movge	r4, r7
 800e380:	4603      	movge	r3, r0
 800e382:	ea53 0104 	orrs.w	r1, r3, r4
 800e386:	d0c5      	beq.n	800e314 <__ieee754_fmod+0x68>
 800e388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e38c:	db6b      	blt.n	800e466 <__ieee754_fmod+0x1ba>
 800e38e:	494e      	ldr	r1, [pc, #312]	; (800e4c8 <__ieee754_fmod+0x21c>)
 800e390:	428a      	cmp	r2, r1
 800e392:	db6e      	blt.n	800e472 <__ieee754_fmod+0x1c6>
 800e394:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e398:	431d      	orrs	r5, r3
 800e39a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800e39e:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	e7a6      	b.n	800e2f4 <__ieee754_fmod+0x48>
 800e3a6:	3901      	subs	r1, #1
 800e3a8:	005b      	lsls	r3, r3, #1
 800e3aa:	e7c1      	b.n	800e330 <__ieee754_fmod+0x84>
 800e3ac:	4946      	ldr	r1, [pc, #280]	; (800e4c8 <__ieee754_fmod+0x21c>)
 800e3ae:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	ddbe      	ble.n	800e334 <__ieee754_fmod+0x88>
 800e3b6:	3901      	subs	r1, #1
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	e7fa      	b.n	800e3b2 <__ieee754_fmod+0x106>
 800e3bc:	ea4f 5128 	mov.w	r1, r8, asr #20
 800e3c0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e3c4:	e7b6      	b.n	800e334 <__ieee754_fmod+0x88>
 800e3c6:	3a01      	subs	r2, #1
 800e3c8:	005b      	lsls	r3, r3, #1
 800e3ca:	e7bc      	b.n	800e346 <__ieee754_fmod+0x9a>
 800e3cc:	4a3e      	ldr	r2, [pc, #248]	; (800e4c8 <__ieee754_fmod+0x21c>)
 800e3ce:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	ddb9      	ble.n	800e34a <__ieee754_fmod+0x9e>
 800e3d6:	3a01      	subs	r2, #1
 800e3d8:	005b      	lsls	r3, r3, #1
 800e3da:	e7fa      	b.n	800e3d2 <__ieee754_fmod+0x126>
 800e3dc:	ea4f 522e 	mov.w	r2, lr, asr #20
 800e3e0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e3e4:	e7b1      	b.n	800e34a <__ieee754_fmod+0x9e>
 800e3e6:	1a5c      	subs	r4, r3, r1
 800e3e8:	2c1f      	cmp	r4, #31
 800e3ea:	dc0a      	bgt.n	800e402 <__ieee754_fmod+0x156>
 800e3ec:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800e3f0:	fa08 f804 	lsl.w	r8, r8, r4
 800e3f4:	fa2a f303 	lsr.w	r3, sl, r3
 800e3f8:	ea43 0308 	orr.w	r3, r3, r8
 800e3fc:	fa0a f404 	lsl.w	r4, sl, r4
 800e400:	e7aa      	b.n	800e358 <__ieee754_fmod+0xac>
 800e402:	4b32      	ldr	r3, [pc, #200]	; (800e4cc <__ieee754_fmod+0x220>)
 800e404:	1a5b      	subs	r3, r3, r1
 800e406:	fa0a f303 	lsl.w	r3, sl, r3
 800e40a:	2400      	movs	r4, #0
 800e40c:	e7a4      	b.n	800e358 <__ieee754_fmod+0xac>
 800e40e:	eba0 0c02 	sub.w	ip, r0, r2
 800e412:	f1bc 0f1f 	cmp.w	ip, #31
 800e416:	dc0a      	bgt.n	800e42e <__ieee754_fmod+0x182>
 800e418:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800e41c:	fa0e fe0c 	lsl.w	lr, lr, ip
 800e420:	fa27 f606 	lsr.w	r6, r7, r6
 800e424:	ea46 060e 	orr.w	r6, r6, lr
 800e428:	fa07 fc0c 	lsl.w	ip, r7, ip
 800e42c:	e79b      	b.n	800e366 <__ieee754_fmod+0xba>
 800e42e:	4e27      	ldr	r6, [pc, #156]	; (800e4cc <__ieee754_fmod+0x220>)
 800e430:	1ab6      	subs	r6, r6, r2
 800e432:	fa07 f606 	lsl.w	r6, r7, r6
 800e436:	f04f 0c00 	mov.w	ip, #0
 800e43a:	e794      	b.n	800e366 <__ieee754_fmod+0xba>
 800e43c:	4564      	cmp	r4, ip
 800e43e:	bf38      	it	cc
 800e440:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e444:	2800      	cmp	r0, #0
 800e446:	da05      	bge.n	800e454 <__ieee754_fmod+0x1a8>
 800e448:	0fe0      	lsrs	r0, r4, #31
 800e44a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e44e:	0064      	lsls	r4, r4, #1
 800e450:	3901      	subs	r1, #1
 800e452:	e789      	b.n	800e368 <__ieee754_fmod+0xbc>
 800e454:	ea50 0307 	orrs.w	r3, r0, r7
 800e458:	f43f af5c 	beq.w	800e314 <__ieee754_fmod+0x68>
 800e45c:	0ffb      	lsrs	r3, r7, #31
 800e45e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e462:	007c      	lsls	r4, r7, #1
 800e464:	e7f4      	b.n	800e450 <__ieee754_fmod+0x1a4>
 800e466:	0fe1      	lsrs	r1, r4, #31
 800e468:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e46c:	0064      	lsls	r4, r4, #1
 800e46e:	3a01      	subs	r2, #1
 800e470:	e78a      	b.n	800e388 <__ieee754_fmod+0xdc>
 800e472:	1a89      	subs	r1, r1, r2
 800e474:	2914      	cmp	r1, #20
 800e476:	dc0a      	bgt.n	800e48e <__ieee754_fmod+0x1e2>
 800e478:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800e47c:	fa03 f202 	lsl.w	r2, r3, r2
 800e480:	40cc      	lsrs	r4, r1
 800e482:	4322      	orrs	r2, r4
 800e484:	410b      	asrs	r3, r1
 800e486:	ea43 0105 	orr.w	r1, r3, r5
 800e48a:	4610      	mov	r0, r2
 800e48c:	e732      	b.n	800e2f4 <__ieee754_fmod+0x48>
 800e48e:	291f      	cmp	r1, #31
 800e490:	dc07      	bgt.n	800e4a2 <__ieee754_fmod+0x1f6>
 800e492:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800e496:	40cc      	lsrs	r4, r1
 800e498:	fa03 f202 	lsl.w	r2, r3, r2
 800e49c:	4322      	orrs	r2, r4
 800e49e:	462b      	mov	r3, r5
 800e4a0:	e7f1      	b.n	800e486 <__ieee754_fmod+0x1da>
 800e4a2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800e4a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e4aa:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800e4ae:	32e2      	adds	r2, #226	; 0xe2
 800e4b0:	fa43 f202 	asr.w	r2, r3, r2
 800e4b4:	e7f3      	b.n	800e49e <__ieee754_fmod+0x1f2>
 800e4b6:	bf00      	nop
 800e4b8:	7fefffff 	.word	0x7fefffff
 800e4bc:	080109e8 	.word	0x080109e8
 800e4c0:	fffffbed 	.word	0xfffffbed
 800e4c4:	7ff00000 	.word	0x7ff00000
 800e4c8:	fffffc02 	.word	0xfffffc02
 800e4cc:	fffffbe2 	.word	0xfffffbe2

0800e4d0 <__ieee754_pow>:
 800e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	ed2d 8b06 	vpush	{d8-d10}
 800e4d8:	b089      	sub	sp, #36	; 0x24
 800e4da:	ed8d 1b00 	vstr	d1, [sp]
 800e4de:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e4e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e4e6:	ea58 0102 	orrs.w	r1, r8, r2
 800e4ea:	ec57 6b10 	vmov	r6, r7, d0
 800e4ee:	d115      	bne.n	800e51c <__ieee754_pow+0x4c>
 800e4f0:	19b3      	adds	r3, r6, r6
 800e4f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e4f6:	4152      	adcs	r2, r2
 800e4f8:	4299      	cmp	r1, r3
 800e4fa:	4b89      	ldr	r3, [pc, #548]	; (800e720 <__ieee754_pow+0x250>)
 800e4fc:	4193      	sbcs	r3, r2
 800e4fe:	f080 84d2 	bcs.w	800eea6 <__ieee754_pow+0x9d6>
 800e502:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e506:	4630      	mov	r0, r6
 800e508:	4639      	mov	r1, r7
 800e50a:	f7f1 febf 	bl	800028c <__adddf3>
 800e50e:	ec41 0b10 	vmov	d0, r0, r1
 800e512:	b009      	add	sp, #36	; 0x24
 800e514:	ecbd 8b06 	vpop	{d8-d10}
 800e518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51c:	4b81      	ldr	r3, [pc, #516]	; (800e724 <__ieee754_pow+0x254>)
 800e51e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e522:	429c      	cmp	r4, r3
 800e524:	ee10 aa10 	vmov	sl, s0
 800e528:	463d      	mov	r5, r7
 800e52a:	dc06      	bgt.n	800e53a <__ieee754_pow+0x6a>
 800e52c:	d101      	bne.n	800e532 <__ieee754_pow+0x62>
 800e52e:	2e00      	cmp	r6, #0
 800e530:	d1e7      	bne.n	800e502 <__ieee754_pow+0x32>
 800e532:	4598      	cmp	r8, r3
 800e534:	dc01      	bgt.n	800e53a <__ieee754_pow+0x6a>
 800e536:	d10f      	bne.n	800e558 <__ieee754_pow+0x88>
 800e538:	b172      	cbz	r2, 800e558 <__ieee754_pow+0x88>
 800e53a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e53e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e542:	ea55 050a 	orrs.w	r5, r5, sl
 800e546:	d1dc      	bne.n	800e502 <__ieee754_pow+0x32>
 800e548:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e54c:	18db      	adds	r3, r3, r3
 800e54e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e552:	4152      	adcs	r2, r2
 800e554:	429d      	cmp	r5, r3
 800e556:	e7d0      	b.n	800e4fa <__ieee754_pow+0x2a>
 800e558:	2d00      	cmp	r5, #0
 800e55a:	da3b      	bge.n	800e5d4 <__ieee754_pow+0x104>
 800e55c:	4b72      	ldr	r3, [pc, #456]	; (800e728 <__ieee754_pow+0x258>)
 800e55e:	4598      	cmp	r8, r3
 800e560:	dc51      	bgt.n	800e606 <__ieee754_pow+0x136>
 800e562:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e566:	4598      	cmp	r8, r3
 800e568:	f340 84ac 	ble.w	800eec4 <__ieee754_pow+0x9f4>
 800e56c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e570:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e574:	2b14      	cmp	r3, #20
 800e576:	dd0f      	ble.n	800e598 <__ieee754_pow+0xc8>
 800e578:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e57c:	fa22 f103 	lsr.w	r1, r2, r3
 800e580:	fa01 f303 	lsl.w	r3, r1, r3
 800e584:	4293      	cmp	r3, r2
 800e586:	f040 849d 	bne.w	800eec4 <__ieee754_pow+0x9f4>
 800e58a:	f001 0101 	and.w	r1, r1, #1
 800e58e:	f1c1 0302 	rsb	r3, r1, #2
 800e592:	9304      	str	r3, [sp, #16]
 800e594:	b182      	cbz	r2, 800e5b8 <__ieee754_pow+0xe8>
 800e596:	e05f      	b.n	800e658 <__ieee754_pow+0x188>
 800e598:	2a00      	cmp	r2, #0
 800e59a:	d15b      	bne.n	800e654 <__ieee754_pow+0x184>
 800e59c:	f1c3 0314 	rsb	r3, r3, #20
 800e5a0:	fa48 f103 	asr.w	r1, r8, r3
 800e5a4:	fa01 f303 	lsl.w	r3, r1, r3
 800e5a8:	4543      	cmp	r3, r8
 800e5aa:	f040 8488 	bne.w	800eebe <__ieee754_pow+0x9ee>
 800e5ae:	f001 0101 	and.w	r1, r1, #1
 800e5b2:	f1c1 0302 	rsb	r3, r1, #2
 800e5b6:	9304      	str	r3, [sp, #16]
 800e5b8:	4b5c      	ldr	r3, [pc, #368]	; (800e72c <__ieee754_pow+0x25c>)
 800e5ba:	4598      	cmp	r8, r3
 800e5bc:	d132      	bne.n	800e624 <__ieee754_pow+0x154>
 800e5be:	f1b9 0f00 	cmp.w	r9, #0
 800e5c2:	f280 8478 	bge.w	800eeb6 <__ieee754_pow+0x9e6>
 800e5c6:	4959      	ldr	r1, [pc, #356]	; (800e72c <__ieee754_pow+0x25c>)
 800e5c8:	4632      	mov	r2, r6
 800e5ca:	463b      	mov	r3, r7
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	f7f2 f93d 	bl	800084c <__aeabi_ddiv>
 800e5d2:	e79c      	b.n	800e50e <__ieee754_pow+0x3e>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	9304      	str	r3, [sp, #16]
 800e5d8:	2a00      	cmp	r2, #0
 800e5da:	d13d      	bne.n	800e658 <__ieee754_pow+0x188>
 800e5dc:	4b51      	ldr	r3, [pc, #324]	; (800e724 <__ieee754_pow+0x254>)
 800e5de:	4598      	cmp	r8, r3
 800e5e0:	d1ea      	bne.n	800e5b8 <__ieee754_pow+0xe8>
 800e5e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e5e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e5ea:	ea53 030a 	orrs.w	r3, r3, sl
 800e5ee:	f000 845a 	beq.w	800eea6 <__ieee754_pow+0x9d6>
 800e5f2:	4b4f      	ldr	r3, [pc, #316]	; (800e730 <__ieee754_pow+0x260>)
 800e5f4:	429c      	cmp	r4, r3
 800e5f6:	dd08      	ble.n	800e60a <__ieee754_pow+0x13a>
 800e5f8:	f1b9 0f00 	cmp.w	r9, #0
 800e5fc:	f2c0 8457 	blt.w	800eeae <__ieee754_pow+0x9de>
 800e600:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e604:	e783      	b.n	800e50e <__ieee754_pow+0x3e>
 800e606:	2302      	movs	r3, #2
 800e608:	e7e5      	b.n	800e5d6 <__ieee754_pow+0x106>
 800e60a:	f1b9 0f00 	cmp.w	r9, #0
 800e60e:	f04f 0000 	mov.w	r0, #0
 800e612:	f04f 0100 	mov.w	r1, #0
 800e616:	f6bf af7a 	bge.w	800e50e <__ieee754_pow+0x3e>
 800e61a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e61e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e622:	e774      	b.n	800e50e <__ieee754_pow+0x3e>
 800e624:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e628:	d106      	bne.n	800e638 <__ieee754_pow+0x168>
 800e62a:	4632      	mov	r2, r6
 800e62c:	463b      	mov	r3, r7
 800e62e:	4630      	mov	r0, r6
 800e630:	4639      	mov	r1, r7
 800e632:	f7f1 ffe1 	bl	80005f8 <__aeabi_dmul>
 800e636:	e76a      	b.n	800e50e <__ieee754_pow+0x3e>
 800e638:	4b3e      	ldr	r3, [pc, #248]	; (800e734 <__ieee754_pow+0x264>)
 800e63a:	4599      	cmp	r9, r3
 800e63c:	d10c      	bne.n	800e658 <__ieee754_pow+0x188>
 800e63e:	2d00      	cmp	r5, #0
 800e640:	db0a      	blt.n	800e658 <__ieee754_pow+0x188>
 800e642:	ec47 6b10 	vmov	d0, r6, r7
 800e646:	b009      	add	sp, #36	; 0x24
 800e648:	ecbd 8b06 	vpop	{d8-d10}
 800e64c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e650:	f000 be7a 	b.w	800f348 <__ieee754_sqrt>
 800e654:	2300      	movs	r3, #0
 800e656:	9304      	str	r3, [sp, #16]
 800e658:	ec47 6b10 	vmov	d0, r6, r7
 800e65c:	f001 fdd0 	bl	8010200 <fabs>
 800e660:	ec51 0b10 	vmov	r0, r1, d0
 800e664:	f1ba 0f00 	cmp.w	sl, #0
 800e668:	d129      	bne.n	800e6be <__ieee754_pow+0x1ee>
 800e66a:	b124      	cbz	r4, 800e676 <__ieee754_pow+0x1a6>
 800e66c:	4b2f      	ldr	r3, [pc, #188]	; (800e72c <__ieee754_pow+0x25c>)
 800e66e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e672:	429a      	cmp	r2, r3
 800e674:	d123      	bne.n	800e6be <__ieee754_pow+0x1ee>
 800e676:	f1b9 0f00 	cmp.w	r9, #0
 800e67a:	da05      	bge.n	800e688 <__ieee754_pow+0x1b8>
 800e67c:	4602      	mov	r2, r0
 800e67e:	460b      	mov	r3, r1
 800e680:	2000      	movs	r0, #0
 800e682:	492a      	ldr	r1, [pc, #168]	; (800e72c <__ieee754_pow+0x25c>)
 800e684:	f7f2 f8e2 	bl	800084c <__aeabi_ddiv>
 800e688:	2d00      	cmp	r5, #0
 800e68a:	f6bf af40 	bge.w	800e50e <__ieee754_pow+0x3e>
 800e68e:	9b04      	ldr	r3, [sp, #16]
 800e690:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e694:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e698:	4323      	orrs	r3, r4
 800e69a:	d108      	bne.n	800e6ae <__ieee754_pow+0x1de>
 800e69c:	4602      	mov	r2, r0
 800e69e:	460b      	mov	r3, r1
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	f7f1 fdf0 	bl	8000288 <__aeabi_dsub>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	e78f      	b.n	800e5ce <__ieee754_pow+0xfe>
 800e6ae:	9b04      	ldr	r3, [sp, #16]
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	f47f af2c 	bne.w	800e50e <__ieee754_pow+0x3e>
 800e6b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	e727      	b.n	800e50e <__ieee754_pow+0x3e>
 800e6be:	0feb      	lsrs	r3, r5, #31
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	9306      	str	r3, [sp, #24]
 800e6c4:	9a06      	ldr	r2, [sp, #24]
 800e6c6:	9b04      	ldr	r3, [sp, #16]
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	d102      	bne.n	800e6d2 <__ieee754_pow+0x202>
 800e6cc:	4632      	mov	r2, r6
 800e6ce:	463b      	mov	r3, r7
 800e6d0:	e7e6      	b.n	800e6a0 <__ieee754_pow+0x1d0>
 800e6d2:	4b19      	ldr	r3, [pc, #100]	; (800e738 <__ieee754_pow+0x268>)
 800e6d4:	4598      	cmp	r8, r3
 800e6d6:	f340 80fb 	ble.w	800e8d0 <__ieee754_pow+0x400>
 800e6da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e6de:	4598      	cmp	r8, r3
 800e6e0:	4b13      	ldr	r3, [pc, #76]	; (800e730 <__ieee754_pow+0x260>)
 800e6e2:	dd0c      	ble.n	800e6fe <__ieee754_pow+0x22e>
 800e6e4:	429c      	cmp	r4, r3
 800e6e6:	dc0f      	bgt.n	800e708 <__ieee754_pow+0x238>
 800e6e8:	f1b9 0f00 	cmp.w	r9, #0
 800e6ec:	da0f      	bge.n	800e70e <__ieee754_pow+0x23e>
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	b009      	add	sp, #36	; 0x24
 800e6f2:	ecbd 8b06 	vpop	{d8-d10}
 800e6f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fa:	f001 bbd6 	b.w	800feaa <__math_oflow>
 800e6fe:	429c      	cmp	r4, r3
 800e700:	dbf2      	blt.n	800e6e8 <__ieee754_pow+0x218>
 800e702:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <__ieee754_pow+0x25c>)
 800e704:	429c      	cmp	r4, r3
 800e706:	dd19      	ble.n	800e73c <__ieee754_pow+0x26c>
 800e708:	f1b9 0f00 	cmp.w	r9, #0
 800e70c:	dcef      	bgt.n	800e6ee <__ieee754_pow+0x21e>
 800e70e:	2000      	movs	r0, #0
 800e710:	b009      	add	sp, #36	; 0x24
 800e712:	ecbd 8b06 	vpop	{d8-d10}
 800e716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71a:	f001 bbbd 	b.w	800fe98 <__math_uflow>
 800e71e:	bf00      	nop
 800e720:	fff00000 	.word	0xfff00000
 800e724:	7ff00000 	.word	0x7ff00000
 800e728:	433fffff 	.word	0x433fffff
 800e72c:	3ff00000 	.word	0x3ff00000
 800e730:	3fefffff 	.word	0x3fefffff
 800e734:	3fe00000 	.word	0x3fe00000
 800e738:	41e00000 	.word	0x41e00000
 800e73c:	4b60      	ldr	r3, [pc, #384]	; (800e8c0 <__ieee754_pow+0x3f0>)
 800e73e:	2200      	movs	r2, #0
 800e740:	f7f1 fda2 	bl	8000288 <__aeabi_dsub>
 800e744:	a354      	add	r3, pc, #336	; (adr r3, 800e898 <__ieee754_pow+0x3c8>)
 800e746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74a:	4604      	mov	r4, r0
 800e74c:	460d      	mov	r5, r1
 800e74e:	f7f1 ff53 	bl	80005f8 <__aeabi_dmul>
 800e752:	a353      	add	r3, pc, #332	; (adr r3, 800e8a0 <__ieee754_pow+0x3d0>)
 800e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e758:	4606      	mov	r6, r0
 800e75a:	460f      	mov	r7, r1
 800e75c:	4620      	mov	r0, r4
 800e75e:	4629      	mov	r1, r5
 800e760:	f7f1 ff4a 	bl	80005f8 <__aeabi_dmul>
 800e764:	4b57      	ldr	r3, [pc, #348]	; (800e8c4 <__ieee754_pow+0x3f4>)
 800e766:	4682      	mov	sl, r0
 800e768:	468b      	mov	fp, r1
 800e76a:	2200      	movs	r2, #0
 800e76c:	4620      	mov	r0, r4
 800e76e:	4629      	mov	r1, r5
 800e770:	f7f1 ff42 	bl	80005f8 <__aeabi_dmul>
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	a14b      	add	r1, pc, #300	; (adr r1, 800e8a8 <__ieee754_pow+0x3d8>)
 800e77a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e77e:	f7f1 fd83 	bl	8000288 <__aeabi_dsub>
 800e782:	4622      	mov	r2, r4
 800e784:	462b      	mov	r3, r5
 800e786:	f7f1 ff37 	bl	80005f8 <__aeabi_dmul>
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	2000      	movs	r0, #0
 800e790:	494d      	ldr	r1, [pc, #308]	; (800e8c8 <__ieee754_pow+0x3f8>)
 800e792:	f7f1 fd79 	bl	8000288 <__aeabi_dsub>
 800e796:	4622      	mov	r2, r4
 800e798:	4680      	mov	r8, r0
 800e79a:	4689      	mov	r9, r1
 800e79c:	462b      	mov	r3, r5
 800e79e:	4620      	mov	r0, r4
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	f7f1 ff29 	bl	80005f8 <__aeabi_dmul>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	4640      	mov	r0, r8
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	f7f1 ff23 	bl	80005f8 <__aeabi_dmul>
 800e7b2:	a33f      	add	r3, pc, #252	; (adr r3, 800e8b0 <__ieee754_pow+0x3e0>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	f7f1 ff1e 	bl	80005f8 <__aeabi_dmul>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	4650      	mov	r0, sl
 800e7c2:	4659      	mov	r1, fp
 800e7c4:	f7f1 fd60 	bl	8000288 <__aeabi_dsub>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	4680      	mov	r8, r0
 800e7ce:	4689      	mov	r9, r1
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f1 fd5a 	bl	800028c <__adddf3>
 800e7d8:	2000      	movs	r0, #0
 800e7da:	4632      	mov	r2, r6
 800e7dc:	463b      	mov	r3, r7
 800e7de:	4604      	mov	r4, r0
 800e7e0:	460d      	mov	r5, r1
 800e7e2:	f7f1 fd51 	bl	8000288 <__aeabi_dsub>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4640      	mov	r0, r8
 800e7ec:	4649      	mov	r1, r9
 800e7ee:	f7f1 fd4b 	bl	8000288 <__aeabi_dsub>
 800e7f2:	9b04      	ldr	r3, [sp, #16]
 800e7f4:	9a06      	ldr	r2, [sp, #24]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	4682      	mov	sl, r0
 800e7fc:	468b      	mov	fp, r1
 800e7fe:	f040 81e7 	bne.w	800ebd0 <__ieee754_pow+0x700>
 800e802:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e8b8 <__ieee754_pow+0x3e8>
 800e806:	eeb0 8a47 	vmov.f32	s16, s14
 800e80a:	eef0 8a67 	vmov.f32	s17, s15
 800e80e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e812:	2600      	movs	r6, #0
 800e814:	4632      	mov	r2, r6
 800e816:	463b      	mov	r3, r7
 800e818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e81c:	f7f1 fd34 	bl	8000288 <__aeabi_dsub>
 800e820:	4622      	mov	r2, r4
 800e822:	462b      	mov	r3, r5
 800e824:	f7f1 fee8 	bl	80005f8 <__aeabi_dmul>
 800e828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e82c:	4680      	mov	r8, r0
 800e82e:	4689      	mov	r9, r1
 800e830:	4650      	mov	r0, sl
 800e832:	4659      	mov	r1, fp
 800e834:	f7f1 fee0 	bl	80005f8 <__aeabi_dmul>
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
 800e83c:	4640      	mov	r0, r8
 800e83e:	4649      	mov	r1, r9
 800e840:	f7f1 fd24 	bl	800028c <__adddf3>
 800e844:	4632      	mov	r2, r6
 800e846:	463b      	mov	r3, r7
 800e848:	4680      	mov	r8, r0
 800e84a:	4689      	mov	r9, r1
 800e84c:	4620      	mov	r0, r4
 800e84e:	4629      	mov	r1, r5
 800e850:	f7f1 fed2 	bl	80005f8 <__aeabi_dmul>
 800e854:	460b      	mov	r3, r1
 800e856:	4604      	mov	r4, r0
 800e858:	460d      	mov	r5, r1
 800e85a:	4602      	mov	r2, r0
 800e85c:	4649      	mov	r1, r9
 800e85e:	4640      	mov	r0, r8
 800e860:	f7f1 fd14 	bl	800028c <__adddf3>
 800e864:	4b19      	ldr	r3, [pc, #100]	; (800e8cc <__ieee754_pow+0x3fc>)
 800e866:	4299      	cmp	r1, r3
 800e868:	ec45 4b19 	vmov	d9, r4, r5
 800e86c:	4606      	mov	r6, r0
 800e86e:	460f      	mov	r7, r1
 800e870:	468b      	mov	fp, r1
 800e872:	f340 82f1 	ble.w	800ee58 <__ieee754_pow+0x988>
 800e876:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e87a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e87e:	4303      	orrs	r3, r0
 800e880:	f000 81e4 	beq.w	800ec4c <__ieee754_pow+0x77c>
 800e884:	ec51 0b18 	vmov	r0, r1, d8
 800e888:	2200      	movs	r2, #0
 800e88a:	2300      	movs	r3, #0
 800e88c:	f7f2 f926 	bl	8000adc <__aeabi_dcmplt>
 800e890:	3800      	subs	r0, #0
 800e892:	bf18      	it	ne
 800e894:	2001      	movne	r0, #1
 800e896:	e72b      	b.n	800e6f0 <__ieee754_pow+0x220>
 800e898:	60000000 	.word	0x60000000
 800e89c:	3ff71547 	.word	0x3ff71547
 800e8a0:	f85ddf44 	.word	0xf85ddf44
 800e8a4:	3e54ae0b 	.word	0x3e54ae0b
 800e8a8:	55555555 	.word	0x55555555
 800e8ac:	3fd55555 	.word	0x3fd55555
 800e8b0:	652b82fe 	.word	0x652b82fe
 800e8b4:	3ff71547 	.word	0x3ff71547
 800e8b8:	00000000 	.word	0x00000000
 800e8bc:	bff00000 	.word	0xbff00000
 800e8c0:	3ff00000 	.word	0x3ff00000
 800e8c4:	3fd00000 	.word	0x3fd00000
 800e8c8:	3fe00000 	.word	0x3fe00000
 800e8cc:	408fffff 	.word	0x408fffff
 800e8d0:	4bd5      	ldr	r3, [pc, #852]	; (800ec28 <__ieee754_pow+0x758>)
 800e8d2:	402b      	ands	r3, r5
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	b92b      	cbnz	r3, 800e8e4 <__ieee754_pow+0x414>
 800e8d8:	4bd4      	ldr	r3, [pc, #848]	; (800ec2c <__ieee754_pow+0x75c>)
 800e8da:	f7f1 fe8d 	bl	80005f8 <__aeabi_dmul>
 800e8de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	1523      	asrs	r3, r4, #20
 800e8e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e8ea:	4413      	add	r3, r2
 800e8ec:	9305      	str	r3, [sp, #20]
 800e8ee:	4bd0      	ldr	r3, [pc, #832]	; (800ec30 <__ieee754_pow+0x760>)
 800e8f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e8f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e8f8:	429c      	cmp	r4, r3
 800e8fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e8fe:	dd08      	ble.n	800e912 <__ieee754_pow+0x442>
 800e900:	4bcc      	ldr	r3, [pc, #816]	; (800ec34 <__ieee754_pow+0x764>)
 800e902:	429c      	cmp	r4, r3
 800e904:	f340 8162 	ble.w	800ebcc <__ieee754_pow+0x6fc>
 800e908:	9b05      	ldr	r3, [sp, #20]
 800e90a:	3301      	adds	r3, #1
 800e90c:	9305      	str	r3, [sp, #20]
 800e90e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e912:	2400      	movs	r4, #0
 800e914:	00e3      	lsls	r3, r4, #3
 800e916:	9307      	str	r3, [sp, #28]
 800e918:	4bc7      	ldr	r3, [pc, #796]	; (800ec38 <__ieee754_pow+0x768>)
 800e91a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e91e:	ed93 7b00 	vldr	d7, [r3]
 800e922:	4629      	mov	r1, r5
 800e924:	ec53 2b17 	vmov	r2, r3, d7
 800e928:	eeb0 9a47 	vmov.f32	s18, s14
 800e92c:	eef0 9a67 	vmov.f32	s19, s15
 800e930:	4682      	mov	sl, r0
 800e932:	f7f1 fca9 	bl	8000288 <__aeabi_dsub>
 800e936:	4652      	mov	r2, sl
 800e938:	4606      	mov	r6, r0
 800e93a:	460f      	mov	r7, r1
 800e93c:	462b      	mov	r3, r5
 800e93e:	ec51 0b19 	vmov	r0, r1, d9
 800e942:	f7f1 fca3 	bl	800028c <__adddf3>
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	2000      	movs	r0, #0
 800e94c:	49bb      	ldr	r1, [pc, #748]	; (800ec3c <__ieee754_pow+0x76c>)
 800e94e:	f7f1 ff7d 	bl	800084c <__aeabi_ddiv>
 800e952:	ec41 0b1a 	vmov	d10, r0, r1
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	4630      	mov	r0, r6
 800e95c:	4639      	mov	r1, r7
 800e95e:	f7f1 fe4b 	bl	80005f8 <__aeabi_dmul>
 800e962:	2300      	movs	r3, #0
 800e964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e968:	9302      	str	r3, [sp, #8]
 800e96a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e96e:	46ab      	mov	fp, r5
 800e970:	106d      	asrs	r5, r5, #1
 800e972:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e976:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e97a:	ec41 0b18 	vmov	d8, r0, r1
 800e97e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e982:	2200      	movs	r2, #0
 800e984:	4640      	mov	r0, r8
 800e986:	4649      	mov	r1, r9
 800e988:	4614      	mov	r4, r2
 800e98a:	461d      	mov	r5, r3
 800e98c:	f7f1 fe34 	bl	80005f8 <__aeabi_dmul>
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	4630      	mov	r0, r6
 800e996:	4639      	mov	r1, r7
 800e998:	f7f1 fc76 	bl	8000288 <__aeabi_dsub>
 800e99c:	ec53 2b19 	vmov	r2, r3, d9
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	460f      	mov	r7, r1
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	f7f1 fc6e 	bl	8000288 <__aeabi_dsub>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4650      	mov	r0, sl
 800e9b2:	4659      	mov	r1, fp
 800e9b4:	f7f1 fc68 	bl	8000288 <__aeabi_dsub>
 800e9b8:	4642      	mov	r2, r8
 800e9ba:	464b      	mov	r3, r9
 800e9bc:	f7f1 fe1c 	bl	80005f8 <__aeabi_dmul>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	4639      	mov	r1, r7
 800e9c8:	f7f1 fc5e 	bl	8000288 <__aeabi_dsub>
 800e9cc:	ec53 2b1a 	vmov	r2, r3, d10
 800e9d0:	f7f1 fe12 	bl	80005f8 <__aeabi_dmul>
 800e9d4:	ec53 2b18 	vmov	r2, r3, d8
 800e9d8:	ec41 0b19 	vmov	d9, r0, r1
 800e9dc:	ec51 0b18 	vmov	r0, r1, d8
 800e9e0:	f7f1 fe0a 	bl	80005f8 <__aeabi_dmul>
 800e9e4:	a37c      	add	r3, pc, #496	; (adr r3, 800ebd8 <__ieee754_pow+0x708>)
 800e9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	460d      	mov	r5, r1
 800e9ee:	f7f1 fe03 	bl	80005f8 <__aeabi_dmul>
 800e9f2:	a37b      	add	r3, pc, #492	; (adr r3, 800ebe0 <__ieee754_pow+0x710>)
 800e9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f8:	f7f1 fc48 	bl	800028c <__adddf3>
 800e9fc:	4622      	mov	r2, r4
 800e9fe:	462b      	mov	r3, r5
 800ea00:	f7f1 fdfa 	bl	80005f8 <__aeabi_dmul>
 800ea04:	a378      	add	r3, pc, #480	; (adr r3, 800ebe8 <__ieee754_pow+0x718>)
 800ea06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0a:	f7f1 fc3f 	bl	800028c <__adddf3>
 800ea0e:	4622      	mov	r2, r4
 800ea10:	462b      	mov	r3, r5
 800ea12:	f7f1 fdf1 	bl	80005f8 <__aeabi_dmul>
 800ea16:	a376      	add	r3, pc, #472	; (adr r3, 800ebf0 <__ieee754_pow+0x720>)
 800ea18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1c:	f7f1 fc36 	bl	800028c <__adddf3>
 800ea20:	4622      	mov	r2, r4
 800ea22:	462b      	mov	r3, r5
 800ea24:	f7f1 fde8 	bl	80005f8 <__aeabi_dmul>
 800ea28:	a373      	add	r3, pc, #460	; (adr r3, 800ebf8 <__ieee754_pow+0x728>)
 800ea2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2e:	f7f1 fc2d 	bl	800028c <__adddf3>
 800ea32:	4622      	mov	r2, r4
 800ea34:	462b      	mov	r3, r5
 800ea36:	f7f1 fddf 	bl	80005f8 <__aeabi_dmul>
 800ea3a:	a371      	add	r3, pc, #452	; (adr r3, 800ec00 <__ieee754_pow+0x730>)
 800ea3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea40:	f7f1 fc24 	bl	800028c <__adddf3>
 800ea44:	4622      	mov	r2, r4
 800ea46:	4606      	mov	r6, r0
 800ea48:	460f      	mov	r7, r1
 800ea4a:	462b      	mov	r3, r5
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	4629      	mov	r1, r5
 800ea50:	f7f1 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ea54:	4602      	mov	r2, r0
 800ea56:	460b      	mov	r3, r1
 800ea58:	4630      	mov	r0, r6
 800ea5a:	4639      	mov	r1, r7
 800ea5c:	f7f1 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ea60:	4642      	mov	r2, r8
 800ea62:	4604      	mov	r4, r0
 800ea64:	460d      	mov	r5, r1
 800ea66:	464b      	mov	r3, r9
 800ea68:	ec51 0b18 	vmov	r0, r1, d8
 800ea6c:	f7f1 fc0e 	bl	800028c <__adddf3>
 800ea70:	ec53 2b19 	vmov	r2, r3, d9
 800ea74:	f7f1 fdc0 	bl	80005f8 <__aeabi_dmul>
 800ea78:	4622      	mov	r2, r4
 800ea7a:	462b      	mov	r3, r5
 800ea7c:	f7f1 fc06 	bl	800028c <__adddf3>
 800ea80:	4642      	mov	r2, r8
 800ea82:	4682      	mov	sl, r0
 800ea84:	468b      	mov	fp, r1
 800ea86:	464b      	mov	r3, r9
 800ea88:	4640      	mov	r0, r8
 800ea8a:	4649      	mov	r1, r9
 800ea8c:	f7f1 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ea90:	4b6b      	ldr	r3, [pc, #428]	; (800ec40 <__ieee754_pow+0x770>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	4606      	mov	r6, r0
 800ea96:	460f      	mov	r7, r1
 800ea98:	f7f1 fbf8 	bl	800028c <__adddf3>
 800ea9c:	4652      	mov	r2, sl
 800ea9e:	465b      	mov	r3, fp
 800eaa0:	f7f1 fbf4 	bl	800028c <__adddf3>
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	460d      	mov	r5, r1
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	4640      	mov	r0, r8
 800eab0:	4649      	mov	r1, r9
 800eab2:	f7f1 fda1 	bl	80005f8 <__aeabi_dmul>
 800eab6:	4b62      	ldr	r3, [pc, #392]	; (800ec40 <__ieee754_pow+0x770>)
 800eab8:	4680      	mov	r8, r0
 800eaba:	4689      	mov	r9, r1
 800eabc:	2200      	movs	r2, #0
 800eabe:	4620      	mov	r0, r4
 800eac0:	4629      	mov	r1, r5
 800eac2:	f7f1 fbe1 	bl	8000288 <__aeabi_dsub>
 800eac6:	4632      	mov	r2, r6
 800eac8:	463b      	mov	r3, r7
 800eaca:	f7f1 fbdd 	bl	8000288 <__aeabi_dsub>
 800eace:	4602      	mov	r2, r0
 800ead0:	460b      	mov	r3, r1
 800ead2:	4650      	mov	r0, sl
 800ead4:	4659      	mov	r1, fp
 800ead6:	f7f1 fbd7 	bl	8000288 <__aeabi_dsub>
 800eada:	ec53 2b18 	vmov	r2, r3, d8
 800eade:	f7f1 fd8b 	bl	80005f8 <__aeabi_dmul>
 800eae2:	4622      	mov	r2, r4
 800eae4:	4606      	mov	r6, r0
 800eae6:	460f      	mov	r7, r1
 800eae8:	462b      	mov	r3, r5
 800eaea:	ec51 0b19 	vmov	r0, r1, d9
 800eaee:	f7f1 fd83 	bl	80005f8 <__aeabi_dmul>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	4639      	mov	r1, r7
 800eafa:	f7f1 fbc7 	bl	800028c <__adddf3>
 800eafe:	4606      	mov	r6, r0
 800eb00:	460f      	mov	r7, r1
 800eb02:	4602      	mov	r2, r0
 800eb04:	460b      	mov	r3, r1
 800eb06:	4640      	mov	r0, r8
 800eb08:	4649      	mov	r1, r9
 800eb0a:	f7f1 fbbf 	bl	800028c <__adddf3>
 800eb0e:	a33e      	add	r3, pc, #248	; (adr r3, 800ec08 <__ieee754_pow+0x738>)
 800eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb14:	2000      	movs	r0, #0
 800eb16:	4604      	mov	r4, r0
 800eb18:	460d      	mov	r5, r1
 800eb1a:	f7f1 fd6d 	bl	80005f8 <__aeabi_dmul>
 800eb1e:	4642      	mov	r2, r8
 800eb20:	ec41 0b18 	vmov	d8, r0, r1
 800eb24:	464b      	mov	r3, r9
 800eb26:	4620      	mov	r0, r4
 800eb28:	4629      	mov	r1, r5
 800eb2a:	f7f1 fbad 	bl	8000288 <__aeabi_dsub>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	460b      	mov	r3, r1
 800eb32:	4630      	mov	r0, r6
 800eb34:	4639      	mov	r1, r7
 800eb36:	f7f1 fba7 	bl	8000288 <__aeabi_dsub>
 800eb3a:	a335      	add	r3, pc, #212	; (adr r3, 800ec10 <__ieee754_pow+0x740>)
 800eb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb40:	f7f1 fd5a 	bl	80005f8 <__aeabi_dmul>
 800eb44:	a334      	add	r3, pc, #208	; (adr r3, 800ec18 <__ieee754_pow+0x748>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	4606      	mov	r6, r0
 800eb4c:	460f      	mov	r7, r1
 800eb4e:	4620      	mov	r0, r4
 800eb50:	4629      	mov	r1, r5
 800eb52:	f7f1 fd51 	bl	80005f8 <__aeabi_dmul>
 800eb56:	4602      	mov	r2, r0
 800eb58:	460b      	mov	r3, r1
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	4639      	mov	r1, r7
 800eb5e:	f7f1 fb95 	bl	800028c <__adddf3>
 800eb62:	9a07      	ldr	r2, [sp, #28]
 800eb64:	4b37      	ldr	r3, [pc, #220]	; (800ec44 <__ieee754_pow+0x774>)
 800eb66:	4413      	add	r3, r2
 800eb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6c:	f7f1 fb8e 	bl	800028c <__adddf3>
 800eb70:	4682      	mov	sl, r0
 800eb72:	9805      	ldr	r0, [sp, #20]
 800eb74:	468b      	mov	fp, r1
 800eb76:	f7f1 fcd5 	bl	8000524 <__aeabi_i2d>
 800eb7a:	9a07      	ldr	r2, [sp, #28]
 800eb7c:	4b32      	ldr	r3, [pc, #200]	; (800ec48 <__ieee754_pow+0x778>)
 800eb7e:	4413      	add	r3, r2
 800eb80:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb84:	4606      	mov	r6, r0
 800eb86:	460f      	mov	r7, r1
 800eb88:	4652      	mov	r2, sl
 800eb8a:	465b      	mov	r3, fp
 800eb8c:	ec51 0b18 	vmov	r0, r1, d8
 800eb90:	f7f1 fb7c 	bl	800028c <__adddf3>
 800eb94:	4642      	mov	r2, r8
 800eb96:	464b      	mov	r3, r9
 800eb98:	f7f1 fb78 	bl	800028c <__adddf3>
 800eb9c:	4632      	mov	r2, r6
 800eb9e:	463b      	mov	r3, r7
 800eba0:	f7f1 fb74 	bl	800028c <__adddf3>
 800eba4:	2000      	movs	r0, #0
 800eba6:	4632      	mov	r2, r6
 800eba8:	463b      	mov	r3, r7
 800ebaa:	4604      	mov	r4, r0
 800ebac:	460d      	mov	r5, r1
 800ebae:	f7f1 fb6b 	bl	8000288 <__aeabi_dsub>
 800ebb2:	4642      	mov	r2, r8
 800ebb4:	464b      	mov	r3, r9
 800ebb6:	f7f1 fb67 	bl	8000288 <__aeabi_dsub>
 800ebba:	ec53 2b18 	vmov	r2, r3, d8
 800ebbe:	f7f1 fb63 	bl	8000288 <__aeabi_dsub>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	4650      	mov	r0, sl
 800ebc8:	4659      	mov	r1, fp
 800ebca:	e610      	b.n	800e7ee <__ieee754_pow+0x31e>
 800ebcc:	2401      	movs	r4, #1
 800ebce:	e6a1      	b.n	800e914 <__ieee754_pow+0x444>
 800ebd0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ec20 <__ieee754_pow+0x750>
 800ebd4:	e617      	b.n	800e806 <__ieee754_pow+0x336>
 800ebd6:	bf00      	nop
 800ebd8:	4a454eef 	.word	0x4a454eef
 800ebdc:	3fca7e28 	.word	0x3fca7e28
 800ebe0:	93c9db65 	.word	0x93c9db65
 800ebe4:	3fcd864a 	.word	0x3fcd864a
 800ebe8:	a91d4101 	.word	0xa91d4101
 800ebec:	3fd17460 	.word	0x3fd17460
 800ebf0:	518f264d 	.word	0x518f264d
 800ebf4:	3fd55555 	.word	0x3fd55555
 800ebf8:	db6fabff 	.word	0xdb6fabff
 800ebfc:	3fdb6db6 	.word	0x3fdb6db6
 800ec00:	33333303 	.word	0x33333303
 800ec04:	3fe33333 	.word	0x3fe33333
 800ec08:	e0000000 	.word	0xe0000000
 800ec0c:	3feec709 	.word	0x3feec709
 800ec10:	dc3a03fd 	.word	0xdc3a03fd
 800ec14:	3feec709 	.word	0x3feec709
 800ec18:	145b01f5 	.word	0x145b01f5
 800ec1c:	be3e2fe0 	.word	0xbe3e2fe0
 800ec20:	00000000 	.word	0x00000000
 800ec24:	3ff00000 	.word	0x3ff00000
 800ec28:	7ff00000 	.word	0x7ff00000
 800ec2c:	43400000 	.word	0x43400000
 800ec30:	0003988e 	.word	0x0003988e
 800ec34:	000bb679 	.word	0x000bb679
 800ec38:	080109f8 	.word	0x080109f8
 800ec3c:	3ff00000 	.word	0x3ff00000
 800ec40:	40080000 	.word	0x40080000
 800ec44:	08010a18 	.word	0x08010a18
 800ec48:	08010a08 	.word	0x08010a08
 800ec4c:	a3b5      	add	r3, pc, #724	; (adr r3, 800ef24 <__ieee754_pow+0xa54>)
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	4640      	mov	r0, r8
 800ec54:	4649      	mov	r1, r9
 800ec56:	f7f1 fb19 	bl	800028c <__adddf3>
 800ec5a:	4622      	mov	r2, r4
 800ec5c:	ec41 0b1a 	vmov	d10, r0, r1
 800ec60:	462b      	mov	r3, r5
 800ec62:	4630      	mov	r0, r6
 800ec64:	4639      	mov	r1, r7
 800ec66:	f7f1 fb0f 	bl	8000288 <__aeabi_dsub>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	ec51 0b1a 	vmov	r0, r1, d10
 800ec72:	f7f1 ff51 	bl	8000b18 <__aeabi_dcmpgt>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	f47f ae04 	bne.w	800e884 <__ieee754_pow+0x3b4>
 800ec7c:	4aa4      	ldr	r2, [pc, #656]	; (800ef10 <__ieee754_pow+0xa40>)
 800ec7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec82:	4293      	cmp	r3, r2
 800ec84:	f340 8108 	ble.w	800ee98 <__ieee754_pow+0x9c8>
 800ec88:	151b      	asrs	r3, r3, #20
 800ec8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ec8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ec92:	fa4a f303 	asr.w	r3, sl, r3
 800ec96:	445b      	add	r3, fp
 800ec98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ec9c:	4e9d      	ldr	r6, [pc, #628]	; (800ef14 <__ieee754_pow+0xa44>)
 800ec9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800eca2:	4116      	asrs	r6, r2
 800eca4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800eca8:	2000      	movs	r0, #0
 800ecaa:	ea23 0106 	bic.w	r1, r3, r6
 800ecae:	f1c2 0214 	rsb	r2, r2, #20
 800ecb2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ecb6:	fa4a fa02 	asr.w	sl, sl, r2
 800ecba:	f1bb 0f00 	cmp.w	fp, #0
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	4629      	mov	r1, r5
 800ecc6:	bfb8      	it	lt
 800ecc8:	f1ca 0a00 	rsblt	sl, sl, #0
 800eccc:	f7f1 fadc 	bl	8000288 <__aeabi_dsub>
 800ecd0:	ec41 0b19 	vmov	d9, r0, r1
 800ecd4:	4642      	mov	r2, r8
 800ecd6:	464b      	mov	r3, r9
 800ecd8:	ec51 0b19 	vmov	r0, r1, d9
 800ecdc:	f7f1 fad6 	bl	800028c <__adddf3>
 800ece0:	a37b      	add	r3, pc, #492	; (adr r3, 800eed0 <__ieee754_pow+0xa00>)
 800ece2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece6:	2000      	movs	r0, #0
 800ece8:	4604      	mov	r4, r0
 800ecea:	460d      	mov	r5, r1
 800ecec:	f7f1 fc84 	bl	80005f8 <__aeabi_dmul>
 800ecf0:	ec53 2b19 	vmov	r2, r3, d9
 800ecf4:	4606      	mov	r6, r0
 800ecf6:	460f      	mov	r7, r1
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	4629      	mov	r1, r5
 800ecfc:	f7f1 fac4 	bl	8000288 <__aeabi_dsub>
 800ed00:	4602      	mov	r2, r0
 800ed02:	460b      	mov	r3, r1
 800ed04:	4640      	mov	r0, r8
 800ed06:	4649      	mov	r1, r9
 800ed08:	f7f1 fabe 	bl	8000288 <__aeabi_dsub>
 800ed0c:	a372      	add	r3, pc, #456	; (adr r3, 800eed8 <__ieee754_pow+0xa08>)
 800ed0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed12:	f7f1 fc71 	bl	80005f8 <__aeabi_dmul>
 800ed16:	a372      	add	r3, pc, #456	; (adr r3, 800eee0 <__ieee754_pow+0xa10>)
 800ed18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1c:	4680      	mov	r8, r0
 800ed1e:	4689      	mov	r9, r1
 800ed20:	4620      	mov	r0, r4
 800ed22:	4629      	mov	r1, r5
 800ed24:	f7f1 fc68 	bl	80005f8 <__aeabi_dmul>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4640      	mov	r0, r8
 800ed2e:	4649      	mov	r1, r9
 800ed30:	f7f1 faac 	bl	800028c <__adddf3>
 800ed34:	4604      	mov	r4, r0
 800ed36:	460d      	mov	r5, r1
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	4639      	mov	r1, r7
 800ed40:	f7f1 faa4 	bl	800028c <__adddf3>
 800ed44:	4632      	mov	r2, r6
 800ed46:	463b      	mov	r3, r7
 800ed48:	4680      	mov	r8, r0
 800ed4a:	4689      	mov	r9, r1
 800ed4c:	f7f1 fa9c 	bl	8000288 <__aeabi_dsub>
 800ed50:	4602      	mov	r2, r0
 800ed52:	460b      	mov	r3, r1
 800ed54:	4620      	mov	r0, r4
 800ed56:	4629      	mov	r1, r5
 800ed58:	f7f1 fa96 	bl	8000288 <__aeabi_dsub>
 800ed5c:	4642      	mov	r2, r8
 800ed5e:	4606      	mov	r6, r0
 800ed60:	460f      	mov	r7, r1
 800ed62:	464b      	mov	r3, r9
 800ed64:	4640      	mov	r0, r8
 800ed66:	4649      	mov	r1, r9
 800ed68:	f7f1 fc46 	bl	80005f8 <__aeabi_dmul>
 800ed6c:	a35e      	add	r3, pc, #376	; (adr r3, 800eee8 <__ieee754_pow+0xa18>)
 800ed6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed72:	4604      	mov	r4, r0
 800ed74:	460d      	mov	r5, r1
 800ed76:	f7f1 fc3f 	bl	80005f8 <__aeabi_dmul>
 800ed7a:	a35d      	add	r3, pc, #372	; (adr r3, 800eef0 <__ieee754_pow+0xa20>)
 800ed7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed80:	f7f1 fa82 	bl	8000288 <__aeabi_dsub>
 800ed84:	4622      	mov	r2, r4
 800ed86:	462b      	mov	r3, r5
 800ed88:	f7f1 fc36 	bl	80005f8 <__aeabi_dmul>
 800ed8c:	a35a      	add	r3, pc, #360	; (adr r3, 800eef8 <__ieee754_pow+0xa28>)
 800ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed92:	f7f1 fa7b 	bl	800028c <__adddf3>
 800ed96:	4622      	mov	r2, r4
 800ed98:	462b      	mov	r3, r5
 800ed9a:	f7f1 fc2d 	bl	80005f8 <__aeabi_dmul>
 800ed9e:	a358      	add	r3, pc, #352	; (adr r3, 800ef00 <__ieee754_pow+0xa30>)
 800eda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda4:	f7f1 fa70 	bl	8000288 <__aeabi_dsub>
 800eda8:	4622      	mov	r2, r4
 800edaa:	462b      	mov	r3, r5
 800edac:	f7f1 fc24 	bl	80005f8 <__aeabi_dmul>
 800edb0:	a355      	add	r3, pc, #340	; (adr r3, 800ef08 <__ieee754_pow+0xa38>)
 800edb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb6:	f7f1 fa69 	bl	800028c <__adddf3>
 800edba:	4622      	mov	r2, r4
 800edbc:	462b      	mov	r3, r5
 800edbe:	f7f1 fc1b 	bl	80005f8 <__aeabi_dmul>
 800edc2:	4602      	mov	r2, r0
 800edc4:	460b      	mov	r3, r1
 800edc6:	4640      	mov	r0, r8
 800edc8:	4649      	mov	r1, r9
 800edca:	f7f1 fa5d 	bl	8000288 <__aeabi_dsub>
 800edce:	4604      	mov	r4, r0
 800edd0:	460d      	mov	r5, r1
 800edd2:	4602      	mov	r2, r0
 800edd4:	460b      	mov	r3, r1
 800edd6:	4640      	mov	r0, r8
 800edd8:	4649      	mov	r1, r9
 800edda:	f7f1 fc0d 	bl	80005f8 <__aeabi_dmul>
 800edde:	2200      	movs	r2, #0
 800ede0:	ec41 0b19 	vmov	d9, r0, r1
 800ede4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ede8:	4620      	mov	r0, r4
 800edea:	4629      	mov	r1, r5
 800edec:	f7f1 fa4c 	bl	8000288 <__aeabi_dsub>
 800edf0:	4602      	mov	r2, r0
 800edf2:	460b      	mov	r3, r1
 800edf4:	ec51 0b19 	vmov	r0, r1, d9
 800edf8:	f7f1 fd28 	bl	800084c <__aeabi_ddiv>
 800edfc:	4632      	mov	r2, r6
 800edfe:	4604      	mov	r4, r0
 800ee00:	460d      	mov	r5, r1
 800ee02:	463b      	mov	r3, r7
 800ee04:	4640      	mov	r0, r8
 800ee06:	4649      	mov	r1, r9
 800ee08:	f7f1 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ee0c:	4632      	mov	r2, r6
 800ee0e:	463b      	mov	r3, r7
 800ee10:	f7f1 fa3c 	bl	800028c <__adddf3>
 800ee14:	4602      	mov	r2, r0
 800ee16:	460b      	mov	r3, r1
 800ee18:	4620      	mov	r0, r4
 800ee1a:	4629      	mov	r1, r5
 800ee1c:	f7f1 fa34 	bl	8000288 <__aeabi_dsub>
 800ee20:	4642      	mov	r2, r8
 800ee22:	464b      	mov	r3, r9
 800ee24:	f7f1 fa30 	bl	8000288 <__aeabi_dsub>
 800ee28:	460b      	mov	r3, r1
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	493a      	ldr	r1, [pc, #232]	; (800ef18 <__ieee754_pow+0xa48>)
 800ee2e:	2000      	movs	r0, #0
 800ee30:	f7f1 fa2a 	bl	8000288 <__aeabi_dsub>
 800ee34:	ec41 0b10 	vmov	d0, r0, r1
 800ee38:	ee10 3a90 	vmov	r3, s1
 800ee3c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ee40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee44:	da2b      	bge.n	800ee9e <__ieee754_pow+0x9ce>
 800ee46:	4650      	mov	r0, sl
 800ee48:	f001 fa6e 	bl	8010328 <scalbn>
 800ee4c:	ec51 0b10 	vmov	r0, r1, d0
 800ee50:	ec53 2b18 	vmov	r2, r3, d8
 800ee54:	f7ff bbed 	b.w	800e632 <__ieee754_pow+0x162>
 800ee58:	4b30      	ldr	r3, [pc, #192]	; (800ef1c <__ieee754_pow+0xa4c>)
 800ee5a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ee5e:	429e      	cmp	r6, r3
 800ee60:	f77f af0c 	ble.w	800ec7c <__ieee754_pow+0x7ac>
 800ee64:	4b2e      	ldr	r3, [pc, #184]	; (800ef20 <__ieee754_pow+0xa50>)
 800ee66:	440b      	add	r3, r1
 800ee68:	4303      	orrs	r3, r0
 800ee6a:	d009      	beq.n	800ee80 <__ieee754_pow+0x9b0>
 800ee6c:	ec51 0b18 	vmov	r0, r1, d8
 800ee70:	2200      	movs	r2, #0
 800ee72:	2300      	movs	r3, #0
 800ee74:	f7f1 fe32 	bl	8000adc <__aeabi_dcmplt>
 800ee78:	3800      	subs	r0, #0
 800ee7a:	bf18      	it	ne
 800ee7c:	2001      	movne	r0, #1
 800ee7e:	e447      	b.n	800e710 <__ieee754_pow+0x240>
 800ee80:	4622      	mov	r2, r4
 800ee82:	462b      	mov	r3, r5
 800ee84:	f7f1 fa00 	bl	8000288 <__aeabi_dsub>
 800ee88:	4642      	mov	r2, r8
 800ee8a:	464b      	mov	r3, r9
 800ee8c:	f7f1 fe3a 	bl	8000b04 <__aeabi_dcmpge>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	f43f aef3 	beq.w	800ec7c <__ieee754_pow+0x7ac>
 800ee96:	e7e9      	b.n	800ee6c <__ieee754_pow+0x99c>
 800ee98:	f04f 0a00 	mov.w	sl, #0
 800ee9c:	e71a      	b.n	800ecd4 <__ieee754_pow+0x804>
 800ee9e:	ec51 0b10 	vmov	r0, r1, d0
 800eea2:	4619      	mov	r1, r3
 800eea4:	e7d4      	b.n	800ee50 <__ieee754_pow+0x980>
 800eea6:	491c      	ldr	r1, [pc, #112]	; (800ef18 <__ieee754_pow+0xa48>)
 800eea8:	2000      	movs	r0, #0
 800eeaa:	f7ff bb30 	b.w	800e50e <__ieee754_pow+0x3e>
 800eeae:	2000      	movs	r0, #0
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	f7ff bb2c 	b.w	800e50e <__ieee754_pow+0x3e>
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	4639      	mov	r1, r7
 800eeba:	f7ff bb28 	b.w	800e50e <__ieee754_pow+0x3e>
 800eebe:	9204      	str	r2, [sp, #16]
 800eec0:	f7ff bb7a 	b.w	800e5b8 <__ieee754_pow+0xe8>
 800eec4:	2300      	movs	r3, #0
 800eec6:	f7ff bb64 	b.w	800e592 <__ieee754_pow+0xc2>
 800eeca:	bf00      	nop
 800eecc:	f3af 8000 	nop.w
 800eed0:	00000000 	.word	0x00000000
 800eed4:	3fe62e43 	.word	0x3fe62e43
 800eed8:	fefa39ef 	.word	0xfefa39ef
 800eedc:	3fe62e42 	.word	0x3fe62e42
 800eee0:	0ca86c39 	.word	0x0ca86c39
 800eee4:	be205c61 	.word	0xbe205c61
 800eee8:	72bea4d0 	.word	0x72bea4d0
 800eeec:	3e663769 	.word	0x3e663769
 800eef0:	c5d26bf1 	.word	0xc5d26bf1
 800eef4:	3ebbbd41 	.word	0x3ebbbd41
 800eef8:	af25de2c 	.word	0xaf25de2c
 800eefc:	3f11566a 	.word	0x3f11566a
 800ef00:	16bebd93 	.word	0x16bebd93
 800ef04:	3f66c16c 	.word	0x3f66c16c
 800ef08:	5555553e 	.word	0x5555553e
 800ef0c:	3fc55555 	.word	0x3fc55555
 800ef10:	3fe00000 	.word	0x3fe00000
 800ef14:	000fffff 	.word	0x000fffff
 800ef18:	3ff00000 	.word	0x3ff00000
 800ef1c:	4090cbff 	.word	0x4090cbff
 800ef20:	3f6f3400 	.word	0x3f6f3400
 800ef24:	652b82fe 	.word	0x652b82fe
 800ef28:	3c971547 	.word	0x3c971547
 800ef2c:	00000000 	.word	0x00000000

0800ef30 <__ieee754_rem_pio2>:
 800ef30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef34:	ed2d 8b02 	vpush	{d8}
 800ef38:	ec55 4b10 	vmov	r4, r5, d0
 800ef3c:	4bca      	ldr	r3, [pc, #808]	; (800f268 <__ieee754_rem_pio2+0x338>)
 800ef3e:	b08b      	sub	sp, #44	; 0x2c
 800ef40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ef44:	4598      	cmp	r8, r3
 800ef46:	4682      	mov	sl, r0
 800ef48:	9502      	str	r5, [sp, #8]
 800ef4a:	dc08      	bgt.n	800ef5e <__ieee754_rem_pio2+0x2e>
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	2300      	movs	r3, #0
 800ef50:	ed80 0b00 	vstr	d0, [r0]
 800ef54:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ef58:	f04f 0b00 	mov.w	fp, #0
 800ef5c:	e028      	b.n	800efb0 <__ieee754_rem_pio2+0x80>
 800ef5e:	4bc3      	ldr	r3, [pc, #780]	; (800f26c <__ieee754_rem_pio2+0x33c>)
 800ef60:	4598      	cmp	r8, r3
 800ef62:	dc78      	bgt.n	800f056 <__ieee754_rem_pio2+0x126>
 800ef64:	9b02      	ldr	r3, [sp, #8]
 800ef66:	4ec2      	ldr	r6, [pc, #776]	; (800f270 <__ieee754_rem_pio2+0x340>)
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	ee10 0a10 	vmov	r0, s0
 800ef6e:	a3b0      	add	r3, pc, #704	; (adr r3, 800f230 <__ieee754_rem_pio2+0x300>)
 800ef70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef74:	4629      	mov	r1, r5
 800ef76:	dd39      	ble.n	800efec <__ieee754_rem_pio2+0xbc>
 800ef78:	f7f1 f986 	bl	8000288 <__aeabi_dsub>
 800ef7c:	45b0      	cmp	r8, r6
 800ef7e:	4604      	mov	r4, r0
 800ef80:	460d      	mov	r5, r1
 800ef82:	d01b      	beq.n	800efbc <__ieee754_rem_pio2+0x8c>
 800ef84:	a3ac      	add	r3, pc, #688	; (adr r3, 800f238 <__ieee754_rem_pio2+0x308>)
 800ef86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8a:	f7f1 f97d 	bl	8000288 <__aeabi_dsub>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	460b      	mov	r3, r1
 800ef92:	e9ca 2300 	strd	r2, r3, [sl]
 800ef96:	4620      	mov	r0, r4
 800ef98:	4629      	mov	r1, r5
 800ef9a:	f7f1 f975 	bl	8000288 <__aeabi_dsub>
 800ef9e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f238 <__ieee754_rem_pio2+0x308>)
 800efa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa4:	f7f1 f970 	bl	8000288 <__aeabi_dsub>
 800efa8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800efac:	f04f 0b01 	mov.w	fp, #1
 800efb0:	4658      	mov	r0, fp
 800efb2:	b00b      	add	sp, #44	; 0x2c
 800efb4:	ecbd 8b02 	vpop	{d8}
 800efb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efbc:	a3a0      	add	r3, pc, #640	; (adr r3, 800f240 <__ieee754_rem_pio2+0x310>)
 800efbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc2:	f7f1 f961 	bl	8000288 <__aeabi_dsub>
 800efc6:	a3a0      	add	r3, pc, #640	; (adr r3, 800f248 <__ieee754_rem_pio2+0x318>)
 800efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efcc:	4604      	mov	r4, r0
 800efce:	460d      	mov	r5, r1
 800efd0:	f7f1 f95a 	bl	8000288 <__aeabi_dsub>
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	e9ca 2300 	strd	r2, r3, [sl]
 800efdc:	4620      	mov	r0, r4
 800efde:	4629      	mov	r1, r5
 800efe0:	f7f1 f952 	bl	8000288 <__aeabi_dsub>
 800efe4:	a398      	add	r3, pc, #608	; (adr r3, 800f248 <__ieee754_rem_pio2+0x318>)
 800efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efea:	e7db      	b.n	800efa4 <__ieee754_rem_pio2+0x74>
 800efec:	f7f1 f94e 	bl	800028c <__adddf3>
 800eff0:	45b0      	cmp	r8, r6
 800eff2:	4604      	mov	r4, r0
 800eff4:	460d      	mov	r5, r1
 800eff6:	d016      	beq.n	800f026 <__ieee754_rem_pio2+0xf6>
 800eff8:	a38f      	add	r3, pc, #572	; (adr r3, 800f238 <__ieee754_rem_pio2+0x308>)
 800effa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effe:	f7f1 f945 	bl	800028c <__adddf3>
 800f002:	4602      	mov	r2, r0
 800f004:	460b      	mov	r3, r1
 800f006:	e9ca 2300 	strd	r2, r3, [sl]
 800f00a:	4620      	mov	r0, r4
 800f00c:	4629      	mov	r1, r5
 800f00e:	f7f1 f93b 	bl	8000288 <__aeabi_dsub>
 800f012:	a389      	add	r3, pc, #548	; (adr r3, 800f238 <__ieee754_rem_pio2+0x308>)
 800f014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f018:	f7f1 f938 	bl	800028c <__adddf3>
 800f01c:	f04f 3bff 	mov.w	fp, #4294967295
 800f020:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f024:	e7c4      	b.n	800efb0 <__ieee754_rem_pio2+0x80>
 800f026:	a386      	add	r3, pc, #536	; (adr r3, 800f240 <__ieee754_rem_pio2+0x310>)
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	f7f1 f92e 	bl	800028c <__adddf3>
 800f030:	a385      	add	r3, pc, #532	; (adr r3, 800f248 <__ieee754_rem_pio2+0x318>)
 800f032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f036:	4604      	mov	r4, r0
 800f038:	460d      	mov	r5, r1
 800f03a:	f7f1 f927 	bl	800028c <__adddf3>
 800f03e:	4602      	mov	r2, r0
 800f040:	460b      	mov	r3, r1
 800f042:	e9ca 2300 	strd	r2, r3, [sl]
 800f046:	4620      	mov	r0, r4
 800f048:	4629      	mov	r1, r5
 800f04a:	f7f1 f91d 	bl	8000288 <__aeabi_dsub>
 800f04e:	a37e      	add	r3, pc, #504	; (adr r3, 800f248 <__ieee754_rem_pio2+0x318>)
 800f050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f054:	e7e0      	b.n	800f018 <__ieee754_rem_pio2+0xe8>
 800f056:	4b87      	ldr	r3, [pc, #540]	; (800f274 <__ieee754_rem_pio2+0x344>)
 800f058:	4598      	cmp	r8, r3
 800f05a:	f300 80d9 	bgt.w	800f210 <__ieee754_rem_pio2+0x2e0>
 800f05e:	f001 f8cf 	bl	8010200 <fabs>
 800f062:	ec55 4b10 	vmov	r4, r5, d0
 800f066:	ee10 0a10 	vmov	r0, s0
 800f06a:	a379      	add	r3, pc, #484	; (adr r3, 800f250 <__ieee754_rem_pio2+0x320>)
 800f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f070:	4629      	mov	r1, r5
 800f072:	f7f1 fac1 	bl	80005f8 <__aeabi_dmul>
 800f076:	4b80      	ldr	r3, [pc, #512]	; (800f278 <__ieee754_rem_pio2+0x348>)
 800f078:	2200      	movs	r2, #0
 800f07a:	f7f1 f907 	bl	800028c <__adddf3>
 800f07e:	f7f1 fd6b 	bl	8000b58 <__aeabi_d2iz>
 800f082:	4683      	mov	fp, r0
 800f084:	f7f1 fa4e 	bl	8000524 <__aeabi_i2d>
 800f088:	4602      	mov	r2, r0
 800f08a:	460b      	mov	r3, r1
 800f08c:	ec43 2b18 	vmov	d8, r2, r3
 800f090:	a367      	add	r3, pc, #412	; (adr r3, 800f230 <__ieee754_rem_pio2+0x300>)
 800f092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f096:	f7f1 faaf 	bl	80005f8 <__aeabi_dmul>
 800f09a:	4602      	mov	r2, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	4620      	mov	r0, r4
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	f7f1 f8f1 	bl	8000288 <__aeabi_dsub>
 800f0a6:	a364      	add	r3, pc, #400	; (adr r3, 800f238 <__ieee754_rem_pio2+0x308>)
 800f0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	460f      	mov	r7, r1
 800f0b0:	ec51 0b18 	vmov	r0, r1, d8
 800f0b4:	f7f1 faa0 	bl	80005f8 <__aeabi_dmul>
 800f0b8:	f1bb 0f1f 	cmp.w	fp, #31
 800f0bc:	4604      	mov	r4, r0
 800f0be:	460d      	mov	r5, r1
 800f0c0:	dc0d      	bgt.n	800f0de <__ieee754_rem_pio2+0x1ae>
 800f0c2:	4b6e      	ldr	r3, [pc, #440]	; (800f27c <__ieee754_rem_pio2+0x34c>)
 800f0c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0cc:	4543      	cmp	r3, r8
 800f0ce:	d006      	beq.n	800f0de <__ieee754_rem_pio2+0x1ae>
 800f0d0:	4622      	mov	r2, r4
 800f0d2:	462b      	mov	r3, r5
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	4639      	mov	r1, r7
 800f0d8:	f7f1 f8d6 	bl	8000288 <__aeabi_dsub>
 800f0dc:	e00f      	b.n	800f0fe <__ieee754_rem_pio2+0x1ce>
 800f0de:	462b      	mov	r3, r5
 800f0e0:	4622      	mov	r2, r4
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	f7f1 f8cf 	bl	8000288 <__aeabi_dsub>
 800f0ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f0ee:	9303      	str	r3, [sp, #12]
 800f0f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f0f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f0f8:	f1b8 0f10 	cmp.w	r8, #16
 800f0fc:	dc02      	bgt.n	800f104 <__ieee754_rem_pio2+0x1d4>
 800f0fe:	e9ca 0100 	strd	r0, r1, [sl]
 800f102:	e039      	b.n	800f178 <__ieee754_rem_pio2+0x248>
 800f104:	a34e      	add	r3, pc, #312	; (adr r3, 800f240 <__ieee754_rem_pio2+0x310>)
 800f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10a:	ec51 0b18 	vmov	r0, r1, d8
 800f10e:	f7f1 fa73 	bl	80005f8 <__aeabi_dmul>
 800f112:	4604      	mov	r4, r0
 800f114:	460d      	mov	r5, r1
 800f116:	4602      	mov	r2, r0
 800f118:	460b      	mov	r3, r1
 800f11a:	4630      	mov	r0, r6
 800f11c:	4639      	mov	r1, r7
 800f11e:	f7f1 f8b3 	bl	8000288 <__aeabi_dsub>
 800f122:	4602      	mov	r2, r0
 800f124:	460b      	mov	r3, r1
 800f126:	4680      	mov	r8, r0
 800f128:	4689      	mov	r9, r1
 800f12a:	4630      	mov	r0, r6
 800f12c:	4639      	mov	r1, r7
 800f12e:	f7f1 f8ab 	bl	8000288 <__aeabi_dsub>
 800f132:	4622      	mov	r2, r4
 800f134:	462b      	mov	r3, r5
 800f136:	f7f1 f8a7 	bl	8000288 <__aeabi_dsub>
 800f13a:	a343      	add	r3, pc, #268	; (adr r3, 800f248 <__ieee754_rem_pio2+0x318>)
 800f13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f140:	4604      	mov	r4, r0
 800f142:	460d      	mov	r5, r1
 800f144:	ec51 0b18 	vmov	r0, r1, d8
 800f148:	f7f1 fa56 	bl	80005f8 <__aeabi_dmul>
 800f14c:	4622      	mov	r2, r4
 800f14e:	462b      	mov	r3, r5
 800f150:	f7f1 f89a 	bl	8000288 <__aeabi_dsub>
 800f154:	4602      	mov	r2, r0
 800f156:	460b      	mov	r3, r1
 800f158:	4604      	mov	r4, r0
 800f15a:	460d      	mov	r5, r1
 800f15c:	4640      	mov	r0, r8
 800f15e:	4649      	mov	r1, r9
 800f160:	f7f1 f892 	bl	8000288 <__aeabi_dsub>
 800f164:	9a03      	ldr	r2, [sp, #12]
 800f166:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f16a:	1ad3      	subs	r3, r2, r3
 800f16c:	2b31      	cmp	r3, #49	; 0x31
 800f16e:	dc24      	bgt.n	800f1ba <__ieee754_rem_pio2+0x28a>
 800f170:	e9ca 0100 	strd	r0, r1, [sl]
 800f174:	4646      	mov	r6, r8
 800f176:	464f      	mov	r7, r9
 800f178:	e9da 8900 	ldrd	r8, r9, [sl]
 800f17c:	4630      	mov	r0, r6
 800f17e:	4642      	mov	r2, r8
 800f180:	464b      	mov	r3, r9
 800f182:	4639      	mov	r1, r7
 800f184:	f7f1 f880 	bl	8000288 <__aeabi_dsub>
 800f188:	462b      	mov	r3, r5
 800f18a:	4622      	mov	r2, r4
 800f18c:	f7f1 f87c 	bl	8000288 <__aeabi_dsub>
 800f190:	9b02      	ldr	r3, [sp, #8]
 800f192:	2b00      	cmp	r3, #0
 800f194:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f198:	f6bf af0a 	bge.w	800efb0 <__ieee754_rem_pio2+0x80>
 800f19c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f1a0:	f8ca 3004 	str.w	r3, [sl, #4]
 800f1a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1a8:	f8ca 8000 	str.w	r8, [sl]
 800f1ac:	f8ca 0008 	str.w	r0, [sl, #8]
 800f1b0:	f8ca 300c 	str.w	r3, [sl, #12]
 800f1b4:	f1cb 0b00 	rsb	fp, fp, #0
 800f1b8:	e6fa      	b.n	800efb0 <__ieee754_rem_pio2+0x80>
 800f1ba:	a327      	add	r3, pc, #156	; (adr r3, 800f258 <__ieee754_rem_pio2+0x328>)
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	ec51 0b18 	vmov	r0, r1, d8
 800f1c4:	f7f1 fa18 	bl	80005f8 <__aeabi_dmul>
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	460d      	mov	r5, r1
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	4649      	mov	r1, r9
 800f1d4:	f7f1 f858 	bl	8000288 <__aeabi_dsub>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4606      	mov	r6, r0
 800f1de:	460f      	mov	r7, r1
 800f1e0:	4640      	mov	r0, r8
 800f1e2:	4649      	mov	r1, r9
 800f1e4:	f7f1 f850 	bl	8000288 <__aeabi_dsub>
 800f1e8:	4622      	mov	r2, r4
 800f1ea:	462b      	mov	r3, r5
 800f1ec:	f7f1 f84c 	bl	8000288 <__aeabi_dsub>
 800f1f0:	a31b      	add	r3, pc, #108	; (adr r3, 800f260 <__ieee754_rem_pio2+0x330>)
 800f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	460d      	mov	r5, r1
 800f1fa:	ec51 0b18 	vmov	r0, r1, d8
 800f1fe:	f7f1 f9fb 	bl	80005f8 <__aeabi_dmul>
 800f202:	4622      	mov	r2, r4
 800f204:	462b      	mov	r3, r5
 800f206:	f7f1 f83f 	bl	8000288 <__aeabi_dsub>
 800f20a:	4604      	mov	r4, r0
 800f20c:	460d      	mov	r5, r1
 800f20e:	e75f      	b.n	800f0d0 <__ieee754_rem_pio2+0x1a0>
 800f210:	4b1b      	ldr	r3, [pc, #108]	; (800f280 <__ieee754_rem_pio2+0x350>)
 800f212:	4598      	cmp	r8, r3
 800f214:	dd36      	ble.n	800f284 <__ieee754_rem_pio2+0x354>
 800f216:	ee10 2a10 	vmov	r2, s0
 800f21a:	462b      	mov	r3, r5
 800f21c:	4620      	mov	r0, r4
 800f21e:	4629      	mov	r1, r5
 800f220:	f7f1 f832 	bl	8000288 <__aeabi_dsub>
 800f224:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f228:	e9ca 0100 	strd	r0, r1, [sl]
 800f22c:	e694      	b.n	800ef58 <__ieee754_rem_pio2+0x28>
 800f22e:	bf00      	nop
 800f230:	54400000 	.word	0x54400000
 800f234:	3ff921fb 	.word	0x3ff921fb
 800f238:	1a626331 	.word	0x1a626331
 800f23c:	3dd0b461 	.word	0x3dd0b461
 800f240:	1a600000 	.word	0x1a600000
 800f244:	3dd0b461 	.word	0x3dd0b461
 800f248:	2e037073 	.word	0x2e037073
 800f24c:	3ba3198a 	.word	0x3ba3198a
 800f250:	6dc9c883 	.word	0x6dc9c883
 800f254:	3fe45f30 	.word	0x3fe45f30
 800f258:	2e000000 	.word	0x2e000000
 800f25c:	3ba3198a 	.word	0x3ba3198a
 800f260:	252049c1 	.word	0x252049c1
 800f264:	397b839a 	.word	0x397b839a
 800f268:	3fe921fb 	.word	0x3fe921fb
 800f26c:	4002d97b 	.word	0x4002d97b
 800f270:	3ff921fb 	.word	0x3ff921fb
 800f274:	413921fb 	.word	0x413921fb
 800f278:	3fe00000 	.word	0x3fe00000
 800f27c:	08010a28 	.word	0x08010a28
 800f280:	7fefffff 	.word	0x7fefffff
 800f284:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f288:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f28c:	ee10 0a10 	vmov	r0, s0
 800f290:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f294:	ee10 6a10 	vmov	r6, s0
 800f298:	460f      	mov	r7, r1
 800f29a:	f7f1 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800f29e:	f7f1 f941 	bl	8000524 <__aeabi_i2d>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	4630      	mov	r0, r6
 800f2a8:	4639      	mov	r1, r7
 800f2aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f2ae:	f7f0 ffeb 	bl	8000288 <__aeabi_dsub>
 800f2b2:	4b23      	ldr	r3, [pc, #140]	; (800f340 <__ieee754_rem_pio2+0x410>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f7f1 f99f 	bl	80005f8 <__aeabi_dmul>
 800f2ba:	460f      	mov	r7, r1
 800f2bc:	4606      	mov	r6, r0
 800f2be:	f7f1 fc4b 	bl	8000b58 <__aeabi_d2iz>
 800f2c2:	f7f1 f92f 	bl	8000524 <__aeabi_i2d>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4630      	mov	r0, r6
 800f2cc:	4639      	mov	r1, r7
 800f2ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f2d2:	f7f0 ffd9 	bl	8000288 <__aeabi_dsub>
 800f2d6:	4b1a      	ldr	r3, [pc, #104]	; (800f340 <__ieee754_rem_pio2+0x410>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f7f1 f98d 	bl	80005f8 <__aeabi_dmul>
 800f2de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f2e2:	ad04      	add	r5, sp, #16
 800f2e4:	f04f 0803 	mov.w	r8, #3
 800f2e8:	46a9      	mov	r9, r5
 800f2ea:	2600      	movs	r6, #0
 800f2ec:	2700      	movs	r7, #0
 800f2ee:	4632      	mov	r2, r6
 800f2f0:	463b      	mov	r3, r7
 800f2f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f2f6:	46c3      	mov	fp, r8
 800f2f8:	3d08      	subs	r5, #8
 800f2fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800f2fe:	f7f1 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800f302:	2800      	cmp	r0, #0
 800f304:	d1f3      	bne.n	800f2ee <__ieee754_rem_pio2+0x3be>
 800f306:	4b0f      	ldr	r3, [pc, #60]	; (800f344 <__ieee754_rem_pio2+0x414>)
 800f308:	9301      	str	r3, [sp, #4]
 800f30a:	2302      	movs	r3, #2
 800f30c:	9300      	str	r3, [sp, #0]
 800f30e:	4622      	mov	r2, r4
 800f310:	465b      	mov	r3, fp
 800f312:	4651      	mov	r1, sl
 800f314:	4648      	mov	r0, r9
 800f316:	f000 f993 	bl	800f640 <__kernel_rem_pio2>
 800f31a:	9b02      	ldr	r3, [sp, #8]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	4683      	mov	fp, r0
 800f320:	f6bf ae46 	bge.w	800efb0 <__ieee754_rem_pio2+0x80>
 800f324:	e9da 2100 	ldrd	r2, r1, [sl]
 800f328:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f32c:	e9ca 2300 	strd	r2, r3, [sl]
 800f330:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f334:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f338:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f33c:	e73a      	b.n	800f1b4 <__ieee754_rem_pio2+0x284>
 800f33e:	bf00      	nop
 800f340:	41700000 	.word	0x41700000
 800f344:	08010aa8 	.word	0x08010aa8

0800f348 <__ieee754_sqrt>:
 800f348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f34c:	ec55 4b10 	vmov	r4, r5, d0
 800f350:	4e55      	ldr	r6, [pc, #340]	; (800f4a8 <__ieee754_sqrt+0x160>)
 800f352:	43ae      	bics	r6, r5
 800f354:	ee10 0a10 	vmov	r0, s0
 800f358:	ee10 3a10 	vmov	r3, s0
 800f35c:	462a      	mov	r2, r5
 800f35e:	4629      	mov	r1, r5
 800f360:	d110      	bne.n	800f384 <__ieee754_sqrt+0x3c>
 800f362:	ee10 2a10 	vmov	r2, s0
 800f366:	462b      	mov	r3, r5
 800f368:	f7f1 f946 	bl	80005f8 <__aeabi_dmul>
 800f36c:	4602      	mov	r2, r0
 800f36e:	460b      	mov	r3, r1
 800f370:	4620      	mov	r0, r4
 800f372:	4629      	mov	r1, r5
 800f374:	f7f0 ff8a 	bl	800028c <__adddf3>
 800f378:	4604      	mov	r4, r0
 800f37a:	460d      	mov	r5, r1
 800f37c:	ec45 4b10 	vmov	d0, r4, r5
 800f380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f384:	2d00      	cmp	r5, #0
 800f386:	dc10      	bgt.n	800f3aa <__ieee754_sqrt+0x62>
 800f388:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f38c:	4330      	orrs	r0, r6
 800f38e:	d0f5      	beq.n	800f37c <__ieee754_sqrt+0x34>
 800f390:	b15d      	cbz	r5, 800f3aa <__ieee754_sqrt+0x62>
 800f392:	ee10 2a10 	vmov	r2, s0
 800f396:	462b      	mov	r3, r5
 800f398:	ee10 0a10 	vmov	r0, s0
 800f39c:	f7f0 ff74 	bl	8000288 <__aeabi_dsub>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	f7f1 fa52 	bl	800084c <__aeabi_ddiv>
 800f3a8:	e7e6      	b.n	800f378 <__ieee754_sqrt+0x30>
 800f3aa:	1512      	asrs	r2, r2, #20
 800f3ac:	d074      	beq.n	800f498 <__ieee754_sqrt+0x150>
 800f3ae:	07d4      	lsls	r4, r2, #31
 800f3b0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f3b4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f3b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f3bc:	bf5e      	ittt	pl
 800f3be:	0fda      	lsrpl	r2, r3, #31
 800f3c0:	005b      	lslpl	r3, r3, #1
 800f3c2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f3c6:	2400      	movs	r4, #0
 800f3c8:	0fda      	lsrs	r2, r3, #31
 800f3ca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f3ce:	107f      	asrs	r7, r7, #1
 800f3d0:	005b      	lsls	r3, r3, #1
 800f3d2:	2516      	movs	r5, #22
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f3da:	1886      	adds	r6, r0, r2
 800f3dc:	428e      	cmp	r6, r1
 800f3de:	bfde      	ittt	le
 800f3e0:	1b89      	suble	r1, r1, r6
 800f3e2:	18b0      	addle	r0, r6, r2
 800f3e4:	18a4      	addle	r4, r4, r2
 800f3e6:	0049      	lsls	r1, r1, #1
 800f3e8:	3d01      	subs	r5, #1
 800f3ea:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f3ee:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f3f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f3f6:	d1f0      	bne.n	800f3da <__ieee754_sqrt+0x92>
 800f3f8:	462a      	mov	r2, r5
 800f3fa:	f04f 0e20 	mov.w	lr, #32
 800f3fe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f402:	4281      	cmp	r1, r0
 800f404:	eb06 0c05 	add.w	ip, r6, r5
 800f408:	dc02      	bgt.n	800f410 <__ieee754_sqrt+0xc8>
 800f40a:	d113      	bne.n	800f434 <__ieee754_sqrt+0xec>
 800f40c:	459c      	cmp	ip, r3
 800f40e:	d811      	bhi.n	800f434 <__ieee754_sqrt+0xec>
 800f410:	f1bc 0f00 	cmp.w	ip, #0
 800f414:	eb0c 0506 	add.w	r5, ip, r6
 800f418:	da43      	bge.n	800f4a2 <__ieee754_sqrt+0x15a>
 800f41a:	2d00      	cmp	r5, #0
 800f41c:	db41      	blt.n	800f4a2 <__ieee754_sqrt+0x15a>
 800f41e:	f100 0801 	add.w	r8, r0, #1
 800f422:	1a09      	subs	r1, r1, r0
 800f424:	459c      	cmp	ip, r3
 800f426:	bf88      	it	hi
 800f428:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f42c:	eba3 030c 	sub.w	r3, r3, ip
 800f430:	4432      	add	r2, r6
 800f432:	4640      	mov	r0, r8
 800f434:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f438:	f1be 0e01 	subs.w	lr, lr, #1
 800f43c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f440:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f444:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f448:	d1db      	bne.n	800f402 <__ieee754_sqrt+0xba>
 800f44a:	430b      	orrs	r3, r1
 800f44c:	d006      	beq.n	800f45c <__ieee754_sqrt+0x114>
 800f44e:	1c50      	adds	r0, r2, #1
 800f450:	bf13      	iteet	ne
 800f452:	3201      	addne	r2, #1
 800f454:	3401      	addeq	r4, #1
 800f456:	4672      	moveq	r2, lr
 800f458:	f022 0201 	bicne.w	r2, r2, #1
 800f45c:	1063      	asrs	r3, r4, #1
 800f45e:	0852      	lsrs	r2, r2, #1
 800f460:	07e1      	lsls	r1, r4, #31
 800f462:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f466:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f46a:	bf48      	it	mi
 800f46c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f470:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f474:	4614      	mov	r4, r2
 800f476:	e781      	b.n	800f37c <__ieee754_sqrt+0x34>
 800f478:	0ad9      	lsrs	r1, r3, #11
 800f47a:	3815      	subs	r0, #21
 800f47c:	055b      	lsls	r3, r3, #21
 800f47e:	2900      	cmp	r1, #0
 800f480:	d0fa      	beq.n	800f478 <__ieee754_sqrt+0x130>
 800f482:	02cd      	lsls	r5, r1, #11
 800f484:	d50a      	bpl.n	800f49c <__ieee754_sqrt+0x154>
 800f486:	f1c2 0420 	rsb	r4, r2, #32
 800f48a:	fa23 f404 	lsr.w	r4, r3, r4
 800f48e:	1e55      	subs	r5, r2, #1
 800f490:	4093      	lsls	r3, r2
 800f492:	4321      	orrs	r1, r4
 800f494:	1b42      	subs	r2, r0, r5
 800f496:	e78a      	b.n	800f3ae <__ieee754_sqrt+0x66>
 800f498:	4610      	mov	r0, r2
 800f49a:	e7f0      	b.n	800f47e <__ieee754_sqrt+0x136>
 800f49c:	0049      	lsls	r1, r1, #1
 800f49e:	3201      	adds	r2, #1
 800f4a0:	e7ef      	b.n	800f482 <__ieee754_sqrt+0x13a>
 800f4a2:	4680      	mov	r8, r0
 800f4a4:	e7bd      	b.n	800f422 <__ieee754_sqrt+0xda>
 800f4a6:	bf00      	nop
 800f4a8:	7ff00000 	.word	0x7ff00000
 800f4ac:	00000000 	.word	0x00000000

0800f4b0 <__kernel_cos>:
 800f4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b4:	ec57 6b10 	vmov	r6, r7, d0
 800f4b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f4bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f4c0:	ed8d 1b00 	vstr	d1, [sp]
 800f4c4:	da07      	bge.n	800f4d6 <__kernel_cos+0x26>
 800f4c6:	ee10 0a10 	vmov	r0, s0
 800f4ca:	4639      	mov	r1, r7
 800f4cc:	f7f1 fb44 	bl	8000b58 <__aeabi_d2iz>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	f000 8088 	beq.w	800f5e6 <__kernel_cos+0x136>
 800f4d6:	4632      	mov	r2, r6
 800f4d8:	463b      	mov	r3, r7
 800f4da:	4630      	mov	r0, r6
 800f4dc:	4639      	mov	r1, r7
 800f4de:	f7f1 f88b 	bl	80005f8 <__aeabi_dmul>
 800f4e2:	4b51      	ldr	r3, [pc, #324]	; (800f628 <__kernel_cos+0x178>)
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	f7f1 f885 	bl	80005f8 <__aeabi_dmul>
 800f4ee:	a340      	add	r3, pc, #256	; (adr r3, 800f5f0 <__kernel_cos+0x140>)
 800f4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f4:	4682      	mov	sl, r0
 800f4f6:	468b      	mov	fp, r1
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	4629      	mov	r1, r5
 800f4fc:	f7f1 f87c 	bl	80005f8 <__aeabi_dmul>
 800f500:	a33d      	add	r3, pc, #244	; (adr r3, 800f5f8 <__kernel_cos+0x148>)
 800f502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f506:	f7f0 fec1 	bl	800028c <__adddf3>
 800f50a:	4622      	mov	r2, r4
 800f50c:	462b      	mov	r3, r5
 800f50e:	f7f1 f873 	bl	80005f8 <__aeabi_dmul>
 800f512:	a33b      	add	r3, pc, #236	; (adr r3, 800f600 <__kernel_cos+0x150>)
 800f514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f518:	f7f0 feb6 	bl	8000288 <__aeabi_dsub>
 800f51c:	4622      	mov	r2, r4
 800f51e:	462b      	mov	r3, r5
 800f520:	f7f1 f86a 	bl	80005f8 <__aeabi_dmul>
 800f524:	a338      	add	r3, pc, #224	; (adr r3, 800f608 <__kernel_cos+0x158>)
 800f526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52a:	f7f0 feaf 	bl	800028c <__adddf3>
 800f52e:	4622      	mov	r2, r4
 800f530:	462b      	mov	r3, r5
 800f532:	f7f1 f861 	bl	80005f8 <__aeabi_dmul>
 800f536:	a336      	add	r3, pc, #216	; (adr r3, 800f610 <__kernel_cos+0x160>)
 800f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53c:	f7f0 fea4 	bl	8000288 <__aeabi_dsub>
 800f540:	4622      	mov	r2, r4
 800f542:	462b      	mov	r3, r5
 800f544:	f7f1 f858 	bl	80005f8 <__aeabi_dmul>
 800f548:	a333      	add	r3, pc, #204	; (adr r3, 800f618 <__kernel_cos+0x168>)
 800f54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54e:	f7f0 fe9d 	bl	800028c <__adddf3>
 800f552:	4622      	mov	r2, r4
 800f554:	462b      	mov	r3, r5
 800f556:	f7f1 f84f 	bl	80005f8 <__aeabi_dmul>
 800f55a:	4622      	mov	r2, r4
 800f55c:	462b      	mov	r3, r5
 800f55e:	f7f1 f84b 	bl	80005f8 <__aeabi_dmul>
 800f562:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f566:	4604      	mov	r4, r0
 800f568:	460d      	mov	r5, r1
 800f56a:	4630      	mov	r0, r6
 800f56c:	4639      	mov	r1, r7
 800f56e:	f7f1 f843 	bl	80005f8 <__aeabi_dmul>
 800f572:	460b      	mov	r3, r1
 800f574:	4602      	mov	r2, r0
 800f576:	4629      	mov	r1, r5
 800f578:	4620      	mov	r0, r4
 800f57a:	f7f0 fe85 	bl	8000288 <__aeabi_dsub>
 800f57e:	4b2b      	ldr	r3, [pc, #172]	; (800f62c <__kernel_cos+0x17c>)
 800f580:	4598      	cmp	r8, r3
 800f582:	4606      	mov	r6, r0
 800f584:	460f      	mov	r7, r1
 800f586:	dc10      	bgt.n	800f5aa <__kernel_cos+0xfa>
 800f588:	4602      	mov	r2, r0
 800f58a:	460b      	mov	r3, r1
 800f58c:	4650      	mov	r0, sl
 800f58e:	4659      	mov	r1, fp
 800f590:	f7f0 fe7a 	bl	8000288 <__aeabi_dsub>
 800f594:	460b      	mov	r3, r1
 800f596:	4926      	ldr	r1, [pc, #152]	; (800f630 <__kernel_cos+0x180>)
 800f598:	4602      	mov	r2, r0
 800f59a:	2000      	movs	r0, #0
 800f59c:	f7f0 fe74 	bl	8000288 <__aeabi_dsub>
 800f5a0:	ec41 0b10 	vmov	d0, r0, r1
 800f5a4:	b003      	add	sp, #12
 800f5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5aa:	4b22      	ldr	r3, [pc, #136]	; (800f634 <__kernel_cos+0x184>)
 800f5ac:	4920      	ldr	r1, [pc, #128]	; (800f630 <__kernel_cos+0x180>)
 800f5ae:	4598      	cmp	r8, r3
 800f5b0:	bfcc      	ite	gt
 800f5b2:	4d21      	ldrgt	r5, [pc, #132]	; (800f638 <__kernel_cos+0x188>)
 800f5b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f5b8:	2400      	movs	r4, #0
 800f5ba:	4622      	mov	r2, r4
 800f5bc:	462b      	mov	r3, r5
 800f5be:	2000      	movs	r0, #0
 800f5c0:	f7f0 fe62 	bl	8000288 <__aeabi_dsub>
 800f5c4:	4622      	mov	r2, r4
 800f5c6:	4680      	mov	r8, r0
 800f5c8:	4689      	mov	r9, r1
 800f5ca:	462b      	mov	r3, r5
 800f5cc:	4650      	mov	r0, sl
 800f5ce:	4659      	mov	r1, fp
 800f5d0:	f7f0 fe5a 	bl	8000288 <__aeabi_dsub>
 800f5d4:	4632      	mov	r2, r6
 800f5d6:	463b      	mov	r3, r7
 800f5d8:	f7f0 fe56 	bl	8000288 <__aeabi_dsub>
 800f5dc:	4602      	mov	r2, r0
 800f5de:	460b      	mov	r3, r1
 800f5e0:	4640      	mov	r0, r8
 800f5e2:	4649      	mov	r1, r9
 800f5e4:	e7da      	b.n	800f59c <__kernel_cos+0xec>
 800f5e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f620 <__kernel_cos+0x170>
 800f5ea:	e7db      	b.n	800f5a4 <__kernel_cos+0xf4>
 800f5ec:	f3af 8000 	nop.w
 800f5f0:	be8838d4 	.word	0xbe8838d4
 800f5f4:	bda8fae9 	.word	0xbda8fae9
 800f5f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f5fc:	3e21ee9e 	.word	0x3e21ee9e
 800f600:	809c52ad 	.word	0x809c52ad
 800f604:	3e927e4f 	.word	0x3e927e4f
 800f608:	19cb1590 	.word	0x19cb1590
 800f60c:	3efa01a0 	.word	0x3efa01a0
 800f610:	16c15177 	.word	0x16c15177
 800f614:	3f56c16c 	.word	0x3f56c16c
 800f618:	5555554c 	.word	0x5555554c
 800f61c:	3fa55555 	.word	0x3fa55555
 800f620:	00000000 	.word	0x00000000
 800f624:	3ff00000 	.word	0x3ff00000
 800f628:	3fe00000 	.word	0x3fe00000
 800f62c:	3fd33332 	.word	0x3fd33332
 800f630:	3ff00000 	.word	0x3ff00000
 800f634:	3fe90000 	.word	0x3fe90000
 800f638:	3fd20000 	.word	0x3fd20000
 800f63c:	00000000 	.word	0x00000000

0800f640 <__kernel_rem_pio2>:
 800f640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f644:	ed2d 8b02 	vpush	{d8}
 800f648:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f64c:	f112 0f14 	cmn.w	r2, #20
 800f650:	9308      	str	r3, [sp, #32]
 800f652:	9101      	str	r1, [sp, #4]
 800f654:	4bc4      	ldr	r3, [pc, #784]	; (800f968 <__kernel_rem_pio2+0x328>)
 800f656:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f658:	900b      	str	r0, [sp, #44]	; 0x2c
 800f65a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f65e:	9302      	str	r3, [sp, #8]
 800f660:	9b08      	ldr	r3, [sp, #32]
 800f662:	f103 33ff 	add.w	r3, r3, #4294967295
 800f666:	bfa8      	it	ge
 800f668:	1ed4      	subge	r4, r2, #3
 800f66a:	9306      	str	r3, [sp, #24]
 800f66c:	bfb2      	itee	lt
 800f66e:	2400      	movlt	r4, #0
 800f670:	2318      	movge	r3, #24
 800f672:	fb94 f4f3 	sdivge	r4, r4, r3
 800f676:	f06f 0317 	mvn.w	r3, #23
 800f67a:	fb04 3303 	mla	r3, r4, r3, r3
 800f67e:	eb03 0a02 	add.w	sl, r3, r2
 800f682:	9b02      	ldr	r3, [sp, #8]
 800f684:	9a06      	ldr	r2, [sp, #24]
 800f686:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f958 <__kernel_rem_pio2+0x318>
 800f68a:	eb03 0802 	add.w	r8, r3, r2
 800f68e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f690:	1aa7      	subs	r7, r4, r2
 800f692:	ae22      	add	r6, sp, #136	; 0x88
 800f694:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f698:	2500      	movs	r5, #0
 800f69a:	4545      	cmp	r5, r8
 800f69c:	dd13      	ble.n	800f6c6 <__kernel_rem_pio2+0x86>
 800f69e:	9b08      	ldr	r3, [sp, #32]
 800f6a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f958 <__kernel_rem_pio2+0x318>
 800f6a4:	aa22      	add	r2, sp, #136	; 0x88
 800f6a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f6aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f6ae:	f04f 0800 	mov.w	r8, #0
 800f6b2:	9b02      	ldr	r3, [sp, #8]
 800f6b4:	4598      	cmp	r8, r3
 800f6b6:	dc2f      	bgt.n	800f718 <__kernel_rem_pio2+0xd8>
 800f6b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f6bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f6c0:	462f      	mov	r7, r5
 800f6c2:	2600      	movs	r6, #0
 800f6c4:	e01b      	b.n	800f6fe <__kernel_rem_pio2+0xbe>
 800f6c6:	42ef      	cmn	r7, r5
 800f6c8:	d407      	bmi.n	800f6da <__kernel_rem_pio2+0x9a>
 800f6ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f6ce:	f7f0 ff29 	bl	8000524 <__aeabi_i2d>
 800f6d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f6d6:	3501      	adds	r5, #1
 800f6d8:	e7df      	b.n	800f69a <__kernel_rem_pio2+0x5a>
 800f6da:	ec51 0b18 	vmov	r0, r1, d8
 800f6de:	e7f8      	b.n	800f6d2 <__kernel_rem_pio2+0x92>
 800f6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f6e8:	f7f0 ff86 	bl	80005f8 <__aeabi_dmul>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6f4:	f7f0 fdca 	bl	800028c <__adddf3>
 800f6f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6fc:	3601      	adds	r6, #1
 800f6fe:	9b06      	ldr	r3, [sp, #24]
 800f700:	429e      	cmp	r6, r3
 800f702:	f1a7 0708 	sub.w	r7, r7, #8
 800f706:	ddeb      	ble.n	800f6e0 <__kernel_rem_pio2+0xa0>
 800f708:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f70c:	f108 0801 	add.w	r8, r8, #1
 800f710:	ecab 7b02 	vstmia	fp!, {d7}
 800f714:	3508      	adds	r5, #8
 800f716:	e7cc      	b.n	800f6b2 <__kernel_rem_pio2+0x72>
 800f718:	9b02      	ldr	r3, [sp, #8]
 800f71a:	aa0e      	add	r2, sp, #56	; 0x38
 800f71c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f720:	930d      	str	r3, [sp, #52]	; 0x34
 800f722:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f724:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f728:	9c02      	ldr	r4, [sp, #8]
 800f72a:	930c      	str	r3, [sp, #48]	; 0x30
 800f72c:	00e3      	lsls	r3, r4, #3
 800f72e:	930a      	str	r3, [sp, #40]	; 0x28
 800f730:	ab9a      	add	r3, sp, #616	; 0x268
 800f732:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f736:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f73a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f73e:	ab72      	add	r3, sp, #456	; 0x1c8
 800f740:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f744:	46c3      	mov	fp, r8
 800f746:	46a1      	mov	r9, r4
 800f748:	f1b9 0f00 	cmp.w	r9, #0
 800f74c:	f1a5 0508 	sub.w	r5, r5, #8
 800f750:	dc77      	bgt.n	800f842 <__kernel_rem_pio2+0x202>
 800f752:	ec47 6b10 	vmov	d0, r6, r7
 800f756:	4650      	mov	r0, sl
 800f758:	f000 fde6 	bl	8010328 <scalbn>
 800f75c:	ec57 6b10 	vmov	r6, r7, d0
 800f760:	2200      	movs	r2, #0
 800f762:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f766:	ee10 0a10 	vmov	r0, s0
 800f76a:	4639      	mov	r1, r7
 800f76c:	f7f0 ff44 	bl	80005f8 <__aeabi_dmul>
 800f770:	ec41 0b10 	vmov	d0, r0, r1
 800f774:	f000 fd58 	bl	8010228 <floor>
 800f778:	4b7c      	ldr	r3, [pc, #496]	; (800f96c <__kernel_rem_pio2+0x32c>)
 800f77a:	ec51 0b10 	vmov	r0, r1, d0
 800f77e:	2200      	movs	r2, #0
 800f780:	f7f0 ff3a 	bl	80005f8 <__aeabi_dmul>
 800f784:	4602      	mov	r2, r0
 800f786:	460b      	mov	r3, r1
 800f788:	4630      	mov	r0, r6
 800f78a:	4639      	mov	r1, r7
 800f78c:	f7f0 fd7c 	bl	8000288 <__aeabi_dsub>
 800f790:	460f      	mov	r7, r1
 800f792:	4606      	mov	r6, r0
 800f794:	f7f1 f9e0 	bl	8000b58 <__aeabi_d2iz>
 800f798:	9004      	str	r0, [sp, #16]
 800f79a:	f7f0 fec3 	bl	8000524 <__aeabi_i2d>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	4639      	mov	r1, r7
 800f7a6:	f7f0 fd6f 	bl	8000288 <__aeabi_dsub>
 800f7aa:	f1ba 0f00 	cmp.w	sl, #0
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	460f      	mov	r7, r1
 800f7b2:	dd6d      	ble.n	800f890 <__kernel_rem_pio2+0x250>
 800f7b4:	1e62      	subs	r2, r4, #1
 800f7b6:	ab0e      	add	r3, sp, #56	; 0x38
 800f7b8:	9d04      	ldr	r5, [sp, #16]
 800f7ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f7be:	f1ca 0118 	rsb	r1, sl, #24
 800f7c2:	fa40 f301 	asr.w	r3, r0, r1
 800f7c6:	441d      	add	r5, r3
 800f7c8:	408b      	lsls	r3, r1
 800f7ca:	1ac0      	subs	r0, r0, r3
 800f7cc:	ab0e      	add	r3, sp, #56	; 0x38
 800f7ce:	9504      	str	r5, [sp, #16]
 800f7d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f7d4:	f1ca 0317 	rsb	r3, sl, #23
 800f7d8:	fa40 fb03 	asr.w	fp, r0, r3
 800f7dc:	f1bb 0f00 	cmp.w	fp, #0
 800f7e0:	dd65      	ble.n	800f8ae <__kernel_rem_pio2+0x26e>
 800f7e2:	9b04      	ldr	r3, [sp, #16]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	9304      	str	r3, [sp, #16]
 800f7ea:	4615      	mov	r5, r2
 800f7ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f7f0:	4294      	cmp	r4, r2
 800f7f2:	f300 809c 	bgt.w	800f92e <__kernel_rem_pio2+0x2ee>
 800f7f6:	f1ba 0f00 	cmp.w	sl, #0
 800f7fa:	dd07      	ble.n	800f80c <__kernel_rem_pio2+0x1cc>
 800f7fc:	f1ba 0f01 	cmp.w	sl, #1
 800f800:	f000 80c0 	beq.w	800f984 <__kernel_rem_pio2+0x344>
 800f804:	f1ba 0f02 	cmp.w	sl, #2
 800f808:	f000 80c6 	beq.w	800f998 <__kernel_rem_pio2+0x358>
 800f80c:	f1bb 0f02 	cmp.w	fp, #2
 800f810:	d14d      	bne.n	800f8ae <__kernel_rem_pio2+0x26e>
 800f812:	4632      	mov	r2, r6
 800f814:	463b      	mov	r3, r7
 800f816:	4956      	ldr	r1, [pc, #344]	; (800f970 <__kernel_rem_pio2+0x330>)
 800f818:	2000      	movs	r0, #0
 800f81a:	f7f0 fd35 	bl	8000288 <__aeabi_dsub>
 800f81e:	4606      	mov	r6, r0
 800f820:	460f      	mov	r7, r1
 800f822:	2d00      	cmp	r5, #0
 800f824:	d043      	beq.n	800f8ae <__kernel_rem_pio2+0x26e>
 800f826:	4650      	mov	r0, sl
 800f828:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f960 <__kernel_rem_pio2+0x320>
 800f82c:	f000 fd7c 	bl	8010328 <scalbn>
 800f830:	4630      	mov	r0, r6
 800f832:	4639      	mov	r1, r7
 800f834:	ec53 2b10 	vmov	r2, r3, d0
 800f838:	f7f0 fd26 	bl	8000288 <__aeabi_dsub>
 800f83c:	4606      	mov	r6, r0
 800f83e:	460f      	mov	r7, r1
 800f840:	e035      	b.n	800f8ae <__kernel_rem_pio2+0x26e>
 800f842:	4b4c      	ldr	r3, [pc, #304]	; (800f974 <__kernel_rem_pio2+0x334>)
 800f844:	2200      	movs	r2, #0
 800f846:	4630      	mov	r0, r6
 800f848:	4639      	mov	r1, r7
 800f84a:	f7f0 fed5 	bl	80005f8 <__aeabi_dmul>
 800f84e:	f7f1 f983 	bl	8000b58 <__aeabi_d2iz>
 800f852:	f7f0 fe67 	bl	8000524 <__aeabi_i2d>
 800f856:	4602      	mov	r2, r0
 800f858:	460b      	mov	r3, r1
 800f85a:	ec43 2b18 	vmov	d8, r2, r3
 800f85e:	4b46      	ldr	r3, [pc, #280]	; (800f978 <__kernel_rem_pio2+0x338>)
 800f860:	2200      	movs	r2, #0
 800f862:	f7f0 fec9 	bl	80005f8 <__aeabi_dmul>
 800f866:	4602      	mov	r2, r0
 800f868:	460b      	mov	r3, r1
 800f86a:	4630      	mov	r0, r6
 800f86c:	4639      	mov	r1, r7
 800f86e:	f7f0 fd0b 	bl	8000288 <__aeabi_dsub>
 800f872:	f7f1 f971 	bl	8000b58 <__aeabi_d2iz>
 800f876:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f87a:	f84b 0b04 	str.w	r0, [fp], #4
 800f87e:	ec51 0b18 	vmov	r0, r1, d8
 800f882:	f7f0 fd03 	bl	800028c <__adddf3>
 800f886:	f109 39ff 	add.w	r9, r9, #4294967295
 800f88a:	4606      	mov	r6, r0
 800f88c:	460f      	mov	r7, r1
 800f88e:	e75b      	b.n	800f748 <__kernel_rem_pio2+0x108>
 800f890:	d106      	bne.n	800f8a0 <__kernel_rem_pio2+0x260>
 800f892:	1e63      	subs	r3, r4, #1
 800f894:	aa0e      	add	r2, sp, #56	; 0x38
 800f896:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f89a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f89e:	e79d      	b.n	800f7dc <__kernel_rem_pio2+0x19c>
 800f8a0:	4b36      	ldr	r3, [pc, #216]	; (800f97c <__kernel_rem_pio2+0x33c>)
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f7f1 f92e 	bl	8000b04 <__aeabi_dcmpge>
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d13d      	bne.n	800f928 <__kernel_rem_pio2+0x2e8>
 800f8ac:	4683      	mov	fp, r0
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	4639      	mov	r1, r7
 800f8b6:	f7f1 f907 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	f000 80c0 	beq.w	800fa40 <__kernel_rem_pio2+0x400>
 800f8c0:	1e65      	subs	r5, r4, #1
 800f8c2:	462b      	mov	r3, r5
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	9902      	ldr	r1, [sp, #8]
 800f8c8:	428b      	cmp	r3, r1
 800f8ca:	da6c      	bge.n	800f9a6 <__kernel_rem_pio2+0x366>
 800f8cc:	2a00      	cmp	r2, #0
 800f8ce:	f000 8089 	beq.w	800f9e4 <__kernel_rem_pio2+0x3a4>
 800f8d2:	ab0e      	add	r3, sp, #56	; 0x38
 800f8d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800f8d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	f000 80ad 	beq.w	800fa3c <__kernel_rem_pio2+0x3fc>
 800f8e2:	4650      	mov	r0, sl
 800f8e4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f960 <__kernel_rem_pio2+0x320>
 800f8e8:	f000 fd1e 	bl	8010328 <scalbn>
 800f8ec:	ab9a      	add	r3, sp, #616	; 0x268
 800f8ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f8f2:	ec57 6b10 	vmov	r6, r7, d0
 800f8f6:	00ec      	lsls	r4, r5, #3
 800f8f8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f8fc:	46aa      	mov	sl, r5
 800f8fe:	f1ba 0f00 	cmp.w	sl, #0
 800f902:	f280 80d6 	bge.w	800fab2 <__kernel_rem_pio2+0x472>
 800f906:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f958 <__kernel_rem_pio2+0x318>
 800f90a:	462e      	mov	r6, r5
 800f90c:	2e00      	cmp	r6, #0
 800f90e:	f2c0 8104 	blt.w	800fb1a <__kernel_rem_pio2+0x4da>
 800f912:	ab72      	add	r3, sp, #456	; 0x1c8
 800f914:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f918:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f980 <__kernel_rem_pio2+0x340>
 800f91c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f920:	f04f 0800 	mov.w	r8, #0
 800f924:	1baf      	subs	r7, r5, r6
 800f926:	e0ea      	b.n	800fafe <__kernel_rem_pio2+0x4be>
 800f928:	f04f 0b02 	mov.w	fp, #2
 800f92c:	e759      	b.n	800f7e2 <__kernel_rem_pio2+0x1a2>
 800f92e:	f8d8 3000 	ldr.w	r3, [r8]
 800f932:	b955      	cbnz	r5, 800f94a <__kernel_rem_pio2+0x30a>
 800f934:	b123      	cbz	r3, 800f940 <__kernel_rem_pio2+0x300>
 800f936:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f93a:	f8c8 3000 	str.w	r3, [r8]
 800f93e:	2301      	movs	r3, #1
 800f940:	3201      	adds	r2, #1
 800f942:	f108 0804 	add.w	r8, r8, #4
 800f946:	461d      	mov	r5, r3
 800f948:	e752      	b.n	800f7f0 <__kernel_rem_pio2+0x1b0>
 800f94a:	1acb      	subs	r3, r1, r3
 800f94c:	f8c8 3000 	str.w	r3, [r8]
 800f950:	462b      	mov	r3, r5
 800f952:	e7f5      	b.n	800f940 <__kernel_rem_pio2+0x300>
 800f954:	f3af 8000 	nop.w
	...
 800f964:	3ff00000 	.word	0x3ff00000
 800f968:	08010bf0 	.word	0x08010bf0
 800f96c:	40200000 	.word	0x40200000
 800f970:	3ff00000 	.word	0x3ff00000
 800f974:	3e700000 	.word	0x3e700000
 800f978:	41700000 	.word	0x41700000
 800f97c:	3fe00000 	.word	0x3fe00000
 800f980:	08010bb0 	.word	0x08010bb0
 800f984:	1e62      	subs	r2, r4, #1
 800f986:	ab0e      	add	r3, sp, #56	; 0x38
 800f988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f98c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f990:	a90e      	add	r1, sp, #56	; 0x38
 800f992:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f996:	e739      	b.n	800f80c <__kernel_rem_pio2+0x1cc>
 800f998:	1e62      	subs	r2, r4, #1
 800f99a:	ab0e      	add	r3, sp, #56	; 0x38
 800f99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f9a4:	e7f4      	b.n	800f990 <__kernel_rem_pio2+0x350>
 800f9a6:	a90e      	add	r1, sp, #56	; 0x38
 800f9a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f9ac:	3b01      	subs	r3, #1
 800f9ae:	430a      	orrs	r2, r1
 800f9b0:	e789      	b.n	800f8c6 <__kernel_rem_pio2+0x286>
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f9b8:	2900      	cmp	r1, #0
 800f9ba:	d0fa      	beq.n	800f9b2 <__kernel_rem_pio2+0x372>
 800f9bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9be:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f9c2:	446a      	add	r2, sp
 800f9c4:	3a98      	subs	r2, #152	; 0x98
 800f9c6:	920a      	str	r2, [sp, #40]	; 0x28
 800f9c8:	9a08      	ldr	r2, [sp, #32]
 800f9ca:	18e3      	adds	r3, r4, r3
 800f9cc:	18a5      	adds	r5, r4, r2
 800f9ce:	aa22      	add	r2, sp, #136	; 0x88
 800f9d0:	f104 0801 	add.w	r8, r4, #1
 800f9d4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f9d8:	9304      	str	r3, [sp, #16]
 800f9da:	9b04      	ldr	r3, [sp, #16]
 800f9dc:	4543      	cmp	r3, r8
 800f9de:	da04      	bge.n	800f9ea <__kernel_rem_pio2+0x3aa>
 800f9e0:	461c      	mov	r4, r3
 800f9e2:	e6a3      	b.n	800f72c <__kernel_rem_pio2+0xec>
 800f9e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e7e4      	b.n	800f9b4 <__kernel_rem_pio2+0x374>
 800f9ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f9f0:	f7f0 fd98 	bl	8000524 <__aeabi_i2d>
 800f9f4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9fa:	46ab      	mov	fp, r5
 800f9fc:	461c      	mov	r4, r3
 800f9fe:	f04f 0900 	mov.w	r9, #0
 800fa02:	2600      	movs	r6, #0
 800fa04:	2700      	movs	r7, #0
 800fa06:	9b06      	ldr	r3, [sp, #24]
 800fa08:	4599      	cmp	r9, r3
 800fa0a:	dd06      	ble.n	800fa1a <__kernel_rem_pio2+0x3da>
 800fa0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa0e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fa12:	f108 0801 	add.w	r8, r8, #1
 800fa16:	930a      	str	r3, [sp, #40]	; 0x28
 800fa18:	e7df      	b.n	800f9da <__kernel_rem_pio2+0x39a>
 800fa1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fa1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fa22:	f7f0 fde9 	bl	80005f8 <__aeabi_dmul>
 800fa26:	4602      	mov	r2, r0
 800fa28:	460b      	mov	r3, r1
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	4639      	mov	r1, r7
 800fa2e:	f7f0 fc2d 	bl	800028c <__adddf3>
 800fa32:	f109 0901 	add.w	r9, r9, #1
 800fa36:	4606      	mov	r6, r0
 800fa38:	460f      	mov	r7, r1
 800fa3a:	e7e4      	b.n	800fa06 <__kernel_rem_pio2+0x3c6>
 800fa3c:	3d01      	subs	r5, #1
 800fa3e:	e748      	b.n	800f8d2 <__kernel_rem_pio2+0x292>
 800fa40:	ec47 6b10 	vmov	d0, r6, r7
 800fa44:	f1ca 0000 	rsb	r0, sl, #0
 800fa48:	f000 fc6e 	bl	8010328 <scalbn>
 800fa4c:	ec57 6b10 	vmov	r6, r7, d0
 800fa50:	4ba0      	ldr	r3, [pc, #640]	; (800fcd4 <__kernel_rem_pio2+0x694>)
 800fa52:	ee10 0a10 	vmov	r0, s0
 800fa56:	2200      	movs	r2, #0
 800fa58:	4639      	mov	r1, r7
 800fa5a:	f7f1 f853 	bl	8000b04 <__aeabi_dcmpge>
 800fa5e:	b1f8      	cbz	r0, 800faa0 <__kernel_rem_pio2+0x460>
 800fa60:	4b9d      	ldr	r3, [pc, #628]	; (800fcd8 <__kernel_rem_pio2+0x698>)
 800fa62:	2200      	movs	r2, #0
 800fa64:	4630      	mov	r0, r6
 800fa66:	4639      	mov	r1, r7
 800fa68:	f7f0 fdc6 	bl	80005f8 <__aeabi_dmul>
 800fa6c:	f7f1 f874 	bl	8000b58 <__aeabi_d2iz>
 800fa70:	4680      	mov	r8, r0
 800fa72:	f7f0 fd57 	bl	8000524 <__aeabi_i2d>
 800fa76:	4b97      	ldr	r3, [pc, #604]	; (800fcd4 <__kernel_rem_pio2+0x694>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f7f0 fdbd 	bl	80005f8 <__aeabi_dmul>
 800fa7e:	460b      	mov	r3, r1
 800fa80:	4602      	mov	r2, r0
 800fa82:	4639      	mov	r1, r7
 800fa84:	4630      	mov	r0, r6
 800fa86:	f7f0 fbff 	bl	8000288 <__aeabi_dsub>
 800fa8a:	f7f1 f865 	bl	8000b58 <__aeabi_d2iz>
 800fa8e:	1c65      	adds	r5, r4, #1
 800fa90:	ab0e      	add	r3, sp, #56	; 0x38
 800fa92:	f10a 0a18 	add.w	sl, sl, #24
 800fa96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fa9a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800fa9e:	e720      	b.n	800f8e2 <__kernel_rem_pio2+0x2a2>
 800faa0:	4630      	mov	r0, r6
 800faa2:	4639      	mov	r1, r7
 800faa4:	f7f1 f858 	bl	8000b58 <__aeabi_d2iz>
 800faa8:	ab0e      	add	r3, sp, #56	; 0x38
 800faaa:	4625      	mov	r5, r4
 800faac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fab0:	e717      	b.n	800f8e2 <__kernel_rem_pio2+0x2a2>
 800fab2:	ab0e      	add	r3, sp, #56	; 0x38
 800fab4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fab8:	f7f0 fd34 	bl	8000524 <__aeabi_i2d>
 800fabc:	4632      	mov	r2, r6
 800fabe:	463b      	mov	r3, r7
 800fac0:	f7f0 fd9a 	bl	80005f8 <__aeabi_dmul>
 800fac4:	4b84      	ldr	r3, [pc, #528]	; (800fcd8 <__kernel_rem_pio2+0x698>)
 800fac6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800faca:	2200      	movs	r2, #0
 800facc:	4630      	mov	r0, r6
 800face:	4639      	mov	r1, r7
 800fad0:	f7f0 fd92 	bl	80005f8 <__aeabi_dmul>
 800fad4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fad8:	4606      	mov	r6, r0
 800fada:	460f      	mov	r7, r1
 800fadc:	e70f      	b.n	800f8fe <__kernel_rem_pio2+0x2be>
 800fade:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800fae2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800fae6:	f7f0 fd87 	bl	80005f8 <__aeabi_dmul>
 800faea:	4602      	mov	r2, r0
 800faec:	460b      	mov	r3, r1
 800faee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800faf2:	f7f0 fbcb 	bl	800028c <__adddf3>
 800faf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fafa:	f108 0801 	add.w	r8, r8, #1
 800fafe:	9b02      	ldr	r3, [sp, #8]
 800fb00:	4598      	cmp	r8, r3
 800fb02:	dc01      	bgt.n	800fb08 <__kernel_rem_pio2+0x4c8>
 800fb04:	45b8      	cmp	r8, r7
 800fb06:	ddea      	ble.n	800fade <__kernel_rem_pio2+0x49e>
 800fb08:	ed9d 7b06 	vldr	d7, [sp, #24]
 800fb0c:	ab4a      	add	r3, sp, #296	; 0x128
 800fb0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fb12:	ed87 7b00 	vstr	d7, [r7]
 800fb16:	3e01      	subs	r6, #1
 800fb18:	e6f8      	b.n	800f90c <__kernel_rem_pio2+0x2cc>
 800fb1a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fb1c:	2b02      	cmp	r3, #2
 800fb1e:	dc0b      	bgt.n	800fb38 <__kernel_rem_pio2+0x4f8>
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	dc35      	bgt.n	800fb90 <__kernel_rem_pio2+0x550>
 800fb24:	d059      	beq.n	800fbda <__kernel_rem_pio2+0x59a>
 800fb26:	9b04      	ldr	r3, [sp, #16]
 800fb28:	f003 0007 	and.w	r0, r3, #7
 800fb2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800fb30:	ecbd 8b02 	vpop	{d8}
 800fb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fb3a:	2b03      	cmp	r3, #3
 800fb3c:	d1f3      	bne.n	800fb26 <__kernel_rem_pio2+0x4e6>
 800fb3e:	ab4a      	add	r3, sp, #296	; 0x128
 800fb40:	4423      	add	r3, r4
 800fb42:	9306      	str	r3, [sp, #24]
 800fb44:	461c      	mov	r4, r3
 800fb46:	469a      	mov	sl, r3
 800fb48:	9502      	str	r5, [sp, #8]
 800fb4a:	9b02      	ldr	r3, [sp, #8]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f1aa 0a08 	sub.w	sl, sl, #8
 800fb52:	dc6b      	bgt.n	800fc2c <__kernel_rem_pio2+0x5ec>
 800fb54:	46aa      	mov	sl, r5
 800fb56:	f1ba 0f01 	cmp.w	sl, #1
 800fb5a:	f1a4 0408 	sub.w	r4, r4, #8
 800fb5e:	f300 8085 	bgt.w	800fc6c <__kernel_rem_pio2+0x62c>
 800fb62:	9c06      	ldr	r4, [sp, #24]
 800fb64:	2000      	movs	r0, #0
 800fb66:	3408      	adds	r4, #8
 800fb68:	2100      	movs	r1, #0
 800fb6a:	2d01      	cmp	r5, #1
 800fb6c:	f300 809d 	bgt.w	800fcaa <__kernel_rem_pio2+0x66a>
 800fb70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800fb74:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800fb78:	f1bb 0f00 	cmp.w	fp, #0
 800fb7c:	f040 809b 	bne.w	800fcb6 <__kernel_rem_pio2+0x676>
 800fb80:	9b01      	ldr	r3, [sp, #4]
 800fb82:	e9c3 5600 	strd	r5, r6, [r3]
 800fb86:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800fb8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fb8e:	e7ca      	b.n	800fb26 <__kernel_rem_pio2+0x4e6>
 800fb90:	3408      	adds	r4, #8
 800fb92:	ab4a      	add	r3, sp, #296	; 0x128
 800fb94:	441c      	add	r4, r3
 800fb96:	462e      	mov	r6, r5
 800fb98:	2000      	movs	r0, #0
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	2e00      	cmp	r6, #0
 800fb9e:	da36      	bge.n	800fc0e <__kernel_rem_pio2+0x5ce>
 800fba0:	f1bb 0f00 	cmp.w	fp, #0
 800fba4:	d039      	beq.n	800fc1a <__kernel_rem_pio2+0x5da>
 800fba6:	4602      	mov	r2, r0
 800fba8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbac:	9c01      	ldr	r4, [sp, #4]
 800fbae:	e9c4 2300 	strd	r2, r3, [r4]
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800fbba:	f7f0 fb65 	bl	8000288 <__aeabi_dsub>
 800fbbe:	ae4c      	add	r6, sp, #304	; 0x130
 800fbc0:	2401      	movs	r4, #1
 800fbc2:	42a5      	cmp	r5, r4
 800fbc4:	da2c      	bge.n	800fc20 <__kernel_rem_pio2+0x5e0>
 800fbc6:	f1bb 0f00 	cmp.w	fp, #0
 800fbca:	d002      	beq.n	800fbd2 <__kernel_rem_pio2+0x592>
 800fbcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	9b01      	ldr	r3, [sp, #4]
 800fbd4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fbd8:	e7a5      	b.n	800fb26 <__kernel_rem_pio2+0x4e6>
 800fbda:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800fbde:	eb0d 0403 	add.w	r4, sp, r3
 800fbe2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	2100      	movs	r1, #0
 800fbea:	2d00      	cmp	r5, #0
 800fbec:	da09      	bge.n	800fc02 <__kernel_rem_pio2+0x5c2>
 800fbee:	f1bb 0f00 	cmp.w	fp, #0
 800fbf2:	d002      	beq.n	800fbfa <__kernel_rem_pio2+0x5ba>
 800fbf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	9b01      	ldr	r3, [sp, #4]
 800fbfc:	e9c3 0100 	strd	r0, r1, [r3]
 800fc00:	e791      	b.n	800fb26 <__kernel_rem_pio2+0x4e6>
 800fc02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fc06:	f7f0 fb41 	bl	800028c <__adddf3>
 800fc0a:	3d01      	subs	r5, #1
 800fc0c:	e7ed      	b.n	800fbea <__kernel_rem_pio2+0x5aa>
 800fc0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fc12:	f7f0 fb3b 	bl	800028c <__adddf3>
 800fc16:	3e01      	subs	r6, #1
 800fc18:	e7c0      	b.n	800fb9c <__kernel_rem_pio2+0x55c>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	e7c5      	b.n	800fbac <__kernel_rem_pio2+0x56c>
 800fc20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fc24:	f7f0 fb32 	bl	800028c <__adddf3>
 800fc28:	3401      	adds	r4, #1
 800fc2a:	e7ca      	b.n	800fbc2 <__kernel_rem_pio2+0x582>
 800fc2c:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fc34:	9b02      	ldr	r3, [sp, #8]
 800fc36:	3b01      	subs	r3, #1
 800fc38:	9302      	str	r3, [sp, #8]
 800fc3a:	4632      	mov	r2, r6
 800fc3c:	463b      	mov	r3, r7
 800fc3e:	4640      	mov	r0, r8
 800fc40:	4649      	mov	r1, r9
 800fc42:	f7f0 fb23 	bl	800028c <__adddf3>
 800fc46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	4640      	mov	r0, r8
 800fc50:	4649      	mov	r1, r9
 800fc52:	f7f0 fb19 	bl	8000288 <__aeabi_dsub>
 800fc56:	4632      	mov	r2, r6
 800fc58:	463b      	mov	r3, r7
 800fc5a:	f7f0 fb17 	bl	800028c <__adddf3>
 800fc5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800fc62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fc66:	ed8a 7b00 	vstr	d7, [sl]
 800fc6a:	e76e      	b.n	800fb4a <__kernel_rem_pio2+0x50a>
 800fc6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fc70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800fc74:	4640      	mov	r0, r8
 800fc76:	4632      	mov	r2, r6
 800fc78:	463b      	mov	r3, r7
 800fc7a:	4649      	mov	r1, r9
 800fc7c:	f7f0 fb06 	bl	800028c <__adddf3>
 800fc80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc84:	4602      	mov	r2, r0
 800fc86:	460b      	mov	r3, r1
 800fc88:	4640      	mov	r0, r8
 800fc8a:	4649      	mov	r1, r9
 800fc8c:	f7f0 fafc 	bl	8000288 <__aeabi_dsub>
 800fc90:	4632      	mov	r2, r6
 800fc92:	463b      	mov	r3, r7
 800fc94:	f7f0 fafa 	bl	800028c <__adddf3>
 800fc98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fca0:	ed84 7b00 	vstr	d7, [r4]
 800fca4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fca8:	e755      	b.n	800fb56 <__kernel_rem_pio2+0x516>
 800fcaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fcae:	f7f0 faed 	bl	800028c <__adddf3>
 800fcb2:	3d01      	subs	r5, #1
 800fcb4:	e759      	b.n	800fb6a <__kernel_rem_pio2+0x52a>
 800fcb6:	9b01      	ldr	r3, [sp, #4]
 800fcb8:	9a01      	ldr	r2, [sp, #4]
 800fcba:	601d      	str	r5, [r3, #0]
 800fcbc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fcc0:	605c      	str	r4, [r3, #4]
 800fcc2:	609f      	str	r7, [r3, #8]
 800fcc4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fcc8:	60d3      	str	r3, [r2, #12]
 800fcca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fcce:	6110      	str	r0, [r2, #16]
 800fcd0:	6153      	str	r3, [r2, #20]
 800fcd2:	e728      	b.n	800fb26 <__kernel_rem_pio2+0x4e6>
 800fcd4:	41700000 	.word	0x41700000
 800fcd8:	3e700000 	.word	0x3e700000
 800fcdc:	00000000 	.word	0x00000000

0800fce0 <__kernel_sin>:
 800fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce4:	ed2d 8b04 	vpush	{d8-d9}
 800fce8:	eeb0 8a41 	vmov.f32	s16, s2
 800fcec:	eef0 8a61 	vmov.f32	s17, s3
 800fcf0:	ec55 4b10 	vmov	r4, r5, d0
 800fcf4:	b083      	sub	sp, #12
 800fcf6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fcfa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fcfe:	9001      	str	r0, [sp, #4]
 800fd00:	da06      	bge.n	800fd10 <__kernel_sin+0x30>
 800fd02:	ee10 0a10 	vmov	r0, s0
 800fd06:	4629      	mov	r1, r5
 800fd08:	f7f0 ff26 	bl	8000b58 <__aeabi_d2iz>
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	d051      	beq.n	800fdb4 <__kernel_sin+0xd4>
 800fd10:	4622      	mov	r2, r4
 800fd12:	462b      	mov	r3, r5
 800fd14:	4620      	mov	r0, r4
 800fd16:	4629      	mov	r1, r5
 800fd18:	f7f0 fc6e 	bl	80005f8 <__aeabi_dmul>
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	468b      	mov	fp, r1
 800fd20:	4602      	mov	r2, r0
 800fd22:	460b      	mov	r3, r1
 800fd24:	4620      	mov	r0, r4
 800fd26:	4629      	mov	r1, r5
 800fd28:	f7f0 fc66 	bl	80005f8 <__aeabi_dmul>
 800fd2c:	a341      	add	r3, pc, #260	; (adr r3, 800fe34 <__kernel_sin+0x154>)
 800fd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd32:	4680      	mov	r8, r0
 800fd34:	4689      	mov	r9, r1
 800fd36:	4650      	mov	r0, sl
 800fd38:	4659      	mov	r1, fp
 800fd3a:	f7f0 fc5d 	bl	80005f8 <__aeabi_dmul>
 800fd3e:	a33f      	add	r3, pc, #252	; (adr r3, 800fe3c <__kernel_sin+0x15c>)
 800fd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd44:	f7f0 faa0 	bl	8000288 <__aeabi_dsub>
 800fd48:	4652      	mov	r2, sl
 800fd4a:	465b      	mov	r3, fp
 800fd4c:	f7f0 fc54 	bl	80005f8 <__aeabi_dmul>
 800fd50:	a33c      	add	r3, pc, #240	; (adr r3, 800fe44 <__kernel_sin+0x164>)
 800fd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd56:	f7f0 fa99 	bl	800028c <__adddf3>
 800fd5a:	4652      	mov	r2, sl
 800fd5c:	465b      	mov	r3, fp
 800fd5e:	f7f0 fc4b 	bl	80005f8 <__aeabi_dmul>
 800fd62:	a33a      	add	r3, pc, #232	; (adr r3, 800fe4c <__kernel_sin+0x16c>)
 800fd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd68:	f7f0 fa8e 	bl	8000288 <__aeabi_dsub>
 800fd6c:	4652      	mov	r2, sl
 800fd6e:	465b      	mov	r3, fp
 800fd70:	f7f0 fc42 	bl	80005f8 <__aeabi_dmul>
 800fd74:	a337      	add	r3, pc, #220	; (adr r3, 800fe54 <__kernel_sin+0x174>)
 800fd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7a:	f7f0 fa87 	bl	800028c <__adddf3>
 800fd7e:	9b01      	ldr	r3, [sp, #4]
 800fd80:	4606      	mov	r6, r0
 800fd82:	460f      	mov	r7, r1
 800fd84:	b9eb      	cbnz	r3, 800fdc2 <__kernel_sin+0xe2>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	4650      	mov	r0, sl
 800fd8c:	4659      	mov	r1, fp
 800fd8e:	f7f0 fc33 	bl	80005f8 <__aeabi_dmul>
 800fd92:	a325      	add	r3, pc, #148	; (adr r3, 800fe28 <__kernel_sin+0x148>)
 800fd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd98:	f7f0 fa76 	bl	8000288 <__aeabi_dsub>
 800fd9c:	4642      	mov	r2, r8
 800fd9e:	464b      	mov	r3, r9
 800fda0:	f7f0 fc2a 	bl	80005f8 <__aeabi_dmul>
 800fda4:	4602      	mov	r2, r0
 800fda6:	460b      	mov	r3, r1
 800fda8:	4620      	mov	r0, r4
 800fdaa:	4629      	mov	r1, r5
 800fdac:	f7f0 fa6e 	bl	800028c <__adddf3>
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	460d      	mov	r5, r1
 800fdb4:	ec45 4b10 	vmov	d0, r4, r5
 800fdb8:	b003      	add	sp, #12
 800fdba:	ecbd 8b04 	vpop	{d8-d9}
 800fdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdc2:	4b1b      	ldr	r3, [pc, #108]	; (800fe30 <__kernel_sin+0x150>)
 800fdc4:	ec51 0b18 	vmov	r0, r1, d8
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f7f0 fc15 	bl	80005f8 <__aeabi_dmul>
 800fdce:	4632      	mov	r2, r6
 800fdd0:	ec41 0b19 	vmov	d9, r0, r1
 800fdd4:	463b      	mov	r3, r7
 800fdd6:	4640      	mov	r0, r8
 800fdd8:	4649      	mov	r1, r9
 800fdda:	f7f0 fc0d 	bl	80005f8 <__aeabi_dmul>
 800fdde:	4602      	mov	r2, r0
 800fde0:	460b      	mov	r3, r1
 800fde2:	ec51 0b19 	vmov	r0, r1, d9
 800fde6:	f7f0 fa4f 	bl	8000288 <__aeabi_dsub>
 800fdea:	4652      	mov	r2, sl
 800fdec:	465b      	mov	r3, fp
 800fdee:	f7f0 fc03 	bl	80005f8 <__aeabi_dmul>
 800fdf2:	ec53 2b18 	vmov	r2, r3, d8
 800fdf6:	f7f0 fa47 	bl	8000288 <__aeabi_dsub>
 800fdfa:	a30b      	add	r3, pc, #44	; (adr r3, 800fe28 <__kernel_sin+0x148>)
 800fdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe00:	4606      	mov	r6, r0
 800fe02:	460f      	mov	r7, r1
 800fe04:	4640      	mov	r0, r8
 800fe06:	4649      	mov	r1, r9
 800fe08:	f7f0 fbf6 	bl	80005f8 <__aeabi_dmul>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	460b      	mov	r3, r1
 800fe10:	4630      	mov	r0, r6
 800fe12:	4639      	mov	r1, r7
 800fe14:	f7f0 fa3a 	bl	800028c <__adddf3>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	4629      	mov	r1, r5
 800fe20:	f7f0 fa32 	bl	8000288 <__aeabi_dsub>
 800fe24:	e7c4      	b.n	800fdb0 <__kernel_sin+0xd0>
 800fe26:	bf00      	nop
 800fe28:	55555549 	.word	0x55555549
 800fe2c:	3fc55555 	.word	0x3fc55555
 800fe30:	3fe00000 	.word	0x3fe00000
 800fe34:	5acfd57c 	.word	0x5acfd57c
 800fe38:	3de5d93a 	.word	0x3de5d93a
 800fe3c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fe40:	3e5ae5e6 	.word	0x3e5ae5e6
 800fe44:	57b1fe7d 	.word	0x57b1fe7d
 800fe48:	3ec71de3 	.word	0x3ec71de3
 800fe4c:	19c161d5 	.word	0x19c161d5
 800fe50:	3f2a01a0 	.word	0x3f2a01a0
 800fe54:	1110f8a6 	.word	0x1110f8a6
 800fe58:	3f811111 	.word	0x3f811111

0800fe5c <with_errno>:
 800fe5c:	b570      	push	{r4, r5, r6, lr}
 800fe5e:	4604      	mov	r4, r0
 800fe60:	460d      	mov	r5, r1
 800fe62:	4616      	mov	r6, r2
 800fe64:	f7f9 faae 	bl	80093c4 <__errno>
 800fe68:	4629      	mov	r1, r5
 800fe6a:	6006      	str	r6, [r0, #0]
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	bd70      	pop	{r4, r5, r6, pc}

0800fe70 <xflow>:
 800fe70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe72:	4614      	mov	r4, r2
 800fe74:	461d      	mov	r5, r3
 800fe76:	b108      	cbz	r0, 800fe7c <xflow+0xc>
 800fe78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fe7c:	e9cd 2300 	strd	r2, r3, [sp]
 800fe80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe84:	4620      	mov	r0, r4
 800fe86:	4629      	mov	r1, r5
 800fe88:	f7f0 fbb6 	bl	80005f8 <__aeabi_dmul>
 800fe8c:	2222      	movs	r2, #34	; 0x22
 800fe8e:	b003      	add	sp, #12
 800fe90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe94:	f7ff bfe2 	b.w	800fe5c <with_errno>

0800fe98 <__math_uflow>:
 800fe98:	b508      	push	{r3, lr}
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fea0:	f7ff ffe6 	bl	800fe70 <xflow>
 800fea4:	ec41 0b10 	vmov	d0, r0, r1
 800fea8:	bd08      	pop	{r3, pc}

0800feaa <__math_oflow>:
 800feaa:	b508      	push	{r3, lr}
 800feac:	2200      	movs	r2, #0
 800feae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800feb2:	f7ff ffdd 	bl	800fe70 <xflow>
 800feb6:	ec41 0b10 	vmov	d0, r0, r1
 800feba:	bd08      	pop	{r3, pc}
 800febc:	0000      	movs	r0, r0
	...

0800fec0 <atan>:
 800fec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec4:	ec55 4b10 	vmov	r4, r5, d0
 800fec8:	4bc3      	ldr	r3, [pc, #780]	; (80101d8 <atan+0x318>)
 800feca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fece:	429e      	cmp	r6, r3
 800fed0:	46ab      	mov	fp, r5
 800fed2:	dd18      	ble.n	800ff06 <atan+0x46>
 800fed4:	4bc1      	ldr	r3, [pc, #772]	; (80101dc <atan+0x31c>)
 800fed6:	429e      	cmp	r6, r3
 800fed8:	dc01      	bgt.n	800fede <atan+0x1e>
 800feda:	d109      	bne.n	800fef0 <atan+0x30>
 800fedc:	b144      	cbz	r4, 800fef0 <atan+0x30>
 800fede:	4622      	mov	r2, r4
 800fee0:	462b      	mov	r3, r5
 800fee2:	4620      	mov	r0, r4
 800fee4:	4629      	mov	r1, r5
 800fee6:	f7f0 f9d1 	bl	800028c <__adddf3>
 800feea:	4604      	mov	r4, r0
 800feec:	460d      	mov	r5, r1
 800feee:	e006      	b.n	800fefe <atan+0x3e>
 800fef0:	f1bb 0f00 	cmp.w	fp, #0
 800fef4:	f300 8131 	bgt.w	801015a <atan+0x29a>
 800fef8:	a59b      	add	r5, pc, #620	; (adr r5, 8010168 <atan+0x2a8>)
 800fefa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fefe:	ec45 4b10 	vmov	d0, r4, r5
 800ff02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff06:	4bb6      	ldr	r3, [pc, #728]	; (80101e0 <atan+0x320>)
 800ff08:	429e      	cmp	r6, r3
 800ff0a:	dc14      	bgt.n	800ff36 <atan+0x76>
 800ff0c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ff10:	429e      	cmp	r6, r3
 800ff12:	dc0d      	bgt.n	800ff30 <atan+0x70>
 800ff14:	a396      	add	r3, pc, #600	; (adr r3, 8010170 <atan+0x2b0>)
 800ff16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1a:	ee10 0a10 	vmov	r0, s0
 800ff1e:	4629      	mov	r1, r5
 800ff20:	f7f0 f9b4 	bl	800028c <__adddf3>
 800ff24:	4baf      	ldr	r3, [pc, #700]	; (80101e4 <atan+0x324>)
 800ff26:	2200      	movs	r2, #0
 800ff28:	f7f0 fdf6 	bl	8000b18 <__aeabi_dcmpgt>
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d1e6      	bne.n	800fefe <atan+0x3e>
 800ff30:	f04f 3aff 	mov.w	sl, #4294967295
 800ff34:	e02b      	b.n	800ff8e <atan+0xce>
 800ff36:	f000 f963 	bl	8010200 <fabs>
 800ff3a:	4bab      	ldr	r3, [pc, #684]	; (80101e8 <atan+0x328>)
 800ff3c:	429e      	cmp	r6, r3
 800ff3e:	ec55 4b10 	vmov	r4, r5, d0
 800ff42:	f300 80bf 	bgt.w	80100c4 <atan+0x204>
 800ff46:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ff4a:	429e      	cmp	r6, r3
 800ff4c:	f300 80a0 	bgt.w	8010090 <atan+0x1d0>
 800ff50:	ee10 2a10 	vmov	r2, s0
 800ff54:	ee10 0a10 	vmov	r0, s0
 800ff58:	462b      	mov	r3, r5
 800ff5a:	4629      	mov	r1, r5
 800ff5c:	f7f0 f996 	bl	800028c <__adddf3>
 800ff60:	4ba0      	ldr	r3, [pc, #640]	; (80101e4 <atan+0x324>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	f7f0 f990 	bl	8000288 <__aeabi_dsub>
 800ff68:	2200      	movs	r2, #0
 800ff6a:	4606      	mov	r6, r0
 800ff6c:	460f      	mov	r7, r1
 800ff6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff72:	4620      	mov	r0, r4
 800ff74:	4629      	mov	r1, r5
 800ff76:	f7f0 f989 	bl	800028c <__adddf3>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	4630      	mov	r0, r6
 800ff80:	4639      	mov	r1, r7
 800ff82:	f7f0 fc63 	bl	800084c <__aeabi_ddiv>
 800ff86:	f04f 0a00 	mov.w	sl, #0
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	460d      	mov	r5, r1
 800ff8e:	4622      	mov	r2, r4
 800ff90:	462b      	mov	r3, r5
 800ff92:	4620      	mov	r0, r4
 800ff94:	4629      	mov	r1, r5
 800ff96:	f7f0 fb2f 	bl	80005f8 <__aeabi_dmul>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	4680      	mov	r8, r0
 800ffa0:	4689      	mov	r9, r1
 800ffa2:	f7f0 fb29 	bl	80005f8 <__aeabi_dmul>
 800ffa6:	a374      	add	r3, pc, #464	; (adr r3, 8010178 <atan+0x2b8>)
 800ffa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffac:	4606      	mov	r6, r0
 800ffae:	460f      	mov	r7, r1
 800ffb0:	f7f0 fb22 	bl	80005f8 <__aeabi_dmul>
 800ffb4:	a372      	add	r3, pc, #456	; (adr r3, 8010180 <atan+0x2c0>)
 800ffb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffba:	f7f0 f967 	bl	800028c <__adddf3>
 800ffbe:	4632      	mov	r2, r6
 800ffc0:	463b      	mov	r3, r7
 800ffc2:	f7f0 fb19 	bl	80005f8 <__aeabi_dmul>
 800ffc6:	a370      	add	r3, pc, #448	; (adr r3, 8010188 <atan+0x2c8>)
 800ffc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffcc:	f7f0 f95e 	bl	800028c <__adddf3>
 800ffd0:	4632      	mov	r2, r6
 800ffd2:	463b      	mov	r3, r7
 800ffd4:	f7f0 fb10 	bl	80005f8 <__aeabi_dmul>
 800ffd8:	a36d      	add	r3, pc, #436	; (adr r3, 8010190 <atan+0x2d0>)
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	f7f0 f955 	bl	800028c <__adddf3>
 800ffe2:	4632      	mov	r2, r6
 800ffe4:	463b      	mov	r3, r7
 800ffe6:	f7f0 fb07 	bl	80005f8 <__aeabi_dmul>
 800ffea:	a36b      	add	r3, pc, #428	; (adr r3, 8010198 <atan+0x2d8>)
 800ffec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff0:	f7f0 f94c 	bl	800028c <__adddf3>
 800fff4:	4632      	mov	r2, r6
 800fff6:	463b      	mov	r3, r7
 800fff8:	f7f0 fafe 	bl	80005f8 <__aeabi_dmul>
 800fffc:	a368      	add	r3, pc, #416	; (adr r3, 80101a0 <atan+0x2e0>)
 800fffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010002:	f7f0 f943 	bl	800028c <__adddf3>
 8010006:	4642      	mov	r2, r8
 8010008:	464b      	mov	r3, r9
 801000a:	f7f0 faf5 	bl	80005f8 <__aeabi_dmul>
 801000e:	a366      	add	r3, pc, #408	; (adr r3, 80101a8 <atan+0x2e8>)
 8010010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010014:	4680      	mov	r8, r0
 8010016:	4689      	mov	r9, r1
 8010018:	4630      	mov	r0, r6
 801001a:	4639      	mov	r1, r7
 801001c:	f7f0 faec 	bl	80005f8 <__aeabi_dmul>
 8010020:	a363      	add	r3, pc, #396	; (adr r3, 80101b0 <atan+0x2f0>)
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	f7f0 f92f 	bl	8000288 <__aeabi_dsub>
 801002a:	4632      	mov	r2, r6
 801002c:	463b      	mov	r3, r7
 801002e:	f7f0 fae3 	bl	80005f8 <__aeabi_dmul>
 8010032:	a361      	add	r3, pc, #388	; (adr r3, 80101b8 <atan+0x2f8>)
 8010034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010038:	f7f0 f926 	bl	8000288 <__aeabi_dsub>
 801003c:	4632      	mov	r2, r6
 801003e:	463b      	mov	r3, r7
 8010040:	f7f0 fada 	bl	80005f8 <__aeabi_dmul>
 8010044:	a35e      	add	r3, pc, #376	; (adr r3, 80101c0 <atan+0x300>)
 8010046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004a:	f7f0 f91d 	bl	8000288 <__aeabi_dsub>
 801004e:	4632      	mov	r2, r6
 8010050:	463b      	mov	r3, r7
 8010052:	f7f0 fad1 	bl	80005f8 <__aeabi_dmul>
 8010056:	a35c      	add	r3, pc, #368	; (adr r3, 80101c8 <atan+0x308>)
 8010058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005c:	f7f0 f914 	bl	8000288 <__aeabi_dsub>
 8010060:	4632      	mov	r2, r6
 8010062:	463b      	mov	r3, r7
 8010064:	f7f0 fac8 	bl	80005f8 <__aeabi_dmul>
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	4640      	mov	r0, r8
 801006e:	4649      	mov	r1, r9
 8010070:	f7f0 f90c 	bl	800028c <__adddf3>
 8010074:	4622      	mov	r2, r4
 8010076:	462b      	mov	r3, r5
 8010078:	f7f0 fabe 	bl	80005f8 <__aeabi_dmul>
 801007c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010080:	4602      	mov	r2, r0
 8010082:	460b      	mov	r3, r1
 8010084:	d14b      	bne.n	801011e <atan+0x25e>
 8010086:	4620      	mov	r0, r4
 8010088:	4629      	mov	r1, r5
 801008a:	f7f0 f8fd 	bl	8000288 <__aeabi_dsub>
 801008e:	e72c      	b.n	800feea <atan+0x2a>
 8010090:	ee10 0a10 	vmov	r0, s0
 8010094:	4b53      	ldr	r3, [pc, #332]	; (80101e4 <atan+0x324>)
 8010096:	2200      	movs	r2, #0
 8010098:	4629      	mov	r1, r5
 801009a:	f7f0 f8f5 	bl	8000288 <__aeabi_dsub>
 801009e:	4b51      	ldr	r3, [pc, #324]	; (80101e4 <atan+0x324>)
 80100a0:	4606      	mov	r6, r0
 80100a2:	460f      	mov	r7, r1
 80100a4:	2200      	movs	r2, #0
 80100a6:	4620      	mov	r0, r4
 80100a8:	4629      	mov	r1, r5
 80100aa:	f7f0 f8ef 	bl	800028c <__adddf3>
 80100ae:	4602      	mov	r2, r0
 80100b0:	460b      	mov	r3, r1
 80100b2:	4630      	mov	r0, r6
 80100b4:	4639      	mov	r1, r7
 80100b6:	f7f0 fbc9 	bl	800084c <__aeabi_ddiv>
 80100ba:	f04f 0a01 	mov.w	sl, #1
 80100be:	4604      	mov	r4, r0
 80100c0:	460d      	mov	r5, r1
 80100c2:	e764      	b.n	800ff8e <atan+0xce>
 80100c4:	4b49      	ldr	r3, [pc, #292]	; (80101ec <atan+0x32c>)
 80100c6:	429e      	cmp	r6, r3
 80100c8:	da1d      	bge.n	8010106 <atan+0x246>
 80100ca:	ee10 0a10 	vmov	r0, s0
 80100ce:	4b48      	ldr	r3, [pc, #288]	; (80101f0 <atan+0x330>)
 80100d0:	2200      	movs	r2, #0
 80100d2:	4629      	mov	r1, r5
 80100d4:	f7f0 f8d8 	bl	8000288 <__aeabi_dsub>
 80100d8:	4b45      	ldr	r3, [pc, #276]	; (80101f0 <atan+0x330>)
 80100da:	4606      	mov	r6, r0
 80100dc:	460f      	mov	r7, r1
 80100de:	2200      	movs	r2, #0
 80100e0:	4620      	mov	r0, r4
 80100e2:	4629      	mov	r1, r5
 80100e4:	f7f0 fa88 	bl	80005f8 <__aeabi_dmul>
 80100e8:	4b3e      	ldr	r3, [pc, #248]	; (80101e4 <atan+0x324>)
 80100ea:	2200      	movs	r2, #0
 80100ec:	f7f0 f8ce 	bl	800028c <__adddf3>
 80100f0:	4602      	mov	r2, r0
 80100f2:	460b      	mov	r3, r1
 80100f4:	4630      	mov	r0, r6
 80100f6:	4639      	mov	r1, r7
 80100f8:	f7f0 fba8 	bl	800084c <__aeabi_ddiv>
 80100fc:	f04f 0a02 	mov.w	sl, #2
 8010100:	4604      	mov	r4, r0
 8010102:	460d      	mov	r5, r1
 8010104:	e743      	b.n	800ff8e <atan+0xce>
 8010106:	462b      	mov	r3, r5
 8010108:	ee10 2a10 	vmov	r2, s0
 801010c:	4939      	ldr	r1, [pc, #228]	; (80101f4 <atan+0x334>)
 801010e:	2000      	movs	r0, #0
 8010110:	f7f0 fb9c 	bl	800084c <__aeabi_ddiv>
 8010114:	f04f 0a03 	mov.w	sl, #3
 8010118:	4604      	mov	r4, r0
 801011a:	460d      	mov	r5, r1
 801011c:	e737      	b.n	800ff8e <atan+0xce>
 801011e:	4b36      	ldr	r3, [pc, #216]	; (80101f8 <atan+0x338>)
 8010120:	4e36      	ldr	r6, [pc, #216]	; (80101fc <atan+0x33c>)
 8010122:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010126:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801012a:	e9da 2300 	ldrd	r2, r3, [sl]
 801012e:	f7f0 f8ab 	bl	8000288 <__aeabi_dsub>
 8010132:	4622      	mov	r2, r4
 8010134:	462b      	mov	r3, r5
 8010136:	f7f0 f8a7 	bl	8000288 <__aeabi_dsub>
 801013a:	4602      	mov	r2, r0
 801013c:	460b      	mov	r3, r1
 801013e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010142:	f7f0 f8a1 	bl	8000288 <__aeabi_dsub>
 8010146:	f1bb 0f00 	cmp.w	fp, #0
 801014a:	4604      	mov	r4, r0
 801014c:	460d      	mov	r5, r1
 801014e:	f6bf aed6 	bge.w	800fefe <atan+0x3e>
 8010152:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010156:	461d      	mov	r5, r3
 8010158:	e6d1      	b.n	800fefe <atan+0x3e>
 801015a:	a51d      	add	r5, pc, #116	; (adr r5, 80101d0 <atan+0x310>)
 801015c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010160:	e6cd      	b.n	800fefe <atan+0x3e>
 8010162:	bf00      	nop
 8010164:	f3af 8000 	nop.w
 8010168:	54442d18 	.word	0x54442d18
 801016c:	bff921fb 	.word	0xbff921fb
 8010170:	8800759c 	.word	0x8800759c
 8010174:	7e37e43c 	.word	0x7e37e43c
 8010178:	e322da11 	.word	0xe322da11
 801017c:	3f90ad3a 	.word	0x3f90ad3a
 8010180:	24760deb 	.word	0x24760deb
 8010184:	3fa97b4b 	.word	0x3fa97b4b
 8010188:	a0d03d51 	.word	0xa0d03d51
 801018c:	3fb10d66 	.word	0x3fb10d66
 8010190:	c54c206e 	.word	0xc54c206e
 8010194:	3fb745cd 	.word	0x3fb745cd
 8010198:	920083ff 	.word	0x920083ff
 801019c:	3fc24924 	.word	0x3fc24924
 80101a0:	5555550d 	.word	0x5555550d
 80101a4:	3fd55555 	.word	0x3fd55555
 80101a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80101ac:	bfa2b444 	.word	0xbfa2b444
 80101b0:	52defd9a 	.word	0x52defd9a
 80101b4:	3fadde2d 	.word	0x3fadde2d
 80101b8:	af749a6d 	.word	0xaf749a6d
 80101bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80101c0:	fe231671 	.word	0xfe231671
 80101c4:	3fbc71c6 	.word	0x3fbc71c6
 80101c8:	9998ebc4 	.word	0x9998ebc4
 80101cc:	3fc99999 	.word	0x3fc99999
 80101d0:	54442d18 	.word	0x54442d18
 80101d4:	3ff921fb 	.word	0x3ff921fb
 80101d8:	440fffff 	.word	0x440fffff
 80101dc:	7ff00000 	.word	0x7ff00000
 80101e0:	3fdbffff 	.word	0x3fdbffff
 80101e4:	3ff00000 	.word	0x3ff00000
 80101e8:	3ff2ffff 	.word	0x3ff2ffff
 80101ec:	40038000 	.word	0x40038000
 80101f0:	3ff80000 	.word	0x3ff80000
 80101f4:	bff00000 	.word	0xbff00000
 80101f8:	08010c20 	.word	0x08010c20
 80101fc:	08010c00 	.word	0x08010c00

08010200 <fabs>:
 8010200:	ec51 0b10 	vmov	r0, r1, d0
 8010204:	ee10 2a10 	vmov	r2, s0
 8010208:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801020c:	ec43 2b10 	vmov	d0, r2, r3
 8010210:	4770      	bx	lr

08010212 <finite>:
 8010212:	b082      	sub	sp, #8
 8010214:	ed8d 0b00 	vstr	d0, [sp]
 8010218:	9801      	ldr	r0, [sp, #4]
 801021a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801021e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010222:	0fc0      	lsrs	r0, r0, #31
 8010224:	b002      	add	sp, #8
 8010226:	4770      	bx	lr

08010228 <floor>:
 8010228:	ec51 0b10 	vmov	r0, r1, d0
 801022c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010230:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010234:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010238:	2e13      	cmp	r6, #19
 801023a:	ee10 5a10 	vmov	r5, s0
 801023e:	ee10 8a10 	vmov	r8, s0
 8010242:	460c      	mov	r4, r1
 8010244:	dc32      	bgt.n	80102ac <floor+0x84>
 8010246:	2e00      	cmp	r6, #0
 8010248:	da14      	bge.n	8010274 <floor+0x4c>
 801024a:	a333      	add	r3, pc, #204	; (adr r3, 8010318 <floor+0xf0>)
 801024c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010250:	f7f0 f81c 	bl	800028c <__adddf3>
 8010254:	2200      	movs	r2, #0
 8010256:	2300      	movs	r3, #0
 8010258:	f7f0 fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 801025c:	b138      	cbz	r0, 801026e <floor+0x46>
 801025e:	2c00      	cmp	r4, #0
 8010260:	da57      	bge.n	8010312 <floor+0xea>
 8010262:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010266:	431d      	orrs	r5, r3
 8010268:	d001      	beq.n	801026e <floor+0x46>
 801026a:	4c2d      	ldr	r4, [pc, #180]	; (8010320 <floor+0xf8>)
 801026c:	2500      	movs	r5, #0
 801026e:	4621      	mov	r1, r4
 8010270:	4628      	mov	r0, r5
 8010272:	e025      	b.n	80102c0 <floor+0x98>
 8010274:	4f2b      	ldr	r7, [pc, #172]	; (8010324 <floor+0xfc>)
 8010276:	4137      	asrs	r7, r6
 8010278:	ea01 0307 	and.w	r3, r1, r7
 801027c:	4303      	orrs	r3, r0
 801027e:	d01f      	beq.n	80102c0 <floor+0x98>
 8010280:	a325      	add	r3, pc, #148	; (adr r3, 8010318 <floor+0xf0>)
 8010282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010286:	f7f0 f801 	bl	800028c <__adddf3>
 801028a:	2200      	movs	r2, #0
 801028c:	2300      	movs	r3, #0
 801028e:	f7f0 fc43 	bl	8000b18 <__aeabi_dcmpgt>
 8010292:	2800      	cmp	r0, #0
 8010294:	d0eb      	beq.n	801026e <floor+0x46>
 8010296:	2c00      	cmp	r4, #0
 8010298:	bfbe      	ittt	lt
 801029a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801029e:	fa43 f606 	asrlt.w	r6, r3, r6
 80102a2:	19a4      	addlt	r4, r4, r6
 80102a4:	ea24 0407 	bic.w	r4, r4, r7
 80102a8:	2500      	movs	r5, #0
 80102aa:	e7e0      	b.n	801026e <floor+0x46>
 80102ac:	2e33      	cmp	r6, #51	; 0x33
 80102ae:	dd0b      	ble.n	80102c8 <floor+0xa0>
 80102b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80102b4:	d104      	bne.n	80102c0 <floor+0x98>
 80102b6:	ee10 2a10 	vmov	r2, s0
 80102ba:	460b      	mov	r3, r1
 80102bc:	f7ef ffe6 	bl	800028c <__adddf3>
 80102c0:	ec41 0b10 	vmov	d0, r0, r1
 80102c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80102cc:	f04f 33ff 	mov.w	r3, #4294967295
 80102d0:	fa23 f707 	lsr.w	r7, r3, r7
 80102d4:	4207      	tst	r7, r0
 80102d6:	d0f3      	beq.n	80102c0 <floor+0x98>
 80102d8:	a30f      	add	r3, pc, #60	; (adr r3, 8010318 <floor+0xf0>)
 80102da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102de:	f7ef ffd5 	bl	800028c <__adddf3>
 80102e2:	2200      	movs	r2, #0
 80102e4:	2300      	movs	r3, #0
 80102e6:	f7f0 fc17 	bl	8000b18 <__aeabi_dcmpgt>
 80102ea:	2800      	cmp	r0, #0
 80102ec:	d0bf      	beq.n	801026e <floor+0x46>
 80102ee:	2c00      	cmp	r4, #0
 80102f0:	da02      	bge.n	80102f8 <floor+0xd0>
 80102f2:	2e14      	cmp	r6, #20
 80102f4:	d103      	bne.n	80102fe <floor+0xd6>
 80102f6:	3401      	adds	r4, #1
 80102f8:	ea25 0507 	bic.w	r5, r5, r7
 80102fc:	e7b7      	b.n	801026e <floor+0x46>
 80102fe:	2301      	movs	r3, #1
 8010300:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010304:	fa03 f606 	lsl.w	r6, r3, r6
 8010308:	4435      	add	r5, r6
 801030a:	4545      	cmp	r5, r8
 801030c:	bf38      	it	cc
 801030e:	18e4      	addcc	r4, r4, r3
 8010310:	e7f2      	b.n	80102f8 <floor+0xd0>
 8010312:	2500      	movs	r5, #0
 8010314:	462c      	mov	r4, r5
 8010316:	e7aa      	b.n	801026e <floor+0x46>
 8010318:	8800759c 	.word	0x8800759c
 801031c:	7e37e43c 	.word	0x7e37e43c
 8010320:	bff00000 	.word	0xbff00000
 8010324:	000fffff 	.word	0x000fffff

08010328 <scalbn>:
 8010328:	b570      	push	{r4, r5, r6, lr}
 801032a:	ec55 4b10 	vmov	r4, r5, d0
 801032e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010332:	4606      	mov	r6, r0
 8010334:	462b      	mov	r3, r5
 8010336:	b99a      	cbnz	r2, 8010360 <scalbn+0x38>
 8010338:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801033c:	4323      	orrs	r3, r4
 801033e:	d036      	beq.n	80103ae <scalbn+0x86>
 8010340:	4b39      	ldr	r3, [pc, #228]	; (8010428 <scalbn+0x100>)
 8010342:	4629      	mov	r1, r5
 8010344:	ee10 0a10 	vmov	r0, s0
 8010348:	2200      	movs	r2, #0
 801034a:	f7f0 f955 	bl	80005f8 <__aeabi_dmul>
 801034e:	4b37      	ldr	r3, [pc, #220]	; (801042c <scalbn+0x104>)
 8010350:	429e      	cmp	r6, r3
 8010352:	4604      	mov	r4, r0
 8010354:	460d      	mov	r5, r1
 8010356:	da10      	bge.n	801037a <scalbn+0x52>
 8010358:	a32b      	add	r3, pc, #172	; (adr r3, 8010408 <scalbn+0xe0>)
 801035a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035e:	e03a      	b.n	80103d6 <scalbn+0xae>
 8010360:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010364:	428a      	cmp	r2, r1
 8010366:	d10c      	bne.n	8010382 <scalbn+0x5a>
 8010368:	ee10 2a10 	vmov	r2, s0
 801036c:	4620      	mov	r0, r4
 801036e:	4629      	mov	r1, r5
 8010370:	f7ef ff8c 	bl	800028c <__adddf3>
 8010374:	4604      	mov	r4, r0
 8010376:	460d      	mov	r5, r1
 8010378:	e019      	b.n	80103ae <scalbn+0x86>
 801037a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801037e:	460b      	mov	r3, r1
 8010380:	3a36      	subs	r2, #54	; 0x36
 8010382:	4432      	add	r2, r6
 8010384:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010388:	428a      	cmp	r2, r1
 801038a:	dd08      	ble.n	801039e <scalbn+0x76>
 801038c:	2d00      	cmp	r5, #0
 801038e:	a120      	add	r1, pc, #128	; (adr r1, 8010410 <scalbn+0xe8>)
 8010390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010394:	da1c      	bge.n	80103d0 <scalbn+0xa8>
 8010396:	a120      	add	r1, pc, #128	; (adr r1, 8010418 <scalbn+0xf0>)
 8010398:	e9d1 0100 	ldrd	r0, r1, [r1]
 801039c:	e018      	b.n	80103d0 <scalbn+0xa8>
 801039e:	2a00      	cmp	r2, #0
 80103a0:	dd08      	ble.n	80103b4 <scalbn+0x8c>
 80103a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80103a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80103aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80103ae:	ec45 4b10 	vmov	d0, r4, r5
 80103b2:	bd70      	pop	{r4, r5, r6, pc}
 80103b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80103b8:	da19      	bge.n	80103ee <scalbn+0xc6>
 80103ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80103be:	429e      	cmp	r6, r3
 80103c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80103c4:	dd0a      	ble.n	80103dc <scalbn+0xb4>
 80103c6:	a112      	add	r1, pc, #72	; (adr r1, 8010410 <scalbn+0xe8>)
 80103c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d1e2      	bne.n	8010396 <scalbn+0x6e>
 80103d0:	a30f      	add	r3, pc, #60	; (adr r3, 8010410 <scalbn+0xe8>)
 80103d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d6:	f7f0 f90f 	bl	80005f8 <__aeabi_dmul>
 80103da:	e7cb      	b.n	8010374 <scalbn+0x4c>
 80103dc:	a10a      	add	r1, pc, #40	; (adr r1, 8010408 <scalbn+0xe0>)
 80103de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d0b8      	beq.n	8010358 <scalbn+0x30>
 80103e6:	a10e      	add	r1, pc, #56	; (adr r1, 8010420 <scalbn+0xf8>)
 80103e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103ec:	e7b4      	b.n	8010358 <scalbn+0x30>
 80103ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80103f2:	3236      	adds	r2, #54	; 0x36
 80103f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80103f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80103fc:	4620      	mov	r0, r4
 80103fe:	4b0c      	ldr	r3, [pc, #48]	; (8010430 <scalbn+0x108>)
 8010400:	2200      	movs	r2, #0
 8010402:	e7e8      	b.n	80103d6 <scalbn+0xae>
 8010404:	f3af 8000 	nop.w
 8010408:	c2f8f359 	.word	0xc2f8f359
 801040c:	01a56e1f 	.word	0x01a56e1f
 8010410:	8800759c 	.word	0x8800759c
 8010414:	7e37e43c 	.word	0x7e37e43c
 8010418:	8800759c 	.word	0x8800759c
 801041c:	fe37e43c 	.word	0xfe37e43c
 8010420:	c2f8f359 	.word	0xc2f8f359
 8010424:	81a56e1f 	.word	0x81a56e1f
 8010428:	43500000 	.word	0x43500000
 801042c:	ffff3cb0 	.word	0xffff3cb0
 8010430:	3c900000 	.word	0x3c900000

08010434 <_init>:
 8010434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010436:	bf00      	nop
 8010438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801043a:	bc08      	pop	{r3}
 801043c:	469e      	mov	lr, r3
 801043e:	4770      	bx	lr

08010440 <_fini>:
 8010440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010442:	bf00      	nop
 8010444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010446:	bc08      	pop	{r3}
 8010448:	469e      	mov	lr, r3
 801044a:	4770      	bx	lr
